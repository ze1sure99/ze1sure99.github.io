<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ch1.1--计网概念和功能</title>
    <url>/2021/07/30/ch1.1-%E8%AE%A1%E7%BD%91%E6%A6%82%E5%BF%B5%E5%92%8C%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h3 id="第一章-网络体系结构"><a href="#第一章-网络体系结构" class="headerlink" title="第一章.网络体系结构"></a>第一章.网络体系结构</h3><h4 id="ch1-概念及功能"><a href="#ch1-概念及功能" class="headerlink" title="ch1.概念及功能"></a>ch1.概念及功能</h4><h5 id="导图"><a href="#导图" class="headerlink" title="导图"></a>导图</h5><p><img src="https://files.catbox.moe/rw3k0k.png" alt="计网体系结构导图"></p>
<h5 id="1-计算机网络概念"><a href="#1-计算机网络概念" class="headerlink" title="1. 计算机网络概念"></a>1. 计算机网络概念</h5><h6 id="计算机网络就是通过各个节点（包括终端的电脑、手机以及集线器、中介器、交换机、路由器等一些中间设备）通过有线或者无线的方式把所说的节点连接起来就构成了这样一个计算机网络。三网：有线电视网络，电视网络，计算机网络。三网在现在社会有个非常潮的名字，叫做三网融合，就是通过计算机网络这个非常关键的媒介来实现的。现在所处的社会呢-是一个高度信息化以及高度数字化的社会，数字技术广泛应用于计算机网络中，我们可以把所有的媒体，文字，图片，视频等等全部转换成0或1这样的一个数字比特流的形式，再放到链路上面进行传输，这样就可以实现节点之间的通信以及资源的共享。那么我们就可以把电信网络当中的音频信号编码为数字信号，同时呢也可以把有线电视网络当中的图像还有音频等等全部编码成数字信号，再放到链路上面进行传输，所以靠着计算机网络就可以把有线电视网络和电信网络融合在一起。可以达到的效果呢就是我们可以在电脑上看电视，或者是在电脑上打电话，除此之外呢，最近还新型了一个四网融合的概念，第四网就是电网，就拿路灯来说吧随着城市规模不断扩大，这个路灯的管理和维护就成了非常重要的问题，那么电信的运营商就可以结合电信网络，计算机网络，有线电视网络来实现无线路灯的监控方案，这样就可以实现终端自动报警的功能，也就是如果有人偷了路灯呢，这个报警信息就会实时的传到负责人的手机或者是电脑等终端当中，以及这个路灯的负责人呢，也可以根据天气或者是季节等各种突发情况来为电灯进行一个远程的遥控，这都是四网融合的一些应用。"><a href="#计算机网络就是通过各个节点（包括终端的电脑、手机以及集线器、中介器、交换机、路由器等一些中间设备）通过有线或者无线的方式把所说的节点连接起来就构成了这样一个计算机网络。三网：有线电视网络，电视网络，计算机网络。三网在现在社会有个非常潮的名字，叫做三网融合，就是通过计算机网络这个非常关键的媒介来实现的。现在所处的社会呢-是一个高度信息化以及高度数字化的社会，数字技术广泛应用于计算机网络中，我们可以把所有的媒体，文字，图片，视频等等全部转换成0或1这样的一个数字比特流的形式，再放到链路上面进行传输，这样就可以实现节点之间的通信以及资源的共享。那么我们就可以把电信网络当中的音频信号编码为数字信号，同时呢也可以把有线电视网络当中的图像还有音频等等全部编码成数字信号，再放到链路上面进行传输，所以靠着计算机网络就可以把有线电视网络和电信网络融合在一起。可以达到的效果呢就是我们可以在电脑上看电视，或者是在电脑上打电话，除此之外呢，最近还新型了一个四网融合的概念，第四网就是电网，就拿路灯来说吧随着城市规模不断扩大，这个路灯的管理和维护就成了非常重要的问题，那么电信的运营商就可以结合电信网络，计算机网络，有线电视网络来实现无线路灯的监控方案，这样就可以实现终端自动报警的功能，也就是如果有人偷了路灯呢，这个报警信息就会实时的传到负责人的手机或者是电脑等终端当中，以及这个路灯的负责人呢，也可以根据天气或者是季节等各种突发情况来为电灯进行一个远程的遥控，这都是四网融合的一些应用。" class="headerlink" title="计算机网络就是通过各个节点（包括终端的电脑、手机以及集线器、中介器、交换机、路由器等一些中间设备）通过有线或者无线的方式把所说的节点连接起来就构成了这样一个计算机网络。三网：有线电视网络，电视网络，计算机网络。三网在现在社会有个非常潮的名字，叫做三网融合，就是通过计算机网络这个非常关键的媒介来实现的。现在所处的社会呢 是一个高度信息化以及高度数字化的社会，数字技术广泛应用于计算机网络中，我们可以把所有的媒体，文字，图片，视频等等全部转换成0或1这样的一个数字比特流的形式，再放到链路上面进行传输，这样就可以实现节点之间的通信以及资源的共享。那么我们就可以把电信网络当中的音频信号编码为数字信号，同时呢也可以把有线电视网络当中的图像还有音频等等全部编码成数字信号，再放到链路上面进行传输，所以靠着计算机网络就可以把有线电视网络和电信网络融合在一起。可以达到的效果呢就是我们可以在电脑上看电视，或者是在电脑上打电话，除此之外呢，最近还新型了一个四网融合的概念，第四网就是电网，就拿路灯来说吧随着城市规模不断扩大，这个路灯的管理和维护就成了非常重要的问题，那么电信的运营商就可以结合电信网络，计算机网络，有线电视网络来实现无线路灯的监控方案，这样就可以实现终端自动报警的功能，也就是如果有人偷了路灯呢，这个报警信息就会实时的传到负责人的手机或者是电脑等终端当中，以及这个路灯的负责人呢，也可以根据天气或者是季节等各种突发情况来为电灯进行一个远程的遥控，这都是四网融合的一些应用。"></a>计算机网络就是通过各个节点（包括终端的电脑、手机以及集线器、中介器、交换机、路由器等一些中间设备）通过有线或者无线的方式把所说的节点连接起来就构成了这样一个计算机网络。三网：有线电视网络，电视网络，计算机网络。三网在现在社会有个非常潮的名字，叫做三网融合，就是通过计算机网络这个非常关键的媒介来实现的。现在所处的社会呢 是一个高度信息化以及高度数字化的社会，数字技术广泛应用于计算机网络中，我们可以把所有的媒体，文字，图片，视频等等全部转换成0或1这样的一个数字比特流的形式，再放到链路上面进行传输，这样就可以实现节点之间的通信以及资源的共享。那么我们就可以把电信网络当中的音频信号编码为数字信号，同时呢也可以把有线电视网络当中的图像还有音频等等全部编码成数字信号，再放到链路上面进行传输，所以靠着计算机网络就可以把有线电视网络和电信网络融合在一起。可以达到的效果呢就是我们可以在电脑上看电视，或者是在电脑上打电话，除此之外呢，最近还新型了一个四网融合的概念，第四网就是电网，就拿路灯来说吧随着城市规模不断扩大，这个路灯的管理和维护就成了非常重要的问题，那么电信的运营商就可以结合电信网络，计算机网络，有线电视网络来实现无线路灯的监控方案，这样就可以实现终端自动报警的功能，也就是如果有人偷了路灯呢，这个报警信息就会实时的传到负责人的手机或者是电脑等终端当中，以及这个路灯的负责人呢，也可以根据天气或者是季节等各种突发情况来为电灯进行一个远程的遥控，这都是四网融合的一些应用。</h6><h6 id="计算机网络：是一个将分散的、具有独立功能的（计算机系统），通过（通信设备）与（线路）连接起来，由功能完善的（软件）实现（资源共享）和（信息传递）的系统。"><a href="#计算机网络：是一个将分散的、具有独立功能的（计算机系统），通过（通信设备）与（线路）连接起来，由功能完善的（软件）实现（资源共享）和（信息传递）的系统。" class="headerlink" title="计算机网络：是一个将分散的、具有独立功能的（计算机系统），通过（通信设备）与（线路）连接起来，由功能完善的（软件）实现（资源共享）和（信息传递）的系统。"></a>计算机网络：是一个将分散的、具有独立功能的（计算机系统），通过（通信设备）与（线路）连接起来，由功能完善的（软件）实现（资源共享）和（信息传递）的系统。</h6><h6 id="计算机网络是（互连）的、（自治）的计算机集合。"><a href="#计算机网络是（互连）的、（自治）的计算机集合。" class="headerlink" title="计算机网络是（互连）的、（自治）的计算机集合。"></a>计算机网络是（互连）的、（自治）的计算机集合。</h6><h6 id="互联—通过通信链路互联互通"><a href="#互联—通过通信链路互联互通" class="headerlink" title="互联—通过通信链路互联互通"></a>互联—通过通信链路互联互通</h6><h6 id="自治—无主从关系"><a href="#自治—无主从关系" class="headerlink" title="自治—无主从关系"></a>自治—无主从关系</h6><h5 id="2-计算机网络的功能"><a href="#2-计算机网络的功能" class="headerlink" title="2. 计算机网络的功能"></a>2. 计算机网络的功能</h5><h6 id="2-1-数据通信：假如有两台主机，我可以把文件发给你，发消息，发邮件"><a href="#2-1-数据通信：假如有两台主机，我可以把文件发给你，发消息，发邮件" class="headerlink" title="2.1.数据通信：假如有两台主机，我可以把文件发给你，发消息，发邮件"></a>2.1.数据通信：假如有两台主机，我可以把文件发给你，发消息，发邮件</h6><h6 id="2-2-资源共享：同一个计算机网络上的其他计算机"><a href="#2-2-资源共享：同一个计算机网络上的其他计算机" class="headerlink" title="2.2.资源共享：同一个计算机网络上的其他计算机"></a>2.2.资源共享：同一个计算机网络上的其他计算机</h6><h6 id="2-3-分布式处理：多台计算机各自承担同一工作任务的不同部分，如Hadoop平台"><a href="#2-3-分布式处理：多台计算机各自承担同一工作任务的不同部分，如Hadoop平台" class="headerlink" title="2.3.分布式处理：多台计算机各自承担同一工作任务的不同部分，如Hadoop平台"></a>2.3.分布式处理：多台计算机各自承担同一工作任务的不同部分，如Hadoop平台</h6><h6 id="2-4-提高可靠性：替代机"><a href="#2-4-提高可靠性：替代机" class="headerlink" title="2.4.提高可靠性：替代机"></a>2.4.提高可靠性：替代机</h6><h6 id="2-5-负载均衡：各计算机之间更亲密"><a href="#2-5-负载均衡：各计算机之间更亲密" class="headerlink" title="2.5.负载均衡：各计算机之间更亲密"></a>2.5.负载均衡：各计算机之间更亲密</h6><h5 id="3-计算机网络的发展"><a href="#3-计算机网络的发展" class="headerlink" title="3.计算机网络的发展"></a>3.计算机网络的发展</h5><h6 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h6><p><img src="https://files.catbox.moe/uxtrrk.png" alt="计算机网络发展"></p>
<h6 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h6><p><img src="https://files.catbox.moe/5pg9pe.png" alt="计算机网络发展"></p>
<h6 id="第三阶段"><a href="#第三阶段" class="headerlink" title="第三阶段"></a>第三阶段</h6><p><img src="https://files.catbox.moe/hi3x6d.png" alt="计算机网络发展"></p>
<h5 id="概念-amp-功能总结"><a href="#概念-amp-功能总结" class="headerlink" title="概念&amp;功能总结"></a>概念&amp;功能总结</h5><p><img src="https://files.catbox.moe/u0uj1s.png" alt="概念功能总结"></p>
]]></content>
      <categories>
        <category>计网</category>
      </categories>
      <tags>
        <tag>计网</tag>
      </tags>
  </entry>
  <entry>
    <title>OS的发展与分类</title>
    <url>/2021/10/12/ch1.1.2-OS%E7%9A%84%E5%8F%91%E5%B1%95%E4%B8%8E%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="1-知识总览"><a href="#1-知识总览" class="headerlink" title="1.知识总览"></a>1.知识总览</h1><p><img src="https://files.catbox.moe/w74ah7.png" alt="知识总览"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在学习的过程当中</span><br><span class="line">大家需要重点关注和理解的是</span><br><span class="line">各类型的操作系统</span><br><span class="line">他们主要想解决的事什么问题</span><br><span class="line">然后要稍微关注一下他们各自的优缺点</span><br></pre></td></tr></table></figure>

<h1 id="2-手工操作阶段"><a href="#2-手工操作阶段" class="headerlink" title="2.手工操作阶段"></a>2.手工操作阶段</h1><p><img src="https://files.catbox.moe/9owrnl.png" alt="手工操作阶段"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在这个阶段其实操作系统还没有诞生</span><br><span class="line">程序员写程序是要写在这样的纸袋上的</span><br><span class="line">可以看到这个纸袋上有一些小孔</span><br><span class="line">那么有孔的地方代表的是二进制的1</span><br><span class="line">没有孔的地方代表的是二进制的0</span><br><span class="line">所以程序员通过在纸带上打孔这样的方式写好了自己的程序</span><br><span class="line">然后把自己的这个程序放到纸带机上</span><br><span class="line">然后计算机从纸袋机当中读取我们要运行的程序</span><br><span class="line">等程序运行了结束之后</span><br><span class="line">又把程序运行的结果再输出到纸袋机上</span><br><span class="line">之后再由程序猿从纸袋机取走自己程序的运行结果</span><br><span class="line">但是用手工操作的这种方式存在一个很明显的问题</span><br><span class="line">就是程序猿用手工的方式把纸袋装到纸袋机或者从纸袋机取走自己的程序</span><br><span class="line">运行结果的过程其实是超级慢的</span><br><span class="line">所以假设一个程序猿此时要提交一个自己的作业</span><br><span class="line">提交一个自己的程序让他运行的话</span><br><span class="line">首先 程序猿需要花很长时间把自己的程序放到纸袋机上</span><br><span class="line">之后 计算机需要把纸袋机上的这个程序数据给读到计算机里</span><br><span class="line">而这个读取的过程也是一个很慢速的过程</span><br><span class="line">也需要消耗不短的时间</span><br><span class="line">但是计算机的计算速度</span><br><span class="line">处理程序的速度是非常快的</span><br><span class="line">所以其实计算机在计算的时候</span><br><span class="line">只需要花很短的时间就可以把这个程序运行结束了</span><br><span class="line">那当程序运行完了之后</span><br><span class="line">他又同样需要花比较长的时间把程序运行的结果</span><br><span class="line">输出到纸袋机上</span><br><span class="line">之后程序猿再把纸袋机上的结果再给用手工的方式取走</span><br><span class="line">等第一个程序猿把自己的运行结果取走之后</span><br><span class="line">才能由第二个程序猿来接着使用计算机</span><br><span class="line">那同样的</span><br><span class="line">第二个程序猿首先需要把自己的程序放到纸袋机上</span><br><span class="line">需要花很长的过程</span><br><span class="line">接下来</span><br><span class="line">又从纸袋机读到计算机内</span><br><span class="line">这也需要花不少的时间</span><br><span class="line">但是同样的</span><br><span class="line">计算机处理这个程序其实只需要花很短的时间</span><br><span class="line">所以可以看到</span><br><span class="line">在手工操作阶段存在的主要的缺点就是用户独占全机</span><br><span class="line">在第一个程序猿在自己的程序没有完全运行结束之前</span><br><span class="line">是不允许第二个程序猿和他同时使用计算机的</span><br><span class="line">所以当他使用计算机的时候</span><br><span class="line">就是独占着使用</span><br><span class="line">第二个很明显的缺点是</span><br><span class="line">由于手工操作是一个很慢的过程</span><br><span class="line">但是计算机又是一个很快的过程</span><br><span class="line">因此</span><br><span class="line">这样的人机速度矛盾会导致</span><br><span class="line">资源的利用率极低</span><br><span class="line">特别是计算机cpu的利用率极低</span><br><span class="line">我们可以看到</span><br><span class="line">在这么长的一段时间内</span><br><span class="line">其实cpu或者说计算机真正在忙碌在工作的时间</span><br><span class="line">只有上图J1红色的一小段和上图J2的一小段</span><br><span class="line">有很大的比例</span><br><span class="line">这个计算机是处于空闲的状态的</span><br><span class="line">但是在这个阶段</span><br><span class="line">其实计算机的造价十分昂贵</span><br><span class="line">所以让计算机这种昂贵的资源有大量时间处于空闲状态</span><br><span class="line">显然是一种很不经济</span><br><span class="line">很低效的一种方式</span><br><span class="line">因此为了解决这个问题</span><br><span class="line">人们发明了单道批处理系统</span><br></pre></td></tr></table></figure>

<h1 id="3-单道批处理系统"><a href="#3-单道批处理系统" class="headerlink" title="3.单道批处理系统"></a>3.单道批处理系统</h1><p><img src="https://files.catbox.moe/3ld7zy.png" alt="单道批处理系统"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在这个阶段</span><br><span class="line">人们引入脱机输入输出技术</span><br><span class="line">各个程序猿可以把自己的程序都依次放到纸袋机上</span><br><span class="line">然后会有一个叫做外围机或者叫外围控制机的一个</span><br><span class="line">专门的机器控制着把这些纸袋机里的程序数据</span><br><span class="line">先把他放在磁带上</span><br><span class="line">之后 计算机可以直接从这个磁带里对于读取这些程序的数据</span><br><span class="line">而磁带的读写速度要比纸袋机快很多</span><br><span class="line">此时的计算机当中会运行着一个叫做监督程序的程序</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/0yo58x.png" alt="磁带"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">由这个监督程序（操作系统的雏形）控制着</span><br><span class="line">自动的从这些磁带当中输入输出作业的数据</span><br><span class="line">而从磁带中输入输出作业其实是</span><br><span class="line">速度是要更快的</span><br><span class="line">所以引入了这种脱机输入输出技术之后</span><br><span class="line">我们读取了一个作业</span><br><span class="line">所需要花的时间比例就小了很多了</span><br><span class="line">这个监督程序会控制着计算机自动的从磁带中</span><br><span class="line">读入第一个作业也就是j1</span><br><span class="line">这个读入的过程要比要比纸袋机读入快很多</span><br><span class="line">接下来会进行程序的运送</span><br><span class="line">在接下来进行输出</span><br><span class="line">输出到这个磁带上</span><br><span class="line">等第一个作业完成之后</span><br><span class="line">就可以开始</span><br><span class="line">紧接着读入第二个作业</span><br><span class="line">然后计算再输出</span><br><span class="line">那可以推测</span><br><span class="line">这个作业的输入输出过程所需要占的时间比例</span><br><span class="line">其实是降低了很多的</span><br><span class="line">这样的话</span><br><span class="line">就可以让cpu有更高比例的时间处于计算处于忙碌的状态</span><br><span class="line">这就是cpu的资源利用率</span><br><span class="line">有一定的提升</span><br><span class="line">缓解了一定程度上的人机速度矛盾</span><br><span class="line">但是这种方式</span><br><span class="line">很显然</span><br><span class="line">它的资源利用率依然是不够高的</span><br><span class="line">内存中同一时刻只能有一道程序运行</span><br><span class="line">只有这个程序运行结束</span><br><span class="line">并且输出完成之后</span><br><span class="line">才可以继续读入第二个程序</span><br><span class="line">也就说</span><br><span class="line">各个程序之间他们是串行着执行的</span><br><span class="line">所以</span><br><span class="line">虽然比起上一个阶段cpu利用率有所提升</span><br><span class="line">但是这种方式依然会使cpu有大量的时间是在空闲等待的状态</span><br><span class="line">资源利用率依然是很低的</span><br><span class="line">因此为了解决这个问题</span><br><span class="line">人们就发明了多道批处理系统</span><br></pre></td></tr></table></figure>

<h1 id="4-批处理阶段–多道批处理系统"><a href="#4-批处理阶段–多道批处理系统" class="headerlink" title="4.批处理阶段–多道批处理系统"></a>4.批处理阶段–多道批处理系统</h1><p><img src="https://files.catbox.moe/ftd5u9.png" alt="多道批处理系统"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在这个阶段</span><br><span class="line">操作系统就正式诞生了</span><br><span class="line">有了操作系统之后就可以支持多道程序并发运行了</span><br><span class="line">所以在多道批处理系统当中</span><br><span class="line">每次就可以往内存中读入多道程序</span><br><span class="line">然后让这些程序并发的运行</span><br><span class="line">那我们同时用甘特图的方式来看一下和上一个阶段的区别</span><br><span class="line">首先 第一个作业的数据会从磁带输入道计算机当中</span><br><span class="line">等输入结束了之后</span><br><span class="line">就可以开始对这个程序的计算工作</span><br><span class="line">但是当cpu在计算第一个作业的时候</span><br><span class="line">其实输入设备是处于空闲的状态的</span><br><span class="line">因此 cpu在计算第一个作业的时候</span><br><span class="line">其实可以让输入设备同时把第二个作业也读入内存</span><br><span class="line">紧接着 第一个作业计算完成</span><br><span class="line">他就可以使用输出设备把这个结果输出到磁带上</span><br><span class="line">而第一个作业在输出的时候</span><br><span class="line">其实只是输出设备在忙绿</span><br><span class="line">在这个时间段内</span><br><span class="line">cpu已经空闲了</span><br><span class="line">所以在这个时间段其实可以让cpu为第二个作业服务</span><br><span class="line">开始计算第二个作业</span><br><span class="line">那同样的</span><br><span class="line">这个时候</span><br><span class="line">其实输入设备又空闲了</span><br><span class="line">因此在这个时候又可以开始同时读入第三个作业</span><br><span class="line">那后面的过程就不再展开分析</span><br><span class="line">总之</span><br><span class="line">在引入了多道程序技术之后</span><br><span class="line">多道程序可以并发的执行</span><br><span class="line">共享计算机当中的资源</span><br><span class="line">当然</span><br><span class="line">计算机资源包括输入设备、输出设备还有</span><br><span class="line">cpu等等所以资源利用率就得到了大幅的提升</span><br><span class="line">那从这个甘特图也可以很直观的看到</span><br><span class="line">引入多道程序技术之后</span><br><span class="line">cpu是会有大量的时间处于忙碌的状态的</span><br><span class="line">也就是说cpu的利用率得到了更大的提升</span><br><span class="line">不过呢</span><br><span class="line">多道批处理系统其实它并不提供人机交互的功能</span><br><span class="line">当一个用户把自己的作业提交了之后</span><br><span class="line">接下来用户就只能干等着计算机把自己的作业处理完成</span><br><span class="line">也就是说</span><br><span class="line">在多道批处理系统当中</span><br><span class="line">用户是无法调试自己的程序的</span><br><span class="line">也不可能在程序运行的过程当中输入一些参数</span><br><span class="line">这些事情都是无法实现的</span><br><span class="line">所以为了实现人机交互的功能</span><br><span class="line">人们又发明了分时操作系统</span><br></pre></td></tr></table></figure>

<h1 id="5-分时操作系统"><a href="#5-分时操作系统" class="headerlink" title="5.分时操作系统"></a>5.分时操作系统</h1><p><img src="https://files.catbox.moe/scidpz.png" alt="分时操作系统"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在分时操作系统当中</span><br><span class="line">计算机会以时间片为单位轮流的为各个用户</span><br><span class="line">或者说各个作业服务</span><br><span class="line">而用户可以通过像键盘啊</span><br><span class="line">鼠标啊等等这一类的终端和计算机进行交互</span><br><span class="line">比如说这个计算机先给这个用户服务50ms</span><br><span class="line">再给这个用户服务50ms 再给另外其他的用户分别服务50ms</span><br><span class="line">总之</span><br><span class="line">再分时操作系统当中</span><br><span class="line">各个用户可以轮流的得到服务</span><br><span class="line">所以</span><br><span class="line">分时操作系统的主要优点就是用户的请求可以被及时的响应</span><br><span class="line">有没有发现之前举的老渣约会的例子</span><br><span class="line">其实他就是一个分时操作系统</span><br><span class="line">老渣以时间片为单位</span><br><span class="line">轮流的为各个用户来服务</span><br><span class="line">这样的话</span><br><span class="line">各个用户的请求就可以被及时的响应</span><br><span class="line">因为对于他们俩来说</span><br><span class="line">至少每隔一个小时肯定能够被老渣服务一次</span><br><span class="line">所以他们的请求最多再一个小时之内肯定可以被老渣响应</span><br><span class="line">所以这种分时操作系统使人机交互的问题得到了解决</span><br><span class="line">并且允许多个用户同时使用一台计算机</span><br><span class="line">他们对这个计算机的操作都是相互独立的</span><br><span class="line">他们还感受不到别人的存在</span><br><span class="line">在用户看来</span><br><span class="line">似乎就像是自己独占全机一样</span><br><span class="line">那分时操作系统也存在一个明显的缺点</span><br><span class="line">那就是它不能优先处理一些紧急的任务</span><br><span class="line">这种操作系统对各个用户都是完全公平的</span><br><span class="line">所以为了能够让计算机优先的处理一些紧急任务</span><br><span class="line">人们又提出了实时操作系统</span><br></pre></td></tr></table></figure>

<h1 id="6-实时操作系统"><a href="#6-实时操作系统" class="headerlink" title="6.实时操作系统"></a>6.实时操作系统</h1><p><img src="https://files.catbox.moe/hfzdql.png" alt="实时操作系统"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">实时操作系统能够根据任务的优先级来优先的响应一些紧急任务</span><br><span class="line">这种操作系统要求计算机在接收到一些紧急的信号之后</span><br><span class="line">需要进行及时的处理</span><br><span class="line">并且要在严格的时间时限内来处理 完成</span><br><span class="line">并且需要保证这个处理的结果是正确的</span><br><span class="line">因此 这种操作系统的主要特点是及时性和可靠性</span><br><span class="line">而实时操作系统又分为硬实时和软实时操作系统</span><br><span class="line">比如说像导弹控制系统</span><br><span class="line">自动驾驶系统</span><br><span class="line">这类的系统必须绝对严格的在规定时间内完成相应的处理</span><br><span class="line">否则会导致严重的问题 比如说导弹射偏了 或者自动驾驶的汽车</span><br><span class="line">开到了马路下面等等</span><br><span class="line">那另一种软实时操作系统就比如说我们熟悉的12306火车订票系统</span><br><span class="line">这个系统要求网站上</span><br><span class="line">可以需要实时的显示我们剩余的票到底还有多少</span><br><span class="line">但是即使偶尔这个更新不是很及时</span><br><span class="line">那其实也并不会产生特别严重的后果</span><br><span class="line">所以这种是软实时系统</span><br></pre></td></tr></table></figure>

<h1 id="7-其他几种操作系统"><a href="#7-其他几种操作系统" class="headerlink" title="7.其他几种操作系统"></a>7.其他几种操作系统</h1><p><img src="https://files.catbox.moe/592hkb.png" alt="其他几种操作系统"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">那除了刚才我们介绍的那些操作系统之外</span><br><span class="line">还有网络操作系统分布式操作系统和个人计算机操作系统</span><br></pre></td></tr></table></figure>

<h1 id="8-知识回顾和重要考点"><a href="#8-知识回顾和重要考点" class="headerlink" title="8.知识回顾和重要考点"></a>8.知识回顾和重要考点</h1><p><img src="https://files.catbox.moe/fsrqc9.png" alt="知识回顾和重要考点"></p>
]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>CLion c++配置</title>
    <url>/2021/09/01/CLion-Cmake%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="cmake环境配置"><a href="#cmake环境配置" class="headerlink" title="cmake环境配置"></a>cmake环境配置</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.17)</span><br><span class="line"></span><br><span class="line">get_filename_component(ProjectId $&#123;CMAKE_CURRENT_SOURCE_DIR&#125; NAME)</span><br><span class="line">string(REPLACE &quot; &quot; &quot;_&quot; ProjectId $&#123;ProjectId&#125;)</span><br><span class="line">project($&#123;ProjectId&#125; C)</span><br><span class="line"></span><br><span class="line">set(CMAKE_C_STANDARD 11)</span><br><span class="line"></span><br><span class="line">file(GLOB files &quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;&#x2F;*.c&quot;)</span><br><span class="line">foreach(file $&#123;files&#125;)</span><br><span class="line">    get_filename_component(name $&#123;file&#125; NAME)</span><br><span class="line">    add_executable($&#123;name&#125; $&#123;file&#125;)</span><br><span class="line">endforeach()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>数据结构和算法</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统的特征</title>
    <url>/2021/09/29/ch1.2-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%B9%E5%BE%81/</url>
    <content><![CDATA[<h1 id="1-操作系统的特征–并发"><a href="#1-操作系统的特征–并发" class="headerlink" title="1.操作系统的特征–并发"></a>1.操作系统的特征–并发</h1><p><img src="https://files.catbox.moe/rudbqh.png" alt="操作系统的特征"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">并发：指两个或多个事件在同一时间间隔内发生</span><br><span class="line">这些事件宏观上是同时发生的 微观上是交替发生的</span><br><span class="line">与并发容易混淆的概念是并行的概念</span><br><span class="line">并行：指两个或多个事件在同一时刻同时发生</span><br><span class="line">举个例子</span><br><span class="line">小渣和老渣都有两个女朋友</span><br><span class="line">有两个任务</span><br><span class="line">和一号约会</span><br><span class="line">和二号约会</span><br><span class="line">对于小渣来说</span><br><span class="line">采用并行约会的方式：</span><br><span class="line">同一时刻同时进行两个约会任务</span><br><span class="line">对于老渣来说</span><br><span class="line">采用并发约会的方式：</span><br><span class="line">在宏观上看</span><br><span class="line">这一天老渣在同时进行两个约会任务</span><br><span class="line">微观上看</span><br><span class="line">在某一时刻</span><br><span class="line">老渣最多正在进行一个约会任务</span><br><span class="line">这就是所谓的微观上交替发生</span><br><span class="line">宏观上并行发生</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/8d8jww.png" alt="并发"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这些程序宏观上看是同时运行的</span><br><span class="line">而微观上看是交替运行的</span><br><span class="line">并发性对操作系统来说是一个很重要的基本特性</span><br><span class="line">单核cpu同一时刻只能执行一个程序</span><br><span class="line">各个程序只能并发地执行</span><br><span class="line">对于多核cpu同一时刻可以同时执行多个程序</span><br><span class="line">多个程序可以并行的执行</span><br><span class="line">比如说Intel的第八代i3处理器就是4核cpu</span><br><span class="line">意味着可以并行的执行4个程序</span><br><span class="line">比如说在这个cpu中</span><br><span class="line">意味着可以并行的执行4个程序</span><br><span class="line">如果此时有第五个程序</span><br><span class="line">比如说有world google qq 微信 四个程序并行执行</span><br><span class="line">现在又启动了qq音乐</span><br><span class="line">那world和qq音乐交替着来使用cpu</span><br><span class="line">只要有超过四个以上的程序需要“同时运行”</span><br><span class="line">那么并发性依然是必不可少的</span><br><span class="line">因此并发性是操作系统的一个最基本的特征</span><br></pre></td></tr></table></figure>

<h1 id="2-操作系统的特征–共享"><a href="#2-操作系统的特征–共享" class="headerlink" title="2.操作系统的特征–共享"></a>2.操作系统的特征–共享</h1><p><img src="https://files.catbox.moe/vvll3g.png" alt="操作系统的特征 "></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">互斥共享指的是</span><br><span class="line">一个时间段内只允许一个进程访问该资源</span><br><span class="line">同时共享指的是</span><br><span class="line">允许一个时间段内由多个进程</span><br><span class="line">“同时”对它们进行访问</span><br><span class="line">这个地方所谓的“同时”</span><br><span class="line">为什么要打双引号呢</span><br><span class="line">所谓的“同时”往往是宏观上的</span><br><span class="line">而在微观上</span><br><span class="line">这些进程可能是交替地对该资源</span><br><span class="line">进行访问的（即分时共享）</span><br><span class="line">直接来看一个例子：</span><br><span class="line">对于互斥共享：</span><br><span class="line">比如说我们使用qq和微信</span><br><span class="line">视频聊天</span><br><span class="line">但是在同一时间段内</span><br><span class="line">只会允许摄像头分配给其中的一个进程使用</span><br><span class="line">比如你用qq和你的家人进行聊天</span><br><span class="line">这个时候</span><br><span class="line">你还想用电脑的微信</span><br><span class="line">和你的小伙伴</span><br><span class="line">进行视频聊天</span><br><span class="line">你就会发现</span><br><span class="line">视频是发不出去的</span><br><span class="line">这个时候会提示摄像头已经分配给其他的进程</span><br><span class="line">所以这就是所谓的互斥共享方式</span><br><span class="line">在一段时间内</span><br><span class="line">摄像头这个资源</span><br><span class="line">只能分配给一个进程使用</span><br><span class="line">再来看第二个例子：</span><br><span class="line">同时共享方式</span><br><span class="line">我们可能会遇到这样的情况</span><br><span class="line">我们用qq给某人发送文件a</span><br><span class="line">用微信发送文件b</span><br><span class="line">在宏观上看来</span><br><span class="line">微信和qq的文件发送的进度条都是一直在往前推进的</span><br><span class="line">所以用户在宏观上看来两边同时在读取发送文件</span><br><span class="line">这些文件他是被放在硬盘里的</span><br><span class="line">在用户看来</span><br><span class="line">看起来就像是qq和微信同时访问</span><br><span class="line">这个资源</span><br><span class="line">从中读取各自文件数据</span><br><span class="line">但事实上</span><br><span class="line">微观上来看</span><br><span class="line">这两个进程</span><br><span class="line">是交替的访问硬盘的</span><br><span class="line">qq先读取文件a的某一个部分</span><br><span class="line">微信再读取文件b的某一个部分</span><br><span class="line">接下来又交替着让qq读文件a的下一部分</span><br><span class="line">然后以此交替的访问硬盘</span><br><span class="line">所以这就是所谓的微观上交替访问这个硬盘资源</span><br></pre></td></tr></table></figure>

<h1 id="3-操作系统的特征–并发和共享的关系"><a href="#3-操作系统的特征–并发和共享的关系" class="headerlink" title="3.操作系统的特征–并发和共享的关系"></a>3.操作系统的特征–并发和共享的关系</h1><p><img src="https://files.catbox.moe/pzoa7e.png" alt="操作系统的特征"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用qq发送文件a，同时又用微信发送文件b</span><br><span class="line">1.qq和微信两个进程正在并发的执行（并发性）</span><br><span class="line">2.这两个进程同时需要完成发送文件的事情</span><br><span class="line">所以他们需要共享的访问硬盘资源（共享性）</span><br><span class="line">如果说我们的系统失去了并发性</span><br><span class="line">就说明在系统当中</span><br><span class="line">同一时间段</span><br><span class="line">只能有一个程序正在运行</span><br><span class="line">也就意味着</span><br><span class="line">这两个进程</span><br><span class="line">他们不需要</span><br><span class="line">同时共享访问硬盘资源</span><br><span class="line">而共享性失去存在的意义</span><br><span class="line">如果说这个系统失去了共享性</span><br><span class="line">qq和微信这两个进程</span><br><span class="line">没办法同时访问硬盘资源</span><br><span class="line">所以他们也没办法同时完成发送文件</span><br><span class="line">这件事情</span><br><span class="line">既然如此</span><br><span class="line">qq和微信也就没办法</span><br><span class="line">同时并发的执行</span><br><span class="line">如果失去了并发性</span><br><span class="line">则共享性就失去了意义</span><br><span class="line">如果失去了共享性</span><br><span class="line">并发就不可能实现</span><br></pre></td></tr></table></figure>

<h1 id="4-操作系统的特征–虚拟"><a href="#4-操作系统的特征–虚拟" class="headerlink" title="4.操作系统的特征–虚拟"></a>4.操作系统的特征–虚拟</h1><p><img src="https://files.catbox.moe/6vlzfg.png" alt="操作系统的特征--虚拟"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">虚拟我们来看一个实际的例子</span><br><span class="line">我们知道</span><br><span class="line">在一个程序需要执行的时候</span><br><span class="line">需要把它放入内存</span><br><span class="line">并且给他分配给cpu才能执行</span><br><span class="line">我的电脑其实只有4GB内存</span><br><span class="line">但是其实在我的电脑上</span><br><span class="line">可以同时打开迅雷、GTA、网易云音乐</span><br><span class="line">所以看起来这么多的应用软件</span><br><span class="line">总共需要的内存量远大于4GB的</span><br><span class="line">那为什么他们还能同时运行呢</span><br><span class="line">其实这就是虚拟存储器技术</span><br><span class="line">实际上这个电脑只有4GB的内存</span><br><span class="line">但是在用户看来</span><br><span class="line">他变成了逻辑上的对应物</span><br><span class="line">在用户看来他是远远大于4GB的</span><br><span class="line">这其实是虚拟技术中的“空分复用技术”</span><br><span class="line">虚拟存储器技术还有“空分复用技术”这在第三章是会重点讲解的</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/7xrjkb.png" alt="虚拟"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">再看下面一个例子</span><br><span class="line">在单核cpu中</span><br><span class="line">用户可以打开qq</span><br><span class="line">可以打开迅雷</span><br><span class="line">等等</span><br><span class="line">既然这个电脑只有一个单核的cpu</span><br><span class="line">这个计算机当中</span><br><span class="line">为什么还可以同时</span><br><span class="line">执行这么多的程序呢</span><br><span class="line">其实这是用的虚拟处理器的技术</span><br><span class="line">实际上只有一个单核cpu</span><br><span class="line">这是一个物理上的实体</span><br><span class="line">但是在用户看来</span><br><span class="line">在我看来</span><br><span class="line">这个计算机变成了6个cpu同时在为自己服务</span><br><span class="line">这就是所谓的逻辑上的实体</span><br><span class="line">虚拟处理器技术就是典型的“时分复用技术”</span><br><span class="line">在微观上看</span><br><span class="line">一整个大的时间段</span><br><span class="line">被分割为了一个一个微小的时间片</span><br><span class="line">然后在各个时间段内</span><br><span class="line">处理机是交替着为各个进程服务</span><br><span class="line">所以这就是时分的意思</span><br><span class="line">他把一个大的时间段</span><br><span class="line">分为一个各个很小的时间片</span><br><span class="line">所以这是时分复用技术</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/ug25ur.png" alt="虚拟"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我们刚才讲了</span><br><span class="line">实现虚拟性的</span><br><span class="line">虚拟技术</span><br><span class="line">分为空分复用技术</span><br><span class="line">和时分复用技术</span><br><span class="line">很显然</span><br><span class="line">如果说我们系统失去了并发性</span><br><span class="line">就意味着一个时间段只需有一个程序在执行</span><br><span class="line">从刚才我们分析的过程中可以看到</span><br><span class="line">如果没有了并发性</span><br><span class="line">时分复用技术和空分复用技术也没有存在的意义</span><br><span class="line">也就是虚拟性也就没必要实现了</span><br><span class="line">所以可以说</span><br><span class="line">没有并发性</span><br><span class="line">就谈不上虚拟性</span><br><span class="line">虚拟性就没有存在的意义</span><br></pre></td></tr></table></figure>

<h1 id="5-操作系统的特征–异步"><a href="#5-操作系统的特征–异步" class="headerlink" title="5.操作系统的特征–异步"></a>5.操作系统的特征–异步</h1><p><img src="https://files.catbox.moe/1k51nh.png" alt="异步"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">假设老渣要和两个女孩并发的约会</span><br><span class="line">一号女孩会让老渣干这样的两件事</span><br><span class="line">首先是陪他吃饭</span><br><span class="line">二是把心给她</span><br><span class="line">二号女孩会让老渣先把心给她</span><br><span class="line">再让老渣陪她吃饭</span><br><span class="line">老渣在执行1号女孩的指令的过程相当于在执行第一道程序</span><br><span class="line">而执行2号女孩的指令的过程相当于在执行第二道程序</span><br><span class="line">而这两道程序需要并发的执行</span><br><span class="line">另外老渣只有一颗真心</span><br><span class="line">老渣的心相当于有限的系统资源</span><br><span class="line">由于这两道程序在系统中是并发的运行</span><br><span class="line">这两道程序有可能会争抢着使用系统资源</span><br><span class="line">老渣在执行这两道程序有可能是这么约的</span><br><span class="line">比如说</span><br><span class="line">刚才是他是和1号约</span><br><span class="line">执行1号的第一条指令</span><br><span class="line">陪她吃饭</span><br><span class="line">接下来执行1号的第二条指令</span><br><span class="line">根据1号的要求</span><br><span class="line">老渣会把心给1号</span><br><span class="line">也就是说这个系统资源分配给了1号</span><br><span class="line">而接下来的时间段是要和二号约</span><br><span class="line">二号要求老渣把心给她</span><br><span class="line">但是老渣的心这个有限的系统资源</span><br><span class="line">已经给了1号</span><br><span class="line">并且1号没有把系统资源归还给老渣</span><br><span class="line">所以2号要求老渣把心给她</span><br><span class="line">这个请求就不能被满足</span><br><span class="line">所以第二道程序运行道10-11点的时候肯定会被阻塞</span><br><span class="line">需要先停一段时间</span><br><span class="line">等她获得了她想要的资源的之后</span><br><span class="line">第二道程序才能接着往下执行</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">另一种情况</span><br><span class="line">老渣还有可能是这么约的</span><br><span class="line">她刚开始可能和1号约</span><br><span class="line">然后陪1号吃饭</span><br><span class="line">接下来这个时间段是和2号约</span><br><span class="line">根据2号的指令</span><br><span class="line">她把心给了2号</span><br><span class="line">再接下来他又和一号约</span><br><span class="line">也就是说要执行一号的第二条指令</span><br><span class="line">1号让老渣把心给她</span><br><span class="line">但是由于此时</span><br><span class="line">有限的系统资源</span><br><span class="line">是被2号所占有的</span><br><span class="line">并且2号没有归还给系统</span><br><span class="line">因此</span><br><span class="line">1号这个把心给她的请求不能够被满足</span><br><span class="line">所以第一道程序在10点到11点就会被阻塞</span><br><span class="line">然后等待系统资源的分配</span><br><span class="line">所以在两道程序并发运行的过程中</span><br><span class="line">这些并发运行的程序会争抢着使用</span><br><span class="line">系统当中的资源</span><br><span class="line">所以这些程序的运行不是一贯到底</span><br><span class="line">而是走走停停</span><br><span class="line">以不可预知的速度向前推进</span><br><span class="line">有的时候有可能是2号停下来等待</span><br><span class="line">有的时候有可能是1号停下来等待</span><br><span class="line">在实际的操作系统当中</span><br><span class="line">各个并发运行的程序</span><br><span class="line">之间也会出现</span><br><span class="line">这种争抢着使用</span><br><span class="line">有限的系统资源</span><br><span class="line">的情况</span><br><span class="line">比如说两个程序争抢着使用</span><br><span class="line">摄像头资源</span><br><span class="line">或者争抢着使用打印机资源</span><br><span class="line">所以多道程序环境下</span><br><span class="line">多个程序并发执行</span><br><span class="line">所带来的一个特性</span><br><span class="line">就是所谓的异步性</span><br><span class="line">很显然</span><br><span class="line">如果失去了并发性</span><br><span class="line">系统就只能串行的执行各个程序</span><br><span class="line">也就是一号程序执行完了</span><br><span class="line">也就是1号程序把老渣的心归还给老渣的时候</span><br><span class="line">他才会接着执行第二道程序</span><br><span class="line">这个时候</span><br><span class="line">各个程序的执行肯定是会一贯到底的</span><br><span class="line">并不会走走停停</span><br><span class="line">所以只有系统拥有并发性</span><br><span class="line">才有可能导致我们之前所说的异步性</span><br></pre></td></tr></table></figure>

<h1 id="6-知识回顾"><a href="#6-知识回顾" class="headerlink" title="6.知识回顾"></a>6.知识回顾</h1><p><img src="https://files.catbox.moe/zixc10.png" alt="知识回顾"></p>
]]></content>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>ch1.3-性能指标</title>
    <url>/2021/08/07/ch1.3-%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/</url>
    <content><![CDATA[<h5 id="1-性能指标之速率、带宽、吞吐量"><a href="#1-性能指标之速率、带宽、吞吐量" class="headerlink" title="1.性能指标之速率、带宽、吞吐量"></a>1.性能指标之速率、带宽、吞吐量</h5><h6 id="1-1速率"><a href="#1-1速率" class="headerlink" title="1.1速率"></a>1.1速率</h6><img src="https://files.catbox.moe/qj3ttn.png" alt="速率" style="zoom:30%;" />

<h6 id="1-2带宽"><a href="#1-2带宽" class="headerlink" title="1.2带宽"></a>1.2带宽</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(1)&quot;带宽&quot;原本指某个信号具有的频带宽度，</span><br><span class="line">即最高频率与最低频率之差，单位是赫兹(Hz)</span><br><span class="line">在过去的很长一段时间内，</span><br><span class="line">我们这个通信的主干线路传送的都是模拟信号，</span><br><span class="line">而不是像现在这样的0101的数字信号,</span><br><span class="line">所以 </span><br><span class="line">表示通信线路允许通过信号的频带范围</span><br><span class="line">就叫做线路的带宽</span><br><span class="line">(2)计算机网络中,</span><br><span class="line">&quot;带宽&quot;用来表示网络的通信线路穿送数据的能力，</span><br><span class="line">通常是指单位时间内从网络中的某一点到另一点所能通过的&quot;最高数据率&quot;。</span><br><span class="line">单位是&quot;比特每秒&quot;,b&#x2F;s,kb&#x2F;s,Mb&#x2F;s,Gb&#x2F;s。</span><br><span class="line">(网络设备所支持的最高速率),如下图</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/oe7r97.png" alt="带宽"></p>
<h6 id="1-3吞吐量"><a href="#1-3吞吐量" class="headerlink" title="1.3吞吐量"></a>1.3吞吐量</h6><p><img src="https://files.catbox.moe/of8pe6.png" alt="吞吐量"></p>
<h5 id="2-性能指标之时延、时延带宽积、往返时间RTT、利用率"><a href="#2-性能指标之时延、时延带宽积、往返时间RTT、利用率" class="headerlink" title="2.性能指标之时延、时延带宽积、往返时间RTT、利用率"></a>2.性能指标之时延、时延带宽积、往返时间RTT、利用率</h5><h6 id="2-1时延"><a href="#2-1时延" class="headerlink" title="2.1时延"></a>2.1时延</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.发送时延:A把这些数据推送到信道上面的时间就是一秒</span><br><span class="line">2.传播时延:(我们的信号会经过一定的调制手法把这个信道以这个电磁波为载体，</span><br><span class="line">进行传输,</span><br><span class="line">所以可以这样理解，</span><br><span class="line">电磁波就是一种就像是一个工人，</span><br><span class="line">然后这个电磁波，</span><br><span class="line">它就可以背着这些比特流往前跑，</span><br><span class="line">所以比特流在信道上面传输的速率展示或者说显示的效果，</span><br><span class="line">就是我这个电磁波在上面传播的速率)</span><br><span class="line">假设电磁波在这个信道上面的传播速率是10m&#x2F;s,</span><br><span class="line">先不考虑路由器,</span><br><span class="line">就只看A和B之间进行一个数据通信,</span><br><span class="line">假如说A和B之间的距离是100米,</span><br><span class="line">那它们之间这个电磁波在信道上的传播速率是10m&#x2F;s，</span><br><span class="line">那我们计算A这些数据这个七点位置一直发送到B全部接收完毕，</span><br><span class="line">这样一端时间就应该用100米除以10m&#x2F;s，</span><br><span class="line">也就是10s，</span><br><span class="line">也就是说通过10s，</span><br><span class="line">我们这些比特流这十个数据，</span><br><span class="line">十位的数据才可以从A的这样一端一直发送到B，</span><br><span class="line">这样一段时间才是我们的传播时延。</span><br><span class="line">3.排队时延:它是等待输出或者是输入链路可用，</span><br><span class="line">所需要的等待时间就叫做排队时延。</span><br><span class="line">举个栗子:我们可以看到现在的10个比特，</span><br><span class="line">已经到了路由器的一边了，</span><br><span class="line">但是路由器它现在挺忙的，</span><br><span class="line">所以就要让他们几个先等待，</span><br><span class="line">那他们等待，</span><br><span class="line">其实是在这个缓存路由器的每一个口，</span><br><span class="line">这块都有一个缓存空间，</span><br><span class="line">它们会在这里面先待一会，</span><br><span class="line">呆的时间，</span><br><span class="line">其实就可以叫做排队时间。</span><br><span class="line">4.处理时延:等到它了，</span><br><span class="line">它就可以开始进行一些转发的工作了，</span><br><span class="line">那这个转发其实也需要一定的时间，</span><br><span class="line">因为路由器需要看你这个东西它是要发到哪，</span><br><span class="line">然后一并检查我们这样的一个序列有没有出错，</span><br><span class="line">所以，</span><br><span class="line">检错和找出口，</span><br><span class="line">这也需要一端的时间，</span><br><span class="line">就需要我们这个处理时延。</span><br><span class="line">(其实路由器这，</span><br><span class="line">主要发生的就是排队时延以及处理时延，</span><br><span class="line">为了更好的理解排队时延和处理时延)</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/cj7v0y.png" alt="时延"></p>
<h6 id="2-2时延带宽积"><a href="#2-2时延带宽积" class="headerlink" title="2.2时延带宽积"></a>2.2时延带宽积</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">时延带宽积:它是一个描述数据量或者说是信息量的一个性能属性。</span><br><span class="line">首先 </span><br><span class="line">我们知道带宽指的是发送速率 </span><br><span class="line">对吧就是在A这一端一直发送速率,一直发送速率，</span><br><span class="line">传播时延，就可以这样理解，这有一个比特，</span><br><span class="line">它已经到信道上面，不过是在这个A的边上，</span><br><span class="line">在这个信道的左边，</span><br><span class="line">经过一个传播时延，它就刚好传输到B的位置。</span><br><span class="line">所以这是一个传播时延对一个比特做的事。</span><br><span class="line">也就是一个比特经过一个传播时延，</span><br><span class="line">刚好就走过了这样一条信道，拿着是第一个比特，</span><br><span class="line">第一个比特在这个路上往前走的时候，</span><br><span class="line">其他比特照样从A当中往信道上面跳，</span><br><span class="line">那一直蹦一直蹦，第一个比特碰到B位置，</span><br><span class="line">好，发送停止，</span><br><span class="line">那我们就看这个时延带宽积，</span><br><span class="line">就是现在管道里面所有的比特。</span><br><span class="line">(时延带宽积又称为以比特为单位的链路长度)</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/zg2p07.png" alt="时延带宽积"></p>
<h6 id="2-3往返时延RTT"><a href="#2-3往返时延RTT" class="headerlink" title="2.3往返时延RTT"></a>2.3往返时延RTT</h6><p><img src="https://files.catbox.moe/14x4er.png" alt="往返时延"></p>
<h6 id="2-4利用率"><a href="#2-4利用率" class="headerlink" title="2.4利用率"></a>2.4利用率</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数据越多信道越堵</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/c5trgb.png" alt="利用率"></p>
<h5 id="3-脑图时刻"><a href="#3-脑图时刻" class="headerlink" title="3.脑图时刻"></a>3.脑图时刻</h5><p><img src="https://files.catbox.moe/jwic30.png" alt="脑图时刻"></p>
]]></content>
      <categories>
        <category>计网</category>
      </categories>
      <tags>
        <tag>计网</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统的运行机制</title>
    <url>/2021/09/26/ch1.3.1-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="1-预备知识：程序是如何运行的"><a href="#1-预备知识：程序是如何运行的" class="headerlink" title="1.预备知识：程序是如何运行的"></a>1.预备知识：程序是如何运行的</h1><p><img src="https://files.catbox.moe/zsi05o.png" alt="机器指令"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">像我们平时</span><br><span class="line">写的c语言程序</span><br><span class="line">都会经过编译器</span><br><span class="line">进行一个编译的工作</span><br><span class="line">翻译成计算机可以听的懂的</span><br><span class="line">二进制代码</span><br><span class="line">像我们平常所使用的c语言代码</span><br><span class="line">经过编译 翻译之后</span><br><span class="line">可能会对应很多条机器指令</span><br><span class="line">比如说我们定义了一个 int x &#x3D; 1;</span><br><span class="line">并且对x++;</span><br><span class="line">这样两条简短的代码</span><br><span class="line">形成的机器指令</span><br><span class="line">可能对应这么多条二进制数</span><br><span class="line">其实我们这段程序运行的过程</span><br><span class="line">就是CPU一条一条的执行的过程</span><br><span class="line">我们提到的机器指令</span><br><span class="line">就是处理器（cpu）能识别、执行的最基本的指令</span><br><span class="line">很多人习惯把Linux、Windows、MacOS的小黑框中使用的命令</span><br><span class="line">也称为“指令”，其实这是“交互式命令接口”</span><br><span class="line">注意与本节的“指令”区别开</span><br><span class="line">本节中的“指令”指二进制机器指令</span><br><span class="line">这就是程序运行的基本原理</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="2-内核程序v-s-应用程序"><a href="#2-内核程序v-s-应用程序" class="headerlink" title="2.内核程序v.s.应用程序"></a>2.内核程序v.s.应用程序</h1><p><img src="https://files.catbox.moe/096j99.png" alt="内核"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在操作系统这门课当中</span><br><span class="line">一种叫内核程序</span><br><span class="line">一种叫应用程序</span><br><span class="line">所谓的应用程序</span><br><span class="line">还有一些人</span><br><span class="line">比如说微软、苹果有一帮人负责实现操作系统</span><br><span class="line">他们写的是“内核程序”</span><br><span class="line">这帮人编写了很多很多“内核程序”</span><br><span class="line">这些内核程序组成了“操作系统”内核</span><br><span class="line">英文叫“内核（Kernel）”</span><br><span class="line">内核是操作系统最重要最核心的部分</span><br><span class="line">也是最接近硬件的部分</span><br><span class="line">我们之前提到过</span><br><span class="line">操作系统</span><br><span class="line">最重要的角色</span><br><span class="line">内核是操作系统最核心的部分</span><br><span class="line">也是最接近硬件的部分</span><br><span class="line">甚至可以说</span><br><span class="line">一个操作系统只要有内核就可以了</span><br><span class="line">Docker容器里</span><br><span class="line">仅需要有Linux内核</span><br><span class="line">其实就可以实现Linux所有功能了</span><br><span class="line">我们平时所使用的操作系统</span><br><span class="line">他包含的不止是图形化的功能</span><br><span class="line">如图形化用户界面GUI</span><br><span class="line">即使没有图形化的用户界面</span><br><span class="line">我们依然可以用命令行</span><br><span class="line">使用小黑框的方式来使用操作系统</span><br><span class="line">所以</span><br><span class="line">操作系统的内核当中</span><br><span class="line">所包含的只是操作系统中</span><br><span class="line">最重要最核心最必不可少的那一部分</span><br></pre></td></tr></table></figure>

<h1 id="3-特权指令vs非特权指令"><a href="#3-特权指令vs非特权指令" class="headerlink" title="3.特权指令vs非特权指令"></a>3.特权指令vs非特权指令</h1><p><img src="https://files.catbox.moe/4rem5j.png" alt="特权指令vs非特权指令"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">操作系统的内核他是系统内核的管理者</span><br><span class="line">作为管理者这样一个角色</span><br><span class="line">有些时候会让CPU执行一些特殊的指令</span><br><span class="line">比如内存清零的指令</span><br><span class="line">这种指令会对其他程序的运行</span><br><span class="line">造成很严重的影响</span><br><span class="line">像这样的特权指令</span><br><span class="line">可能影响其他程序的正常运行的</span><br><span class="line">这样的特权指令</span><br><span class="line">就应该只允许“管理者”</span><br><span class="line">即操作系统内核来使用</span><br><span class="line">假如这一段程序是内核程序的话</span><br><span class="line">这些指令当中</span><br><span class="line">可以出现特权指令</span><br><span class="line">假如这段指令是应用程序的话</span><br><span class="line">这其中就不应该包含特权指令</span><br><span class="line">而只能使用非特权指令</span><br><span class="line">如加法指令、减法指令等</span><br><span class="line">我们的cpu在设计和生产的时候</span><br><span class="line">就划分了哪些指令是特权指令</span><br><span class="line">哪些指令是非特权指令</span><br><span class="line">cpu在拿到一个指令的时候</span><br><span class="line">其实就可以区分出到底是特权指令</span><br><span class="line">还是非特权指令</span><br><span class="line">问题就出现了</span><br><span class="line">cpu在执行程序的过程中</span><br><span class="line">其实就是cpu执行一条一条的机器指令的过程</span><br><span class="line">虽然他能够分辨出哪些指令是特权指令</span><br><span class="line">哪些指令是非特权指令</span><br><span class="line">但是他又怎么分辨出</span><br><span class="line">此时正在执行的指令</span><br><span class="line">他到底是应用程序的指令</span><br><span class="line">还是内核程序的指令</span><br></pre></td></tr></table></figure>

<h1 id="4-内核态vs用户态"><a href="#4-内核态vs用户态" class="headerlink" title="4.内核态vs用户态"></a>4.内核态vs用户态</h1><p><img src="https://files.catbox.moe/sc0ktb.png" alt="内核态、用户态"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">为了让CPU进行区分</span><br><span class="line">CPU有两种状态：一种是“内核态”和“用户态”</span><br><span class="line">当CPU处于内核态时，说明此时正在运行的是内核程序，此时可以执行特权指令</span><br><span class="line">当CPU处于用户态的时候，说明此时正在运行的是应用程序，此时只能执行非特权指令</span><br><span class="line">怎么让cpu区分处于哪种状态呢？</span><br><span class="line">cpu会有一个寄存器</span><br><span class="line">叫程序状态寄存器</span><br><span class="line">英文名字叫PSW</span><br><span class="line">这个寄存器当中</span><br><span class="line">会有一个二进制位</span><br><span class="line">二进制位为1的时候表示“内核态”</span><br><span class="line">二进制位为0的时候表示“用户态”</span><br><span class="line">用户态和内核态他们还有各自的别名</span><br><span class="line">用户态可以叫做目态</span><br><span class="line">内核态可以叫做管态</span><br><span class="line">接下来要探讨的问题是</span><br><span class="line">如何实现CPU状态的切换</span><br></pre></td></tr></table></figure>

<h1 id="5-内核态、用户态的切换"><a href="#5-内核态、用户态的切换" class="headerlink" title="5.内核态、用户态的切换"></a>5.内核态、用户态的切换</h1><p><img src="https://files.catbox.moe/ofkx3y.png" alt="内核态、用户态的切换"></p>
<p><img src="https://files.catbox.moe/uo7kng.png" alt="内核态、用户态的切换"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">首先，当我们开机的时候</span><br><span class="line">需要加载我们的操作系统</span><br><span class="line">然后操作系统就需要进行一些初始化的工作</span><br><span class="line">系统的初始化工作</span><br><span class="line">就是由操作系统当中的某一些内核程序来完成的</span><br><span class="line">所以在开机的过程中</span><br><span class="line">需要执行内核程序</span><br><span class="line">因此这个时候</span><br><span class="line">cpu处于内核态</span><br><span class="line">他需要执行系统初始化相关的操作</span><br><span class="line">当我们开机完成之后</span><br><span class="line">用户可以启动某个应用程序</span><br><span class="line">这个应用程序需要正常运行的话</span><br><span class="line">肯定要让cpu执行他的一系列的指令</span><br><span class="line">但是我们刚才不是说</span><br><span class="line">cpu此时执行的是一系列的内核程序</span><br><span class="line">而如果说要让他运行应用程序的话</span><br><span class="line">怎么实现这个事情呢</span><br><span class="line">此时操作系统的内核</span><br><span class="line">想让应用程序开始运行的话</span><br><span class="line">这个内核程序</span><br><span class="line">需要执行一条特权指令</span><br><span class="line">这个特权指令会把psw的标志位</span><br><span class="line">从内核态转换为用户态</span><br><span class="line">这个过程完成了cpu状态的切换</span><br><span class="line">接下来</span><br><span class="line">操作系统内核就会让出cpu的使用权</span><br><span class="line">让应用程序上cpu运行</span><br><span class="line">此时cpu已经切换为用户态了</span><br><span class="line">接下来应用程序</span><br><span class="line">会在用户态运行</span><br><span class="line">假如有一个猥琐的黑客在应用程序中植入了一条特权指令的话</span><br><span class="line">会发生什么事呢</span><br><span class="line">首先</span><br><span class="line">cpu在读入这条指令的时候</span><br><span class="line">其实已经能够判断这条指令</span><br><span class="line">是一条特权指令但是检查了一下psw寄存器</span><br><span class="line">自己又是处于用户态的</span><br><span class="line">cpu知道此时正在运行的是应用程序</span><br><span class="line">而不是内核程序</span><br><span class="line">而一个应用程序他妈的想要用特权指令</span><br><span class="line">这样的事情坚决不能让他干</span><br><span class="line">这样的一个非法事件</span><br><span class="line">会引起一个中断信号</span><br><span class="line">当cpu检测到中断信号后</span><br><span class="line">会立即变态</span><br><span class="line">立即变为“核心态”</span><br><span class="line">并且cpu会拒绝执行这条特权指令</span><br><span class="line">接下来cpu会暂停执行应用程序后面的这一系列指令代码</span><br><span class="line">转而会执行一个处理中断信号的内核程序</span><br><span class="line">接下来CPU会在内核态下 </span><br><span class="line">执行处理中断信号的内核程序的指令</span><br><span class="line">发生了中断信号之后</span><br><span class="line">让操作系统内核再次夺回CPU的控制权</span><br><span class="line">接下来操作系统的内核程序</span><br><span class="line">会对中断进行相应的处理</span><br><span class="line">处理完之后</span><br><span class="line">它才会把cpu使用权重新还给应用程序</span><br><span class="line">所以在这个故事当中</span><br><span class="line">我们可以很形象的看出</span><br><span class="line">cpu从内核态切换到用户态</span><br><span class="line">执行一条修改psw的标志位的一个特权指令来完成的</span><br><span class="line">执行了这个特权指令之后</span><br><span class="line">就意味着</span><br><span class="line">操作系统内核要主动让出cpu使用权</span><br><span class="line">而cpu的状态</span><br><span class="line">由用户态切换为内核态</span><br><span class="line">是由“中断”引发的</span><br><span class="line">由cpu的硬件自动完成变态过程</span><br><span class="line">并且cpu变为内核态之后</span><br><span class="line">他会停止运行当前正在运行应用程序</span><br><span class="line">转而运行一个内核程序</span><br><span class="line">其实触发了一个中断信号</span><br><span class="line">就意味着操作系统将重新强行夺回cpu的使用权</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/krz3gq.png" alt="内核程序"></p>
<p><img src="https://files.catbox.moe/x3ffi6.png" alt="用户态、内核态"></p>
<h1 id="6-知识回顾"><a href="#6-知识回顾" class="headerlink" title="6.知识回顾"></a>6.知识回顾</h1><p><img src="https://files.catbox.moe/23djw7.png" alt="知识回顾"></p>
]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>中断和异常</title>
    <url>/2021/09/29/ch1.3.2-%E4%B8%AD%E6%96%AD%E5%92%8C%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<h1 id="1-中断的作用"><a href="#1-中断的作用" class="headerlink" title="1.中断的作用"></a>1.中断的作用</h1><p><img src="https://files.catbox.moe/wjgqfj.png" alt="中断的作用"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cpu上面会运行两种程序</span><br><span class="line">一种是操作系统内核程序</span><br><span class="line">一种是应用程序</span><br><span class="line">内核程序是整个系统的管理者</span><br><span class="line">那我们的计算机在刚起步的时候</span><br><span class="line">在上边跑的时候</span><br><span class="line">肯定是先启动的内核程序</span><br><span class="line">只不过，在实际合适的时候</span><br><span class="line">内核程序会把cpu的使用权主动让给应用程序（进程管理相关内容）</span><br><span class="line">除非发生了中断，而一旦发生中断，就会让cpu立即停止此时正在执行的应用程序</span><br><span class="line">转而执行相应的内核程序</span><br><span class="line">所以“中断”是让操作系统内核夺回cpu使用权发的唯一途径</span><br><span class="line">“中断”会使cpu由用户态变为内核态</span><br><span class="line">如果没有“中断”机制，那么一旦应用程序上cpu运行，cpu就会一直运行这个程序</span><br><span class="line">如果cpu一直运行同一个应用程序</span><br><span class="line">我们又怎么可能实现多道程序并发这个事情呢</span><br><span class="line">如果没有“中断”技术，就没有多道程序并发</span><br><span class="line">甚至可以说没有中断技术，就没有操作系统</span><br><span class="line">所以操作系统内核，是整个系统的管理者</span><br><span class="line">当他想要把cpu使用权让给应用程序的时候</span><br><span class="line">那么他会自愿的执行一条特权指令完成这个事情</span><br><span class="line">当他想要把cpu使用权重新夺回来的时候</span><br><span class="line">他也可以通过中断的方式来实现</span><br></pre></td></tr></table></figure>

<h1 id="2-中断的类型"><a href="#2-中断的类型" class="headerlink" title="2.中断的类型"></a>2.中断的类型</h1><p><img src="https://files.catbox.moe/ocz611.png" alt="中断的类型"></p>
<h2 id="2-1内中断的例子"><a href="#2-1内中断的例子" class="headerlink" title="2.1内中断的例子"></a>2.1内中断的例子</h2><p><img src="https://files.catbox.moe/aaj282.png" alt="内中断的例子"></p>
<p><img src="https://files.catbox.moe/qvigy5.png" alt="内中断的例子"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一个应用程序本来运行在用户态</span><br><span class="line">cpu会依次处理它的指令</span><br><span class="line">假如说有一个猥琐的黑客</span><br><span class="line">在这个cpu当中</span><br><span class="line">尝试植入一条特权指令</span><br><span class="line">cpu此时处于用户态</span><br><span class="line">此时正运行的是应用程序</span><br><span class="line">于是这个非法的事件</span><br><span class="line">会触发一个中断信号</span><br><span class="line">cpu会拒绝这条特权指令</span><br><span class="line">接下来cpu会自动的转换成内核态</span><br><span class="line">并且会开始执行处理中断信号相关的内核程序</span><br><span class="line">于是在发生了这样非法的事情之后</span><br><span class="line">系统的管理者会重新夺回</span><br><span class="line">cpu的控制权</span><br><span class="line">所以这就是很典型的内中断的例子</span><br><span class="line">cpu在执行当前的指令的时候</span><br><span class="line">由这条指令引发的一个中断</span><br><span class="line">有时候cpu执行的是非特权指令</span><br><span class="line">也有可能引发内中断</span><br><span class="line">比如说cpu在执行除法指令的时候</span><br><span class="line">发现除数为0</span><br><span class="line">这种情况下</span><br><span class="line">肯定不能让程序继续执行下去</span><br><span class="line">所以这种情况</span><br><span class="line">也会引发内中断</span><br><span class="line">总之当前执行的指令是非法的</span><br><span class="line">指令的参数是非法的</span><br><span class="line">这个时候会产生一个内中断的信号</span><br><span class="line">接下来再看另一个内中断的例子</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/83lca0.png" alt="内中断的例子"></p>
<p><img src="https://files.catbox.moe/svd6s9.png" alt="内中断"></p>
<p><img src="https://files.catbox.moe/vwgdnm.png" alt="内中断的例子"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一个应用程序运行在用户态</span><br><span class="line">有时候应用程序想请求操作系统内核的服务</span><br><span class="line">在这种情况</span><br><span class="line">应用程序会执行一条特殊的指令叫做陷入指令</span><br><span class="line">这个指令会引发一个内部中断信号</span><br><span class="line">接下来这个cpu会转向相应的内核程序</span><br><span class="line">进行中断信号的处理</span><br><span class="line">cpu状态由用户态转换成内核态</span><br><span class="line">当一个应用程序</span><br><span class="line">执行陷入指令的时候</span><br><span class="line">就意味着主动的把cpu使用权</span><br><span class="line">还给操作系统内核</span><br><span class="line">想让操作系统内核</span><br><span class="line">为他提供某些服务</span><br><span class="line">那我们之前提到过的“系统调用”</span><br><span class="line">就是通过陷入指令来完成的</span><br><span class="line">需要强调的是</span><br><span class="line">陷入指令是一个特殊的指令</span><br><span class="line">但他并不是特权指令</span><br><span class="line">因为这个应用程序是运行在用户态的</span><br><span class="line">但是他不是特权指令</span><br><span class="line">因为这个应用程序他是运行在用户态的</span><br><span class="line">在用户态中这个应用程序可以执行陷入指令</span><br><span class="line">那这个陷入指令肯定也不是特权指令了</span><br></pre></td></tr></table></figure>

<h2 id="2-2外中断的例子"><a href="#2-2外中断的例子" class="headerlink" title="2.2外中断的例子"></a>2.2外中断的例子</h2><p><img src="https://files.catbox.moe/pv09fi.png" alt="外中断的例子"></p>
<p><img src="https://files.catbox.moe/axznm8.png" alt="外中断的例子"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例子1:时钟中断 --由时钟部件发来的中断信号</span><br><span class="line">通过时钟中断信号 就可以实现多个程序并发执行了</span><br><span class="line">假设此时系统当中想要并发的运行两个应用程序</span><br><span class="line">应用程序1运行在用户态</span><br><span class="line">cpu会执行这些指令</span><br><span class="line">当他执行两条应用程序1的指令的时候</span><br><span class="line">时钟部件发现已经过了50ms了</span><br><span class="line">他会给cpu发送一个中断信号</span><br><span class="line">这个中断信号和当前执行的指令是没有关系的</span><br><span class="line">他来自于cpu的外部</span><br><span class="line">当cpu检测到中断信号的时候</span><br><span class="line">它会先暂停此时正在运行的应用程序</span><br><span class="line">转而运行一个相应的内核程序</span><br><span class="line">来处理这个中断信号</span><br><span class="line">并且转为内核态</span><br><span class="line">在内核态下</span><br><span class="line">cpu开始执行内核程序</span><br><span class="line">来处理刚才收到的内核程序</span><br><span class="line">然后发现</span><br><span class="line">应用程序1刚才用了50ms的时间了</span><br><span class="line">接下来为了公平起见</span><br><span class="line">我想要第二个应用程序上cpu运行</span><br><span class="line">于是接下来这个内核程序</span><br><span class="line">会把cpu的使用权</span><br><span class="line">给第二个应用程序</span><br><span class="line">接下来又切换回用户态</span><br><span class="line">第二个应用程序开始上cpu运行</span><br><span class="line">cpu执行了第二个应用程序的指令之后</span><br><span class="line">又过了50ms</span><br><span class="line">此时这个时钟部件</span><br><span class="line">又会给cpu发送一个来自于外部的</span><br><span class="line">中断信号</span><br><span class="line">同样 cpu会执行与中断信号相关的内核程序</span><br><span class="line">所以接下来又会执行内核程序</span><br><span class="line">接下来操作系统内核发现程序2已经用了50ms</span><br><span class="line">接下来公平起见</span><br><span class="line">我又想让程序1上去接着运行</span><br><span class="line">于是他会把cpu的使用权让给应用程序1</span><br><span class="line">然后应用程序1又可以接着往下往下执行</span><br><span class="line">它之后的那一系列的指令了</span><br><span class="line">因此我们可以很清晰的看到</span><br><span class="line">两个应用程序</span><br><span class="line">是如何在中断机制的支持下</span><br><span class="line">实现并发运行的</span><br><span class="line">一直不断的相互切换</span><br><span class="line">所以可以看到中断</span><br><span class="line">在现代计算机当中到底有多大的作用</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/o0cozl.png" alt="中断信号"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">除了时钟故障发送中断信号之外</span><br><span class="line">有时候还会有来自I&#x2F;O设备发出的中断信号</span><br><span class="line">比如说某个应用程序会请求打印机的打印服务</span><br><span class="line">打印机在打印输出完成之后</span><br><span class="line">会像cpu发送中断信号</span><br><span class="line">用来通知cpu我的任务已经完成了</span><br><span class="line">接下来cpu会用中断信号</span><br><span class="line">相对应的处理io的内核程序</span><br><span class="line">来对中断信号进行处理</span><br><span class="line">总之</span><br><span class="line">我们提到的这两种中断信号</span><br><span class="line">都来自于cpu的外部</span><br><span class="line">和当前执行的指令是没有关系的</span><br><span class="line">cpu在每一条指令执行结束的时候</span><br><span class="line">都会例行检查是否有外中断信号</span><br><span class="line">需要我来处理</span><br></pre></td></tr></table></figure>

<h1 id="3-中断的分类"><a href="#3-中断的分类" class="headerlink" title="3.中断的分类"></a>3.中断的分类</h1><p><img src="https://files.catbox.moe/biyzit.png" alt="中断的分类"></p>
<h1 id="4-中断机制的基本原理"><a href="#4-中断机制的基本原理" class="headerlink" title="4.中断机制的基本原理"></a>4.中断机制的基本原理</h1><p><img src="https://files.catbox.moe/c478t5.png" alt="中断机制的基本原理"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这么多中断的类型</span><br><span class="line">不可能用同一个程序来处理</span><br><span class="line">所以cpu会根据中断信号的不同</span><br><span class="line">来找到中断信号相对应的中断处理程序</span><br><span class="line">当cpu在检测到中断信号后</span><br><span class="line">会根据中断信号的类型去查询“中断向量表”</span><br><span class="line">通过“中断向量表”</span><br><span class="line">找到各种类型的中断</span><br><span class="line">所对应的中断处理程序</span><br><span class="line">我们刚才所举的那么多例子</span><br><span class="line">中断处理程序一定是内核程序</span><br><span class="line">肯定是需要运行在“内核态”</span><br><span class="line">这就是一个中断机制基本的实现原理</span><br><span class="line">具体的硬件上该怎么实现</span><br><span class="line">这是计算机组成原理这门课要交大家的</span><br></pre></td></tr></table></figure>

<h1 id="5-中断和异常"><a href="#5-中断和异常" class="headerlink" title="5.中断和异常"></a>5.中断和异常</h1><p><img src="https://files.catbox.moe/hbb7wp.png" alt="中断和异常"></p>
]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>系统调用</title>
    <url>/2021/10/09/ch1.3.3-%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<h1 id="1-什么是系统调用，有什么作用"><a href="#1-什么是系统调用，有什么作用" class="headerlink" title="1.什么是系统调用，有什么作用"></a>1.什么是系统调用，有什么作用</h1><p><img src="https://files.catbox.moe/j44lt2.png" alt="什么是系统调用"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">操作系统它作为用户和计算机之间的接口</span><br><span class="line">它需要向上提供一些简单的应用的服务</span><br><span class="line">那么给用户使用的就是命令接口GUI</span><br><span class="line">而程序接口又由一堆系统调用组成</span><br><span class="line">其实系统调用就是应用程序程序员来请求操作内核服务的一个途径</span><br><span class="line">他和我们平时编程的时候使用的函数调用其实是很类似的</span><br><span class="line">但是呢 系统调用又和普通的库函数的调用又有一定的区别</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/d8vl7j.png" alt="系统调用的方法"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">系统调用应该是比高级语言的库函数更为底层的一个接口</span><br><span class="line">我们的逻辑之上是操作系统 操作系统向上层提供的接口是系统调用</span><br><span class="line">是上面的这些库函数 应用程序能够通过系统调用的方式来请求操作系统的内核服务</span><br><span class="line">然后在操作系统之上各种各样的高级编程语言</span><br><span class="line">会用库函数的方式来封装这些系统调用</span><br><span class="line">然后向更上层的这些应用程序的程序员</span><br><span class="line">来暴露一些更好用的编程接口</span><br><span class="line">不过呢 </span><br><span class="line">并不是所有的库函数在底层都会使用系统调用</span><br><span class="line">很多库函数比如说像C语言里的math.h里边就会提供很多绝对值啊</span><br><span class="line">之类的数学运算相关的库函数</span><br><span class="line">这些库函数的功能不需要特权指令也可以完成</span><br><span class="line">所以像这一类的库函数</span><br><span class="line">它在底层也并不需要使用系统调用</span><br><span class="line">但是又有的库函数</span><br><span class="line">比如说创建一个新文件</span><br><span class="line">这个事情必须请求操作系统</span><br><span class="line">内核的服务才可以完成</span><br><span class="line">所以</span><br><span class="line">对于创建新文件的这样的库函数来说</span><br><span class="line">它在底层就肯定需要使用操作系统提供的系统调用服务</span><br><span class="line">所以这是系统调用和库函数的一个区别</span><br><span class="line">接下来我们用一个小例子来感受一下为什么系统调用是必须的</span><br></pre></td></tr></table></figure>

<h1 id="2-为什么系统调用是必须的？"><a href="#2-为什么系统调用是必须的？" class="headerlink" title="2.为什么系统调用是必须的？"></a>2.为什么系统调用是必须的？</h1><p><img src="https://files.catbox.moe/cuogy8.png" alt="为什么系统调用是必须的"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">你去学校的打印店去打印论文</span><br><span class="line">然后用wps这个程序点下了打印按钮</span><br><span class="line">之后 打印机就会开始工作</span><br><span class="line">但是当你的论文打印到一半的时候</span><br><span class="line">另一个同学用word也按下了打印按钮</span><br><span class="line">请求打印他自己的论文</span><br><span class="line">那么我们知道wps和word在这个电脑里</span><br><span class="line">这个系统当中其实是两个</span><br><span class="line">正在并发运行的进程</span><br><span class="line">所以如果两个进程能够随意的并发的来共享打印机资源的话</span><br><span class="line">就会发生这样的情况</span><br><span class="line">由于两个进程交替的、并发的向打印机提出打印命令</span><br><span class="line">那么打印机 设备就会交替的收到这两个进程发来的这个打印请求</span><br><span class="line">那这样的话</span><br><span class="line">打印机就会把这两篇论文的内容混杂在一起打印</span><br><span class="line">先打印一行这个 再打印一行那个</span><br><span class="line">这显然我们我们想要得到的结果</span><br><span class="line">所以 由于系统当中有各种各样的并发的进程</span><br><span class="line">而这些并发的进程又需要的共享的使用类似于打印机的共享资源</span><br><span class="line">但是 这样的共享资源其实是需要各个进程互斥的共享的</span><br><span class="line">怎么实现对共享资源的互斥访问呢？</span><br><span class="line">最好的方式就是让操作系统内核</span><br><span class="line">也就是这个系统的管理者来对共享资源进行统一的管理</span><br><span class="line">然后</span><br><span class="line">上层的那些应用程序</span><br><span class="line">只能通过系统调用的方式来请求操作系统给他分配这种资源</span><br><span class="line">之后 这个进程才可以对这种共享资源进行使用和访问</span><br><span class="line">而各个进程的请求会由操作系统内核来协调处理</span><br><span class="line">保证他们并发运行的时候</span><br><span class="line">不会发生这种奇奇怪怪的事情</span><br><span class="line">因此 从这个例子当中</span><br><span class="line">我们就可以看到</span><br><span class="line">系统调用的功能是必须存在的</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/hwzf5g.png" alt="io设备"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">凡是和共享资源有关的操作</span><br><span class="line">比如说像对内存的这种分配与回收内存是一种共享资源</span><br><span class="line">IO设备也是一种共享资源</span><br><span class="line">文件也是一种共享资源</span><br><span class="line">总之 只要是对共享资源的访问</span><br><span class="line">那肯定是需要通过系统调用来进行</span><br><span class="line">因为这些共享资源是有限的</span><br><span class="line">所以操作系统会对这些共享资源进行统一的管理和分配</span><br><span class="line">因此 应用程序在使用这些资源的时候</span><br><span class="line">就必须通过系统调用的方式请求操作系统内核来帮他进行接下来的处理</span><br><span class="line">这样的话  我们就可以保证系统的稳定性和安全性</span><br><span class="line">防止非法操作</span><br><span class="line">相信通过之前打印机的例子</span><br><span class="line">大家能够比较直观的体会</span><br></pre></td></tr></table></figure>

<h1 id="3-系统调用的过程"><a href="#3-系统调用的过程" class="headerlink" title="3.系统调用的过程"></a>3.系统调用的过程</h1><p><img src="https://files.catbox.moe/jvfrem.png" alt="系统调用的过程"></p>
<p><img src="https://files.catbox.moe/e5tqgn.png" alt="系统调用的过程"></p>
<p><img src="https://files.catbox.moe/1htzku.png" alt="用户态"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">假设一个应用程序</span><br><span class="line">想要进行系统调用</span><br><span class="line">它在背后需要做一些什么事情呢</span><br><span class="line">一个应用程序</span><br><span class="line">它运行在用户态</span><br><span class="line">然后这个应用程序的各个指令会被cpu依次执行</span><br><span class="line">当他想要发出系统调用的时候</span><br><span class="line">他需要用传参数的指令</span><br><span class="line">给cpu的寄存器当中传递一些必要的参数</span><br><span class="line">比如说在某一个寄存器当中放入了一个参数一</span><br><span class="line">这个参数一是指明了我此次要进行哪种类型的系统调用</span><br><span class="line">比如说像Linux里面的fork系统调用</span><br><span class="line">那传递参数的指令可能会有多条</span><br><span class="line">主要要看我们的这个系统调用 需要传递几个参数</span><br><span class="line">操作系统会根据应用程序提供的这些参数来判断</span><br><span class="line">他想要的到底是哪种类型的服务</span><br><span class="line">那当这些参数都放到了寄存器当中之后</span><br><span class="line">应用程序就会执行一条特殊的指令叫做陷入指令</span><br><span class="line">这个陷入指令的执行会引发一个内中断</span><br><span class="line">那cpu在检测到这个内部中断信号之后</span><br><span class="line">他发现这个内部中断信号是由trap指令引起的</span><br><span class="line">于是这个cpu接下来就会暂停运行这个应用程序</span><br><span class="line">转而去执行处理陷入指令的那个处理程序</span><br><span class="line">那这个程序就是系统调用入口程序</span><br><span class="line">显然 接下来要执行的这个应用程序肯定属于</span><br><span class="line">内核程序 因此它需要在内核态下运行 我们也说这个程序</span><br><span class="line">这个程序也可以说是某一种中断处理程序</span><br><span class="line">只不过它处理的是由陷入指令引发的那个内中断</span><br><span class="line">那接下来这个系统调用入口程序会检查寄存器里的这些参数</span><br><span class="line">通过第一个参数 他会知道</span><br><span class="line">此时 这个应用程序他想要的是这种类型的系统调用服务</span><br><span class="line">于是接下来 这个入口程序就会调用与特定的系统调用类型</span><br><span class="line">所对应的处理程序</span><br><span class="line">然后让这个程序在上cpu运行</span><br><span class="line">那这个系统调用处理程序在执行的时候</span><br><span class="line">就可以根据应用程序传递的其他的参数</span><br><span class="line">来看一下他所需要的</span><br><span class="line">具体是哪些服务</span><br><span class="line">那当这个系统调用被处理完了之后</span><br><span class="line">cpu又会转回到用户态</span><br><span class="line">然后接着执行之前的这个应用程序</span><br><span class="line">那通过刚才的这个过程</span><br><span class="line">相信大家对系统调用背后的过程应该有了比较直观的体会</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/rm1zef.png" alt="陷入指令"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我们普通的程序员</span><br><span class="line">可以用高级的编程语言来写我们自己的代码</span><br><span class="line">然后在我们的代码中</span><br><span class="line">可以调用这个高级编程语言提供的一些库函数</span><br><span class="line">但是有的库函数内部</span><br><span class="line">其实是使用到了操作系统提供的系统调用的</span><br><span class="line">具体来说</span><br><span class="line">一个系统调用的过程是需要先传递系统调用所需要的参数</span><br><span class="line">接下来 要执行一条很特殊的指令</span><br><span class="line">叫做陷入指令</span><br><span class="line">执行了陷入指令之后</span><br><span class="line">就意味着</span><br><span class="line">这个应用程序把CPU的控制权</span><br><span class="line">主动的交还给了操作系统的内核</span><br><span class="line">用这样的方式来请求操作系统内核的服务</span><br><span class="line">所以 陷入指令之后 就会产生一个内中断</span><br><span class="line">然后 cpu会转向执行一个处理程序调用的内核程序</span><br><span class="line">而这个内核程序显然是需要运行在核心态</span><br><span class="line">当这个系统调用处理完了之后</span><br><span class="line">他又会返回原先的这个应用程序</span><br><span class="line">让应用程序接着往下执行</span><br><span class="line">那我们需要执行一些可能会作为考点的小细节</span><br><span class="line">第一 这个陷入指令 	它其实是在用户态下执行的</span><br><span class="line">他是一个很特殊的指令 但是他并不是特权指令</span><br><span class="line">他是一个非特权指令</span><br><span class="line">在执行了这个指令之后 会主动的引发一个内中断</span><br><span class="line">让cpu进入内核态 运行内核程序</span><br><span class="line">第二点需要注意的是</span><br><span class="line">我们发出系统调用请求</span><br><span class="line">这个动作是在用户态下进行的</span><br><span class="line">但是对系统调用的相应处理是在核心态下完成的</span><br><span class="line">另外我们还需注意</span><br><span class="line">陷入指令</span><br><span class="line">另外两种名称</span><br><span class="line">他又可以成为trap指令</span><br><span class="line">访问指令在不同教材种可能使用的这个术语不一样</span><br><span class="line">但是要知道 他们指的其实都是同一个东西</span><br></pre></td></tr></table></figure>

<h1 id="4-知识回顾和重要考点"><a href="#4-知识回顾和重要考点" class="headerlink" title="4.知识回顾和重要考点"></a>4.知识回顾和重要考点</h1><p><img src="https://files.catbox.moe/cqxapf.png" alt="知识回顾和重要考点"></p>
]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统的体系结构</title>
    <url>/2021/10/10/ch1.3.4-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%86%85%E6%A0%B8/</url>
    <content><![CDATA[<h1 id="1-操作系统的内核"><a href="#1-操作系统的内核" class="headerlink" title="1.操作系统的内核"></a>1.操作系统的内核</h1><p><img src="https://files.catbox.moe/cz6unt.png" alt="操作系统的内核"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">操作系统的内核还可以进一步划分，一部分是内核的功能</span><br><span class="line">一部分是非内核的功能</span><br><span class="line">操作系统的最核心的那些功能需要放到操作系统的内核当中</span><br><span class="line">比如说 时钟管理 中断处理 还有原语</span><br><span class="line">还有之后我们要学习的进程管理</span><br><span class="line">存储器管理</span><br><span class="line">设备管理等等</span><br><span class="line">这些功能都是要放到操作系统内核当中的</span><br><span class="line">那这儿提到的时钟管理其实就是用我们之前提到过的</span><br><span class="line">时钟中断来实现了计算机计时的功能</span><br><span class="line">想要实现程序并发</span><br><span class="line">就必然离不开时钟管理这个很重要的内核功能</span><br><span class="line">那中断处理呢就不再多解释了</span><br><span class="line">之前已经举过很多例子了</span><br><span class="line">另外呢</span><br><span class="line">还有一种特殊的程序叫原语</span><br><span class="line">原语这种程序</span><br><span class="line">它具有原子性</span><br><span class="line">所谓的原子性</span><br><span class="line">就是说这种程序</span><br><span class="line">要么就一气呵成的全部运行完成</span><br><span class="line">要么就是不运行</span><br><span class="line">它的执行过程是不可被中断的</span><br><span class="line">也就是说</span><br><span class="line">在执行原语的这一小段程序的过程当中</span><br><span class="line">即使有外部中断信号过来了</span><br><span class="line">那cpu也会继续把原语执行完成</span><br><span class="line">才去处理那个外部中断信号</span><br><span class="line">总之 我们这儿列举了最下面这一层的这三个东西</span><br><span class="line">适合硬件结合最为紧密的</span><br><span class="line">所以他们必须放在操作系统的内核当中</span><br><span class="line">其实像ubuntu还有centos等等这些我们耳熟能详的Linux操作系统</span><br><span class="line">这些系统的开发团队 他们主要干的事情其实是在实现非内核功能</span><br><span class="line">而这些操作系统的内核使用的就是linux的内核</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/dixlni.png" alt="操作系统的内核"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">内核是操作系统最基本、最核心的地方</span><br><span class="line">实现操作系统内核功能的那些程序就是内核程序</span><br><span class="line">那刚才我们提到的最底层的这三个部分是与硬件关联最紧密的模块</span><br><span class="line">这些功能是必须放在内核当中的</span><br><span class="line">还有一些管理相关的功能像进程管理、存储器管理</span><br><span class="line">对于这些功能的管理更多的是对数据结构的一个操作</span><br><span class="line">而不会直接涉及到硬件</span><br><span class="line">所以有的操作系统</span><br><span class="line">并不把这些管理功能放在内核当中</span><br><span class="line">而只在内核当中保留与硬件接触最紧密的部分</span><br><span class="line">因此这就引出了两种截然不同的内核设计方法</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/bf8he2.png" alt="内核"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">把所有的这些功能都包含在操作系统内核当中的这种结构就叫做大内核</span><br><span class="line">而如果内核当中只保留与硬件关系最紧密的这些部分</span><br><span class="line">那么这种内核就叫做微内核</span><br><span class="line">如果采用微内核的这种结构的话</span><br><span class="line">那么属于内核的这些功能是需要运行在内核态的</span><br><span class="line">而不属于内核上面的这些功能就需要运行在用户态</span><br><span class="line">这会对我们系统的性能造成一定的影响</span><br><span class="line">那我们用更直观的例子来体会这一点</span><br></pre></td></tr></table></figure>

<h1 id="2-操作系统的体系结构"><a href="#2-操作系统的体系结构" class="headerlink" title="2.操作系统的体系结构"></a>2.操作系统的体系结构</h1><p><img src="https://files.catbox.moe/w9u4ju.png" alt="操作系统的体系结构"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">假设现在有两种体系结构的系统</span><br><span class="line">第一个系统</span><br><span class="line">它采用的是大内核的体系结构</span><br><span class="line">那么由于进程管理</span><br><span class="line">存储管理等等</span><br><span class="line">都是被划分在内核当中的</span><br><span class="line">所以这些功能的处理都需要运行在内核态</span><br><span class="line">而只有应用程序是运行在用户态的</span><br><span class="line">而对于采用微内核结构的操作系统来说</span><br><span class="line">只有和硬件联系最紧密的 这些功能被划分在了内核当中</span><br><span class="line">只有这些功能是需要在内核态下才可以执行的</span><br><span class="line">而其他的这些功能模块在用户态下就可以运行</span><br><span class="line">那现在来看这样的一个故事</span><br><span class="line">假设现在这个应用程序想要请求操作系统的服务</span><br><span class="line">并且 这个服务的背后需要同时涉及到进程管理</span><br><span class="line">存储管理 设备管理这几个功能</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果采用的是大内核的体系结构的话</span><br><span class="line">那么应用程序向操作系统提出服务的请求</span><br><span class="line">用户态会转换为核心态</span><br><span class="line">然后开始运行这一系列的内核程序</span><br><span class="line">而如果采用的是微内核的体系结构的话</span><br><span class="line">应用程序向操作系统提出服务的请求</span><br><span class="line">接下来操作系统的这几个模块都需要为应用程序服务</span><br><span class="line">而进程管理这个模块</span><br><span class="line">在处理应用程序的请求的时候</span><br><span class="line">他同样也需要得到内核的支持</span><br><span class="line">所以 这个模块对内核的访问就涉及到了cpu从用户态转到内核态</span><br><span class="line">服务完成了之后 又会从内核态再转回用户态</span><br><span class="line">然后 同样的存储管理和设备管理这两个模块</span><br><span class="line">他们也在完成相应的工作的时候</span><br><span class="line">同样也需要得到内核的支持</span><br><span class="line">因此 每一个模块 都需要请求内核的服务</span><br><span class="line">那每一次请求内核的服务都会涉及到一个cpu状态转换的过程</span><br><span class="line">因此 如果我们采用的是大内核的体系结构的话</span><br><span class="line">那么应用程序的这个请求只需要两次变态就可以了</span><br><span class="line">而如果采用的是微内核的体系结构的话</span><br><span class="line">那么整个过程的处理就需要有六次变态</span><br><span class="line">这需要注意的是</span><br><span class="line">这个cpu的状态转换</span><br><span class="line">这个过程其实是有成本的</span><br><span class="line">需要消耗不少的时间</span><br><span class="line">因此频繁的切换cpu的状态</span><br><span class="line">是会降低系统性能的</span><br></pre></td></tr></table></figure>

<h1 id="3-知识回顾和重要考点"><a href="#3-知识回顾和重要考点" class="headerlink" title="3.知识回顾和重要考点"></a>3.知识回顾和重要考点</h1><p><img src="https://files.catbox.moe/t69i2q.png" alt="知识回顾和重要考点"></p>
]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>ch1.4-分层结构</title>
    <url>/2021/08/08/ch1.4-%E5%88%86%E5%B1%82%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h5 id="1-为什么要分层"><a href="#1-为什么要分层" class="headerlink" title="1.为什么要分层"></a>1.为什么要分层</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">发送文件前要完成的工作:</span><br><span class="line">(1)发起通信的计算机必须将数据通信的通路进行激活</span><br><span class="line">所谓激活 就是要发出一些命令保证我这个要传送的数据</span><br><span class="line">这个文档能够在这条通路上面正确的发送</span><br><span class="line">以及正确的接收</span><br><span class="line">也就是先把这条路清一下</span><br><span class="line">确定好这条路是可以通过的</span><br><span class="line">(2)要告诉网络如何识别目的主机</span><br><span class="line">(3)发起通信的计算机要查明目的主机是否开机，</span><br><span class="line">并且与网络连接正常</span><br><span class="line">(4)发起通信的计算机要弄清楚，</span><br><span class="line">对方计算机中文件管理程序是否已经做好准备工作</span><br><span class="line">这里面的准备工作主要分为两种</span><br><span class="line">一种就是你的这台主机是否已经做好接收文件的准备了</span><br><span class="line">是否同意</span><br><span class="line">是否有这样一个同意接受的准备</span><br><span class="line">第二个</span><br><span class="line">就是我是否有空间</span><br><span class="line">是否有空间来存储这个要来接收的文件</span><br><span class="line">(5)就是确保差错和意外可以解决</span><br><span class="line">这么多文件堆在一块</span><br><span class="line">当然很难解决</span><br><span class="line">所以</span><br><span class="line">计算机网络</span><br><span class="line">它就想到要把这个大问题分成一系列的小问题</span><br><span class="line">所以要分层</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/epydwj.png" alt="为什么要分层"></p>
<h5 id="2-怎么分层"><a href="#2-怎么分层" class="headerlink" title="2.怎么分层"></a>2.怎么分层</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">分层的基本原则</span><br><span class="line">1.各层之间互相(独立)，每层是一种相对独立的功能</span><br><span class="line">2.每层之间界面自然清晰，易于理解，相互交流尽可能减少</span><br><span class="line">3.结构上上课分隔开，每层都采用(最合适的技术)来实现</span><br><span class="line">4.保持(下层)对(上层)的独立性，上层单向使用下层提供的服务</span><br><span class="line">5.整个分层结构应该能促进标准化工作</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/os5srg.png" alt="怎么分层"></p>
<h5 id="3-正式认识分层结构"><a href="#3-正式认识分层结构" class="headerlink" title="3.正式认识分层结构"></a>3.正式认识分层结构</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.实体: 第n层中的活动元素称为(n层实体)。同一层的</span><br><span class="line">实体叫(对等实体)。</span><br><span class="line">2.协议:为进行网络中的(对等实体)数据交换而建立的规则、标准或约定称为网络协议(水平)</span><br><span class="line">协议有三大要素:</span><br><span class="line">  2.1.语法:规定传输数据的格式</span><br><span class="line">  2.2.语义:规定所要完成的功能</span><br><span class="line">2.3.同步:规定各种操作的顺序</span><br><span class="line">3.接口(访问服务点SAP):上层使用下层服务的入口</span><br><span class="line">4.服务:下层为相邻上层提供的功能调用。(垂直)</span><br><span class="line">SDU服务数据单元:为完成用户所要求的功能而应传送的数据</span><br><span class="line">PCI协议控制信息:控制协议操作的信息</span><br><span class="line">PDU协议数据单元:对等层次之间传送的数据单位</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/gh8f5d.png" alt="分层结构"></p>
<h5 id="4-概念总结"><a href="#4-概念总结" class="headerlink" title="4.概念总结"></a>4.概念总结</h5><p><img src="https://files.catbox.moe/8hkodx.png" alt="概念总结"></p>
<h5 id="脑图时刻"><a href="#脑图时刻" class="headerlink" title="脑图时刻"></a>脑图时刻</h5><p><img src="https://files.catbox.moe/lt860n.png" alt="脑图时刻"></p>
]]></content>
      <categories>
        <category>计网</category>
      </categories>
      <tags>
        <tag>计网</tag>
      </tags>
  </entry>
  <entry>
    <title>ch1.5-OSI参考模型</title>
    <url>/2021/08/08/ch1.5-OSI%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h5 id="计算机网络分层结构"><a href="#计算机网络分层结构" class="headerlink" title="计算机网络分层结构"></a>计算机网络分层结构</h5><p><img src="https://files.catbox.moe/olwaxl.png" alt="计算机网络分层结构"></p>
<h5 id="1-OSI参考模型介绍"><a href="#1-OSI参考模型介绍" class="headerlink" title="1.OSI参考模型介绍"></a>1.OSI参考模型介绍</h5><h6 id="1-1ISO-OSI参考模型–怎么来的？"><a href="#1-1ISO-OSI参考模型–怎么来的？" class="headerlink" title="1.1ISO/OSI参考模型–怎么来的？"></a>1.1ISO/OSI参考模型–怎么来的？</h6><p><img src="https://files.catbox.moe/17jhlm.png" alt="ISO/OSI参考模型"></p>
<h6 id="2-2ISO-OSI参考模型"><a href="#2-2ISO-OSI参考模型" class="headerlink" title="2.2ISO/OSI参考模型"></a>2.2ISO/OSI参考模型</h6><p><img src="https://files.catbox.moe/4cjivj.png" alt="ISO/OSI参考模型"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我们通过通信过程的实例</span><br><span class="line">来研究一下OSI参考模型</span><br><span class="line">它的每一层都实现了哪些功能</span><br><span class="line">比方说我们有两个主机A和主机B</span><br><span class="line">他们两个要进行通信</span><br><span class="line">就想在qq上面进行聊天</span><br><span class="line">那如果是要进行联网上的通信的话</span><br><span class="line">就一定要</span><br><span class="line">有一些中间系统来介入</span><br><span class="line">比如说我们常见的路由器</span><br><span class="line">还有呢</span><br><span class="line">网桥交换机</span><br><span class="line">在之后都可以学到</span><br><span class="line">都叫做</span><br><span class="line">中间系统</span><br><span class="line">我们两个主机之间进行通信</span><br><span class="line">或者说是联通</span><br><span class="line">那这两台主机如果要实现通信</span><br><span class="line">要经过很多很多的步骤</span><br><span class="line">也就是我们OSI七层的参考模型</span><br><span class="line">每一层他们都应该用得到</span><br><span class="line">虽然表面上看来通信很简单</span><br><span class="line">单其实水特别深</span><br><span class="line">那A和B两台主机</span><br><span class="line">他们两个</span><br><span class="line">作为通信的两端</span><br><span class="line">两个端系统都需要经过这样七层的考验</span><br><span class="line">而中间系统呢</span><br><span class="line">比如说路由器</span><br><span class="line">它只需要经过三层</span><br><span class="line">那像交换机</span><br><span class="line">首先呢</span><br><span class="line">物理层</span><br><span class="line">有传输介质</span><br><span class="line">可以是光纤</span><br><span class="line">电缆都可以</span><br><span class="line">因为两个东西</span><br><span class="line">这种东西想起来是非常抽象的</span><br><span class="line">他抽象就一定要最终形象到一种传输介质上</span><br><span class="line">才能使我们信息传输过去</span><br><span class="line">不然我们空想是到不了那的</span><br><span class="line">一定要是固态的</span><br><span class="line">或者是无线的</span><br><span class="line">都可以一样的传输介质</span><br><span class="line">每个层次</span><br><span class="line">对等层次</span><br><span class="line">他们也可以说是对等</span><br><span class="line">实体之间都会有协议</span><br><span class="line">比如说应用层</span><br><span class="line">两个主机间的应用层之间就会有协议</span><br><span class="line">来规定</span><br><span class="line">两台主机应用层都应该实现相同的功能</span><br><span class="line">假如说</span><br><span class="line">主机A有数据要传送到B</span><br><span class="line">比如说他要问B</span><br><span class="line">你吃了吗</span><br><span class="line">要发这样一条消息</span><br><span class="line">首先的消息就要经过应用层</span><br><span class="line">经过应用层给他揉一下</span><br><span class="line">贴上一些信息</span><br><span class="line">再经过表示层</span><br><span class="line">表示层再往上贴点信息</span><br><span class="line">会话层呢</span><br><span class="line">再往上贴点信息</span><br><span class="line">传输层</span><br><span class="line">再往上贴点信息</span><br><span class="line">那我们知道现在你吃了吗</span><br><span class="line">这句话已经变得非常庞大了</span><br><span class="line">它上面有很多很多附加的信息</span><br><span class="line">继续到网络层再贴点</span><br><span class="line">数据层再贴点</span><br><span class="line">再到物理层</span><br><span class="line">其实他是傻瓜层</span><br><span class="line">他是不会对于数据进行太多的处理</span><br><span class="line">他只是把这些数据形成0101</span><br><span class="line">比特流的方式</span><br><span class="line">传送到传输介质上面</span><br><span class="line">进行传送</span><br><span class="line">那我们接下来</span><br><span class="line">就应该传输到中间系统了</span><br><span class="line">因为我们需要经过</span><br><span class="line">中间系统才能够到达主机B</span><br><span class="line">那接下来</span><br><span class="line">他相当于对我们刚才这些数据</span><br><span class="line">对比特流进行还原</span><br><span class="line">到数据链路层还原一下</span><br><span class="line">在网络层再还原一下</span><br><span class="line">那他还原的过程呢</span><br><span class="line">其实看一下</span><br><span class="line">之前对我们数据都做了哪些操作</span><br><span class="line">那我接下来要把数据往哪里送</span><br><span class="line">在对于整个的比特流进行还原的过程</span><br><span class="line">所要进行的</span><br><span class="line">那还原之后呢</span><br><span class="line">继续往上面贴信息</span><br><span class="line">贴信息</span><br><span class="line">贴信息</span><br><span class="line">再放到物理层上面</span><br><span class="line">以比特流的形式在传输界上面进行传输</span><br><span class="line">接下来呢</span><br><span class="line">就到了主机B</span><br><span class="line">那先遇到的是主机B的物理层</span><br><span class="line">继续往上</span><br><span class="line">物理层还原</span><br><span class="line">还原成数据</span><br><span class="line">应用层的数据继续往上还原</span><br><span class="line">还原成网络层的数据</span><br><span class="line">再向上还原</span><br><span class="line">还原成网络层的数据</span><br><span class="line">一步一步</span><br><span class="line">最后还原到应用层</span><br><span class="line">最后呢就把应用层的数据还原成原始的数据</span><br><span class="line">也就是</span><br><span class="line">你吃了吗</span><br><span class="line">这句话传给B主机</span><br><span class="line">这就是在通信过程当中OSI参考模型所做的一些事情</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">上面的四层 我们发现它和下面三层</span><br><span class="line">有点不太一样</span><br><span class="line">不一样呢</span><br><span class="line">大家都应该能观察出来</span><br><span class="line">也就是说中间系统</span><br><span class="line">它是不会有上面四层的</span><br><span class="line">上面四层的功能是中间系统用不到的</span><br><span class="line">所以说我们上面四层</span><br><span class="line">可以就看成主机A和主机B相对应的层次</span><br><span class="line">他们就相当于直接就连在了一起</span><br><span class="line">就好像我给你写一封信</span><br><span class="line">虽然这封信要经过邮局</span><br><span class="line">还有一些快递</span><br><span class="line">经过他们的一些处理和传输才能到达你那</span><br><span class="line">但是在我看来好像信就直接是送给你了一样</span><br><span class="line">由主机A传到了主机B也直接形成了端与端</span><br><span class="line">之间的联通</span><br><span class="line">他们四层实现的是端到端的通信</span><br><span class="line">那我们再来看下面的三层</span><br><span class="line">下面三层</span><br><span class="line">就需要进入到中间系统了</span><br><span class="line">比如说我们主机A的下一步</span><br><span class="line">它应该是要传给中间系统</span><br><span class="line">如果中间系统比较多</span><br><span class="line">路由器比较多的话</span><br><span class="line">那中间系统还会传给下个中间系统</span><br><span class="line">然后才会到我们主机B</span><br><span class="line">所以说每一次的通信或者说每一次对于</span><br><span class="line">数据的传播过程是点到点的</span><br><span class="line">他只是管我下一块</span><br><span class="line">我下一步要走到哪里</span><br><span class="line">而他不会去管我最后的重点最后这样的</span><br><span class="line">端系统是谁</span><br><span class="line">上面的四层</span><br><span class="line">是端到端的通信</span><br><span class="line">而下面的三层</span><br><span class="line">其实是点到点的方式</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/gdrp3a.png" alt="通信过程"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">刚才我们说我们应用层</span><br><span class="line">首先要对应一条消息</span><br><span class="line">或者是A要发送给B的数据进行一个包装</span><br><span class="line">或者说给他进行了贴上去了东西</span><br><span class="line">那东西呢</span><br><span class="line">其实叫做头部</span><br><span class="line">手部都可以</span><br><span class="line">它是控制信息</span><br><span class="line">控制信息可以是</span><br><span class="line">检查差错的东西</span><br><span class="line">信息来检查我数据有没有发生错误</span><br><span class="line">那还有可能是控制信息</span><br><span class="line">他是做下一步的地址是哪里</span><br><span class="line">这也可能是控制信息的内容</span><br><span class="line">比如说</span><br><span class="line">我要规定某条数据</span><br><span class="line">比如说很多数据都在一块了</span><br><span class="line">我可以让数据先传一点</span><br><span class="line">或者先对数据进行处理</span><br><span class="line">都是控制信息</span><br><span class="line">它可以加上去的内容</span><br><span class="line">它每一层都可以加上控制信息</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我们在每一层</span><br><span class="line">都可以加上控制信息</span><br><span class="line">那我们可以看到应用层首先对数据加了头部</span><br><span class="line">H7代表加的第七层的头部</span><br><span class="line">数据加上应用层的首部控制信息之后呢</span><br><span class="line">就形成了第七层的PDU</span><br><span class="line">就是协议数据单元</span><br><span class="line">第六层PDU往下传</span><br><span class="line">传到会话层再加上会话层的首部H5</span><br><span class="line">就形成了第五层的PDU</span><br><span class="line">........</span><br><span class="line">注意(数据链路层不仅要加首部还要加个尾部,记忆方法:数据链路层5个字，其他层3个字)</span><br><span class="line">最后呢，物理层</span><br><span class="line">我们刚才说他是傻瓜层</span><br><span class="line">他对于我们拿上来的数据</span><br><span class="line">就不会再去做其他额外的处理了</span><br><span class="line">他只是把它形成0101比特流序列的方式</span><br><span class="line">放到我们下面的传输介质</span><br><span class="line">如下图</span><br><span class="line">很类似我们生活当中的打包和拆包的过程</span><br><span class="line">比如说我们要发送包裹</span><br><span class="line">那对于包裹</span><br><span class="line">肯定要进行一步又一步的打包</span><br><span class="line">一层一层的往上加</span><br><span class="line">最后包装好了之后</span><br><span class="line">通过快递公司传过去了</span><br><span class="line">把所有的包装</span><br><span class="line">所有的附加信息全都拆开</span><br><span class="line">最后拆出来的数据</span><br><span class="line">我自己就可以收下来了</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/30ezb9.png" alt="ISO/OSI参考模型"></p>
<h5 id="2-OSI参考模型各层的功能以及各层对应的重要协议"><a href="#2-OSI参考模型各层的功能以及各层对应的重要协议" class="headerlink" title="2.OSI参考模型各层的功能以及各层对应的重要协议"></a>2.OSI参考模型各层的功能以及各层对应的重要协议</h5><h6 id="2-1应用层"><a href="#2-1应用层" class="headerlink" title="2.1应用层"></a>2.1应用层</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">它是用户与网络的界面</span><br><span class="line">看到这个词&quot;应用&quot;</span><br><span class="line">我们就应该想到这个层次应该是面向用户的</span><br><span class="line">应用层就是所有能和用户交互并且产生网络流量的程序</span><br><span class="line">什么叫做能够产生网络流量呢</span><br><span class="line">就只要说是你连上网了</span><br><span class="line">才可以使用的程序就是属于应用层的范畴</span><br><span class="line">但是如果你不用联网也可以使用</span><br><span class="line">比如说记事本啊</span><br><span class="line">这样不需要联网的程序</span><br><span class="line">它就不算应用层的范围</span><br><span class="line">比如说QQ或者说是一些可以发送电子邮件</span><br><span class="line">的一些邮箱</span><br><span class="line">比较常见的典型的一些应用层的服务呢</span><br><span class="line">有一个(文件传输)</span><br><span class="line">它主要的协议是(ftp)</span><br><span class="line">电子邮件呢</span><br><span class="line">他也是应用层的典型服务</span><br><span class="line">使用的协议主要是(SMTP)</span><br><span class="line">还有万维网</span><br><span class="line">万维网其实就是我们常说的www</span><br><span class="line">用的协议就是http</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/2qpd90.png" alt="应用层"></p>
<h6 id="2-2表示层"><a href="#2-2表示层" class="headerlink" title="2.2表示层"></a>2.2表示层</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">它是应用层紧邻的一个层次</span><br><span class="line">根据字面意思呢</span><br><span class="line">就是最后呈现在我们的设备或者是屏幕上面</span><br><span class="line">是都有哪些东西</span><br><span class="line">表示层主要是用于处理在两个通信系统中交换信息的表示方式(语法和语义)</span><br><span class="line">两个通信系统呢</span><br><span class="line">指的就是任何两台设备</span><br><span class="line">手机啊</span><br><span class="line">电脑都可以</span><br><span class="line">交换信息呢</span><br><span class="line">就是这两台设备之间进行一个数据传递的过程</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">功能一:数据格式变换</span><br><span class="line">原因是不同的主机它的这个编码以及表示方式都可能不太一样</span><br><span class="line">所以为了使不同的主机</span><br><span class="line">能够进行一个数据或者</span><br><span class="line">信息的交换</span><br><span class="line">就需要表示层</span><br><span class="line">实现数据格式变换的这样一个功能</span><br><span class="line">也就是像一个翻译官的角色</span><br><span class="line">假如说我们这个数据链路上</span><br><span class="line">传输的都是比特流的形式(...0111011000..)</span><br><span class="line">最后呢 传到你的这个主机上</span><br><span class="line">也就是传到接收端上</span><br><span class="line">我想要看到的是一个图片</span><br><span class="line">这时候就需要让这个表示层出马</span><br><span class="line">他就要把这个比特流的形式转换成jpg的</span><br><span class="line">数据格式</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">功能二:对于数据加密和解密</span><br><span class="line">有的时候我们可能会在微信聊天或者QQ聊天上面</span><br><span class="line">说一些比较隐私的话题</span><br><span class="line">比如说我要告诉你我的微信密码是多少</span><br><span class="line">那这样一句话</span><br><span class="line">放在链路上传输的时候</span><br><span class="line">就要对它先进行一个加密</span><br><span class="line">在发送端进行一个加密之后</span><br><span class="line">再放到内容上面传输</span><br><span class="line">如果不加密的话</span><br><span class="line">这个有人可能就会从这个链路上抓包</span><br><span class="line">把这个信息拿下来了</span><br><span class="line">相当于就拿到了你的支付密码</span><br><span class="line">所以需要加密</span><br><span class="line">然后到了接收端呢</span><br><span class="line">就是到你发送的那个人的手机那边</span><br><span class="line">他就会对于这样一条数据进行一个解密的过程</span><br><span class="line">然后</span><br><span class="line">解密下来的结果就是</span><br><span class="line">这句话最后呈现再接收端的手机屏幕上</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第三个功能:数据压缩和恢复</span><br><span class="line">比如说我们在跟别人聊天的时候</span><br><span class="line">那这个聊天的图像呢</span><br><span class="line">非常大</span><br><span class="line">我们要先把这个图像</span><br><span class="line">进行一个压缩</span><br><span class="line">然后再传到链路上面</span><br><span class="line">最后呢</span><br><span class="line">到接收端的时候</span><br><span class="line">再把这个压缩的文件解压缩</span><br><span class="line">或者说是一个恢复的过程</span><br><span class="line">然后这个图像</span><br><span class="line">就可以呈现在接收端的那边的屏幕上了</span><br><span class="line">主要协议:JPEG、ASCII</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/ssrr22.png" alt="表示层"></p>
<h6 id="2-3会话层"><a href="#2-3会话层" class="headerlink" title="2.3会话层"></a>2.3会话层</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">向表示层实体&#x2F;用户进程提供(建立连接)</span><br><span class="line">并在连接上(有序)地(传输)数据</span><br><span class="line">这是会话</span><br><span class="line">也是(建立同步)(SYN)</span><br><span class="line">我们可以先举一个例子</span><br><span class="line">假如说我只有一台电脑</span><br><span class="line">那我这个电脑呢</span><br><span class="line">要用浏览器访问一些网页</span><br><span class="line">首先呢</span><br><span class="line">我访问了这个百度的网页</span><br><span class="line">但是我没有关闭</span><br><span class="line">我又访问了一个新的网页</span><br><span class="line">那这个王爷呢</span><br><span class="line">可以让我看一些电影</span><br><span class="line">现在呢 就说明我这个电脑已经跟这两个网页</span><br><span class="line">或者说这两个窗口已经建立起了同步</span><br><span class="line">但是呢</span><br><span class="line">现在还没有进行数据的传输</span><br><span class="line">假如说</span><br><span class="line">我现在正看电影呢</span><br><span class="line">我点快进想多往后看几秒</span><br><span class="line">那点了这个快进之后呢</span><br><span class="line">他应该马上就会有一个回应</span><br><span class="line">这个电影的画面就会往前播放几秒了</span><br><span class="line">而不是会导致我们这个百度发生什么变化</span><br><span class="line">这就是因为我的这个主机</span><br><span class="line">和这个电影</span><br><span class="line">这个服务器之间建立的一个连接</span><br><span class="line">一个会话</span><br><span class="line">是不会影响到我这个主机和其他的窗口内容</span><br><span class="line">这就是因为我们会话已经建立好了</span><br><span class="line">所以会话之间是彼此独立而不影响的</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">会话层的功能:</span><br><span class="line">1.就是可以建立管理以及终止会话</span><br><span class="line">(参考上述打开关闭这个网页)</span><br><span class="line">2.使用校验点可使会话在通信失效时从(校验点&#x2F;同步点)继续回复通信，实现数据同步</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">校验点:假如说我们要发送一个数据</span><br><span class="line">发送一个特别长的数据</span><br><span class="line">那我们就会在这个数据留了几个部分</span><br><span class="line">分别切开</span><br><span class="line">然后呢</span><br><span class="line">插入一个校验点</span><br><span class="line">或者叫同步点</span><br><span class="line">它的作用呢</span><br><span class="line">就是万一我们这个网络出现问题了</span><br><span class="line">通信失效了</span><br><span class="line">会话突然被停止或会话被关闭了</span><br><span class="line">我们就可以恢复到刚才的同步点那个地方</span><br><span class="line">继续通信</span><br><span class="line">这样的话</span><br><span class="line">我们就不用再从头开始通信了</span><br><span class="line">比如说我们在传输大文件的时候</span><br><span class="line">假如是一个小说</span><br><span class="line">123章都传输完毕</span><br><span class="line">通信失效了</span><br><span class="line">所以呢</span><br><span class="line">我们就要重传</span><br><span class="line">重新传这个文件</span><br><span class="line">可是我们要从哪里传呢</span><br><span class="line">正常可能是有一个想法</span><br><span class="line">是从第一张开始传</span><br><span class="line">但这个呢</span><br><span class="line">非常浪费时间</span><br><span class="line">所以说我们有一个有效的方法就是插入</span><br><span class="line">了校验点</span><br><span class="line">之后在离校验点最近的位置重新传输</span><br><span class="line">也就是说</span><br><span class="line">我们如果在第四章的那个地方插了一个校验点</span><br><span class="line">如果网络通信失效</span><br><span class="line">我们就可以回到刚才那个校验点</span><br><span class="line">从第四章再重新传</span><br><span class="line">这样可以大大的节省一些时间</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">会话层主要协议:ADSP和ASP</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/z2b7f1.png" alt="会话层"></p>
<h6 id="2-4传输层"><a href="#2-4传输层" class="headerlink" title="2.4传输层"></a>2.4传输层</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">传输层负责主机中(两个进程)的通信</span><br><span class="line">即(端到端)的通信</span><br><span class="line">传输单位是报文段或用户数据报</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">首先</span><br><span class="line">再强调一下</span><br><span class="line">上面四层呢</span><br><span class="line">是端到端通信</span><br><span class="line">而下面三层都是点到点的通信</span><br><span class="line">只要在两台主机进行通信的过程中</span><br><span class="line">还需要一些中间的系统</span><br><span class="line">比如说路由器 交换机等等</span><br><span class="line">那这些设备呢</span><br><span class="line">它只需要经过下面三个层次就可以了</span><br><span class="line">网络层</span><br><span class="line">数据链路层</span><br><span class="line">和物理层</span><br><span class="line">上面四层呢</span><br><span class="line">它们是不需要经历的</span><br><span class="line">而两个端系统</span><br><span class="line">或者说两个主机</span><br><span class="line">他们是需要经过全部的七个层次</span><br><span class="line">因为端到端通信指的是运行在不同主机内</span><br><span class="line">两个进程之间的通信</span><br><span class="line">而每一个进程呢</span><br><span class="line">都会用一个标识来标识它</span><br><span class="line">我们在这里叫他是端口号</span><br><span class="line">所以是进程与进程之间的通信</span><br><span class="line">也就是端到端的通信</span><br><span class="line">他的名字就是这么来的</span><br><span class="line">那么如何分辨</span><br><span class="line">或者是如何记忆端到端和点到点</span><br><span class="line">我们可以这样想</span><br><span class="line">上面四层呢</span><br><span class="line">就是一些大老板</span><br><span class="line">那这些老板呢</span><br><span class="line">比如说</span><br><span class="line">他要发送一个文件</span><br><span class="line">给另一个地方的公司</span><br><span class="line">他不需要管</span><br><span class="line">我这个文件到哪了</span><br><span class="line">到成都了</span><br><span class="line">到北京了</span><br><span class="line">不需要管这些</span><br><span class="line">具体的</span><br><span class="line">他只需要知道我这个文件</span><br><span class="line">最后要发给那个公司就OK了</span><br><span class="line">而下面三层呢</span><br><span class="line">不仅要知道最后要去哪</span><br><span class="line">而且</span><br><span class="line">主要的还是要知道</span><br><span class="line">下一步要往哪走</span><br><span class="line">下一步都是他们要管的</span><br><span class="line">所以他们给我们看来就是</span><br><span class="line">一种从一个点</span><br><span class="line">到另一个点</span><br><span class="line">一步一步的往前走</span><br><span class="line">这样一个过程</span><br><span class="line">所以他们三个叫点到点的通信</span><br><span class="line">而上面四个呢</span><br><span class="line">不管那些细节</span><br><span class="line">只管自己的这个目的主机目的地址</span><br><span class="line">所以才是一个端到端的通信</span><br><span class="line">因此我们就区分开了</span><br><span class="line">端到端或者点或点</span><br><span class="line">那接下来</span><br><span class="line">我们看一下传输层的四大功能</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一个:(可)靠传输 不可靠传输</span><br><span class="line">第二个:(差)错控制</span><br><span class="line">第三个:(流)量控制</span><br><span class="line">第四个:复(用)分用</span><br><span class="line">总结一下就是可差留用</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">很差的也能够留用吗？</span><br><span class="line">所以我们对于这种情况是绝对不能认输的</span><br><span class="line">输是传输层的输</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">假如说只有两台主机进行通信</span><br><span class="line">中间哪些有很多个路由器</span><br><span class="line">构成了一个比较庞大的网络</span><br><span class="line">可靠传输是什么呢</span><br><span class="line">首先</span><br><span class="line">比如说我们发一个文件</span><br><span class="line">那这个文件挺大的</span><br><span class="line">我们就要先把它切成报文段</span><br><span class="line">切成这样一个传输单位</span><br><span class="line">然后呢</span><br><span class="line">一个一个的放到电路上面进行一个传输</span><br><span class="line">传输到接收端之后呢</span><br><span class="line">每一个对于每一个收到的报文段</span><br><span class="line">这个接收端啊</span><br><span class="line">都会返回他一个确认</span><br><span class="line">告诉你我收到啦</span><br><span class="line">你可以发下一个了</span><br><span class="line">传输到接收端之后</span><br><span class="line">每一个对于每一个收到的报文段</span><br><span class="line">这个接收端</span><br><span class="line">都会返回给他一个确认告诉你</span><br><span class="line">我收到啦</span><br><span class="line">你可以发下一个了</span><br><span class="line">这个就是一个确认的信息</span><br><span class="line">然后呢</span><br><span class="line">这个发送端收到了这个确认协议之后</span><br><span class="line">才能够继续往下发送</span><br><span class="line">那如果有一天</span><br><span class="line">他突然发现</span><br><span class="line">哎 你怎么没消息了</span><br><span class="line">怎么没信啊</span><br><span class="line">你到底收没收到啊</span><br><span class="line">他这个时候就要再发送一遍刚才的那个数据报</span><br><span class="line">或者说刚才的那个报文段</span><br><span class="line">直到收到对于这个报文段的确认为止</span><br><span class="line">那能往下继续发送新的报文段</span><br><span class="line">那这个就是可靠传输</span><br><span class="line">一个基于确认机制的过程</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">接下来不可靠传输</span><br><span class="line">就是不需要建议连接</span><br><span class="line">然后也不用管他会不会丢</span><br><span class="line">也不用管这些什么确认机制</span><br><span class="line">直接把这个数据报</span><br><span class="line">放上去发就可以了</span><br><span class="line">那通常这些应用</span><br><span class="line">发送一些比较小的数据的时候</span><br><span class="line">有可能是在我们qq上面跟别人说</span><br><span class="line">你在吗</span><br><span class="line">那这样一句话</span><br><span class="line">其实就是一个数据报就可以解决的</span><br><span class="line">问题了</span><br><span class="line">就发送一个包就可以解决</span><br><span class="line">把这句话放到链路上面了</span><br><span class="line">所以</span><br><span class="line">对于非常小的数据</span><br><span class="line">我们是没有必要先建立连接</span><br><span class="line">然后再用确认机制</span><br><span class="line">因为这样特别耗时</span><br><span class="line">而且很麻烦</span><br><span class="line">所以我们就采用这样不可靠传输的方式</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">差错控制</span><br><span class="line">差错控制呢</span><br><span class="line">差错控制就是对于任何差错进行控制</span><br><span class="line">比如说我们这个传送的一些报文段失去了</span><br><span class="line">顺序错了</span><br><span class="line">或者是丢了一些报文段</span><br><span class="line">然后我们传输层的就会负责来纠正这些错误</span><br><span class="line">来把这些错误改邪归正</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第三个功能</span><br><span class="line">流量控制</span><br><span class="line">这个流量可不是我们正常使用的</span><br><span class="line">几兆流量啊</span><br><span class="line">几个G流量啊</span><br><span class="line">不是这样的</span><br><span class="line">这里面所说的流量一个是我能不能跟得上</span><br><span class="line">或者说咱俩的速度匹不匹配的问题</span><br><span class="line">比如说</span><br><span class="line">我这边再给你发送一个</span><br><span class="line">这是发送端</span><br><span class="line">这是接收端</span><br><span class="line">我再给你发送一大长串的一些数据</span><br><span class="line">或者说发送很多个文件</span><br><span class="line">你的接收能力是有限的</span><br><span class="line">你不可能一次性的就能接收那么多</span><br><span class="line">就好像有的人是吃货</span><br><span class="line">很能吃</span><br><span class="line">但是你不能一下给他塞太多还是吃不下去</span><br><span class="line">所以这个流量控制指的就是控制一下</span><br><span class="line">这个发送方的速度</span><br><span class="line">也就说如果接收方来不及接受了</span><br><span class="line">或者</span><br><span class="line">我接不动了</span><br><span class="line">那个发送方</span><br><span class="line">就需要慢点了</span><br><span class="line">接收方就会告诉发送方</span><br><span class="line">说你慢点发</span><br><span class="line">所以发送方就会减缓他自己</span><br><span class="line">这个发送速率</span><br><span class="line">因此这个过程就叫流量控制</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/1vn27f.png" alt="传输层"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第四个功能</span><br><span class="line">复用和分用</span><br><span class="line">复用:多个应用层进程可同时使用下面传输层的服务</span><br><span class="line">分用:运输层把收到的信息分别交付给上面应用层中相应的进程</span><br><span class="line">举个栗子:</span><br><span class="line">只有两台手机</span><br><span class="line">他们之间有qq和微信来进行通信</span><br><span class="line">而且这两个进程呢</span><br><span class="line">这两个程序都已经打开了</span><br><span class="line">已经变成了两个进程</span><br><span class="line">那我们看一下什么是复用</span><br><span class="line">端口号大家还记得吗</span><br><span class="line">刚才我们讲过</span><br><span class="line">每一个进程都会分配一个端口号来标识他</span><br><span class="line">他是独一无二的端口号</span><br><span class="line">那假如说我们暂时</span><br><span class="line">把qq这个端口号</span><br><span class="line">标为一</span><br><span class="line">微信这个进程的端口号</span><br><span class="line">标为二</span><br><span class="line">那现在我要这台手机</span><br><span class="line">要给另一台手机发消息了</span><br><span class="line">而且这两个程序都要发消息</span><br><span class="line">那我们就把发送的消息呢</span><br><span class="line">以这个报文段的形式</span><br><span class="line">放到这个传输层上面</span><br><span class="line">再进行下一步的传输</span><br><span class="line">形成一个报文段的形式</span><br><span class="line">那要注意的就是</span><br><span class="line">他们在形成报文段之后呢</span><br><span class="line">每一个包含</span><br><span class="line">比如说包含这个QQ的报文段</span><br><span class="line">它上面就会带有一个信息</span><br><span class="line">就是说这个qq程序的端口号是1号</span><br><span class="line">另一个 如果是包含微信</span><br><span class="line">要发的消息的报文段</span><br><span class="line">那这个报文段上面就会有一个信息</span><br><span class="line">说这个微信的端口号</span><br><span class="line">它所对应的是2号</span><br><span class="line">那这个数据</span><br><span class="line">其实就可以说是</span><br><span class="line">这些进程使用了这个传输层的一个服务了</span><br><span class="line">那接下来</span><br><span class="line">这个数据发送到接收端</span><br><span class="line">接收端</span><br><span class="line">就要开始把这些数据取出来了</span><br><span class="line">至于怎么取</span><br><span class="line">就需要我们刚才所说的端口号</span><br><span class="line">因为我们看到这个报文段可能有很多个</span><br><span class="line">很多个报文段</span><br><span class="line">那我们就看他分别对应的这个</span><br><span class="line">进程的端口号是多少</span><br><span class="line">假如说我们看到这一块数据啊</span><br><span class="line">这一条数据它的端口号是一</span><br><span class="line">现在这个接收端他就知道了</span><br><span class="line">那你这条数据是要发送给qq了</span><br><span class="line">那就把这个数据发给qq</span><br><span class="line">那又看到另外一个报文段</span><br><span class="line">他所对应的这个端口号</span><br><span class="line">是二</span><br><span class="line">也就说明</span><br><span class="line">接收端懂了</span><br><span class="line">这一条数据呢</span><br><span class="line">是要发送给我们这个</span><br><span class="line">二号进程也就是这个微信进程的</span><br><span class="line">所以他就把这个数据分给这个对应的</span><br><span class="line">微信进程</span><br><span class="line">因此有了端口号</span><br><span class="line">才能保证我们接收到来的一系列很复杂的数据</span><br><span class="line">都能走到自己对应的位置</span><br><span class="line">能回到自己的老家</span><br><span class="line">那这个就是复用和分用的过程</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">传输层的主要协议:TCP、UDP</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/j2jx3k.png" alt="传输层"></p>
<h6 id="2-5网络层"><a href="#2-5网络层" class="headerlink" title="2.5网络层"></a>2.5网络层</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">网络层也叫做ip层</span><br><span class="line">也叫做网际层</span><br><span class="line">也是我们七层当中最重要的一个层次</span><br><span class="line">主要任务是把(分组)从源端传到目的端</span><br><span class="line">为分组交换网上的不同主机提供通信服务</span><br><span class="line">网络层传输单位是(数据报)</span><br><span class="line">这里讲一下数据报和分组的关系</span><br><span class="line">数据报过长的时候</span><br><span class="line">就可以把数据报进行一个切割</span><br><span class="line">切割成一个又一个小的分组</span><br><span class="line">再放到链路上面来传递</span><br><span class="line">这样的就会使我们在传输的过程当中更加的灵活</span><br><span class="line">而且 消耗</span><br><span class="line">或者说是损失也会更小</span><br><span class="line">为分组交换往上的不同主机提供通讯服务</span><br><span class="line">也从一个方面表明了我们网络层非常重要的一个功能</span><br><span class="line">就可以实现网际互连</span><br><span class="line">实现不同主机之间的联通与通信</span><br><span class="line">那接下来我们看一下网络层的四大功能</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/orpl0u.png" alt="网络层"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">功能一:路由选择</span><br><span class="line">功能二:流量控制</span><br><span class="line">功能三:差错控制</span><br><span class="line">功能四:拥塞控制</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/3hnsct.png" alt="网络层"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">路由选择:选择合适的路由</span><br><span class="line">假如说发送端要发送一个数据</span><br><span class="line">发送端要发送一个数据</span><br><span class="line">发送一个数据报给接收端</span><br><span class="line">那他可以走上面的两个路由器</span><br><span class="line">当然因为下面的这个地方也是联通的</span><br><span class="line">也可以走下面这种方式</span><br><span class="line">那具体选择哪一种方式</span><br><span class="line">要看我们当时的网络情况</span><br><span class="line">而且要经过这个</span><br><span class="line">通过利用相应的路由算法来计算</span><br><span class="line">选出一个最佳路径</span><br><span class="line">最合适的一个路由方式</span><br><span class="line">才能使这个分组从发送端正确</span><br><span class="line">或者说顺利的到达这个接收端</span><br><span class="line">这就是如果路由选择的过程</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第二个就是流量控制</span><br><span class="line">在传输层我们也讲过</span><br><span class="line">他其实就是要协调</span><br><span class="line">发送端和接收端的一个速度问题</span><br><span class="line">假如发送端发送的太快了</span><br><span class="line">接收端来不及接收</span><br><span class="line">他就要告诉发送端</span><br><span class="line">你慢点发</span><br><span class="line">这个时候就是对于发送端速度的一个控制</span><br><span class="line">也是我们流量控制的过程</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第三个差错控制</span><br><span class="line">差错控制就是通信两节点之间</span><br><span class="line">约定一些特定的规则</span><br><span class="line">比如今后要学的奇偶校验码等等</span><br><span class="line">那接收方呢</span><br><span class="line">就会根据这个规则来检查我收到的分组有没有什么错</span><br><span class="line">如果能纠错就纠错</span><br><span class="line">不能纠错</span><br><span class="line">他就把这个分组扔掉</span><br><span class="line">这样的话就可以确保</span><br><span class="line">上面的一个层次</span><br><span class="line">也就说传输层所提交的数据</span><br><span class="line">都是没有问题的</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第四个功能</span><br><span class="line">也就是拥塞控制</span><br><span class="line">那这个拥塞控制和流量控制有一点区别</span><br><span class="line">流量控制 我们主要限制发送方的速度</span><br><span class="line">但是拥塞控制呢</span><br><span class="line">使针对一个全局的</span><br><span class="line">宏观上来看</span><br><span class="line">整体要控制一下速度</span><br><span class="line">拥塞控制主要指的就是如果所有节点网络</span><br><span class="line">当中的所有节点</span><br><span class="line">包括主机和中间系统</span><br><span class="line">都来不及接收分组了</span><br><span class="line">而要丢弃大量分组的话</span><br><span class="line">那网络就会处于一个拥塞状态</span><br><span class="line">因此要采取一定措施环节这种拥塞</span><br><span class="line">就叫做拥塞控制</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/1o3fdu.png" alt="网络层"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">网络层的主要协议:IP、IPX、ICMP、IGMP、ARP、RARP、OSPF </span><br><span class="line">随着以后的学习会具体的讲到</span><br><span class="line">那到时候大家再去理解这些协议都是负责哪些功能的 </span><br></pre></td></tr></table></figure>

<h6 id="2-6数据链路层"><a href="#2-6数据链路层" class="headerlink" title="2.6数据链路层"></a>2.6数据链路层</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">主要任务使把网络层传下来的数据报(组装成帧)</span><br><span class="line">数据链路层&#x2F;链路层的传输单位是(帧)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">功能一:成帧(定义帧的开始和结束)</span><br><span class="line">也就是说 我们数据报组装成帧之后</span><br><span class="line">会形成一个比较长的比特流序列</span><br><span class="line">所以我们对于这样一个比特流序列</span><br><span class="line">就要定义一下在哪开始</span><br><span class="line">是这个帧的开始</span><br><span class="line">在哪呢</span><br><span class="line">是这个帧的结束</span><br><span class="line">也就是分别定义几种</span><br><span class="line">或者是两种这个帧的开始</span><br><span class="line">和结束的01组合</span><br><span class="line">只有这样定义号呢</span><br><span class="line">我们才可以在接收端收到一个帧的时候</span><br><span class="line">提取出这个帧的部分</span><br><span class="line">数据的部分</span><br><span class="line">进而上交给网络层实现下一步的解封装</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">功能二:差错控制</span><br><span class="line">这里面的差错</span><br><span class="line">包括帧错</span><br><span class="line">或者是位错</span><br><span class="line">对于这两种错误呢</span><br><span class="line">我们这个数据链路层都会有相应的检测或者说纠错的方法</span><br><span class="line">如果发现有差错呢</span><br><span class="line">数据链路层可能就会简单的丢弃差错的帧</span><br><span class="line">以免继续在这个网络下</span><br><span class="line">传下去会浪费资源</span><br><span class="line">那如果需要改正数据呢</span><br><span class="line">也就是说</span><br><span class="line">要纠错的话</span><br><span class="line">就可以用一些可靠传输</span><br><span class="line">协议来纠正出现的差错</span><br><span class="line">所以在差错控制这儿呢</span><br><span class="line">可以检错</span><br><span class="line">也可以纠错</span><br><span class="line">这个是要针对不同的错误的情况</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第三个功能就是流量控制</span><br><span class="line">我们在传输层和网络层都讲过</span><br><span class="line">它是对于这个发送方和接收方一个速度协调问题</span><br><span class="line">如果接收方那边的缓存不够用了</span><br><span class="line">那再发来的数据全都要丢弃掉</span><br><span class="line">所以他就会告诉发送方你慢点发</span><br><span class="line">如果接收方那边的缓存不够用了</span><br><span class="line">那再发来的数据全都要丢弃掉</span><br><span class="line">等我缓存有空间了</span><br><span class="line">你再可以加快速度</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第四个功能就是访问</span><br><span class="line">或者说是接入控制</span><br><span class="line">主要呢</span><br><span class="line">对于信道的一个访问的控制</span><br><span class="line">首先呢</span><br><span class="line">我们这边有四个主机</span><br><span class="line">那他们都会连在这样一个传输介质</span><br><span class="line">物理介质上面</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">首先呢 </span><br><span class="line">我们这边有四个主机</span><br><span class="line">那他们都会连在这样一个传输介质</span><br><span class="line">物理介质上面</span><br><span class="line">那如果在这个广播式网络当中呢</span><br><span class="line">数据链路层就要处理这种访问接入控制的问题了</span><br><span class="line">就要控制一下哪台主机现在可以占用这样一个信道</span><br><span class="line">因为在广播式网络当中</span><br><span class="line">同一时间只能由一个人在发送消息</span><br><span class="line">其他人都是处于监听的状态</span><br><span class="line">所以这个数据链路层</span><br><span class="line">他就是可以控制这样一个大家对于共享信道的访问</span><br><span class="line">这是由它的一个特殊子层</span><br><span class="line">也就是介质访问子层</span><br><span class="line">来专门处理控制这个问题的</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数据链路层的主要协议:</span><br><span class="line">SDLC、HDLC、PPP、STP</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/xbvbtu.png" alt="数据链路层"></p>
<h6 id="2-7物理层"><a href="#2-7物理层" class="headerlink" title="2.7物理层"></a>2.7物理层</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">那接下来就到最后一个很简单的层次</span><br><span class="line">也是我们之前提到过的傻瓜层物理层</span><br><span class="line">之所以说物理层它是傻瓜层</span><br><span class="line">就是因为这个物理层的功能实在是太简单了</span><br><span class="line">他只需要把比特流转成电信号的形式</span><br><span class="line">然后放到例如上面</span><br><span class="line">进行一个传输就ok了</span><br><span class="line">不需要怼我们这个数据有什么改动</span><br><span class="line">也不知道对他有什么切割</span><br><span class="line">所以物理层的主要任务就是在物理媒体上</span><br><span class="line">实现比特流的透明传输</span><br><span class="line">传输单位就是比特</span><br><span class="line">物理媒体可以是任何一种物理的介质</span><br><span class="line">物理传输介质</span><br><span class="line">比如说同轴电缆</span><br><span class="line">双绞线</span><br><span class="line">还有无线电波等等</span><br><span class="line">透明传输呢</span><br><span class="line">指的就是不管所传的数据是什么样的比特组合</span><br><span class="line">都应当能够在链路上传送</span><br><span class="line">所以透明传输就是保证不管我接受到的是</span><br><span class="line">什么样的比特组合</span><br><span class="line">我都相当于无视他一样</span><br><span class="line">直接就把它放到内容上面</span><br><span class="line">进行一个传输</span><br><span class="line">就说你给我什么</span><br><span class="line">我就往外发什么</span><br><span class="line">这就是物理层傻瓜的地方</span><br><span class="line">就好像我们这边手来了一系列的比特流</span><br><span class="line">那物理层的只是单纯的把它们转换成电信号的形式</span><br><span class="line">然后就放到链路上面进行传播了</span><br><span class="line">所以这就是透明传输的意思</span><br><span class="line">那我们再来看物理层的几个功能</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一个就是定义接口特性</span><br><span class="line">这个说法比较多</span><br><span class="line">因为还有很多个一些相关的特性</span><br><span class="line">大概讲一下这个接口特性呢</span><br><span class="line">比如说我们要确定连接</span><br><span class="line">电缆的插头应该要多少根引脚</span><br><span class="line">或者说每一条引角应该如何连接</span><br><span class="line">这都属于接口特性的部分了</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第二个功能就是可以定义传输模式</span><br><span class="line">这里面的传输模式有三种</span><br><span class="line">单工</span><br><span class="line">半双工</span><br><span class="line">和双工</span><br><span class="line">的传输模式</span><br><span class="line">单工指的就是只可以单方向</span><br><span class="line">也就是如果两个人进行通信的话</span><br><span class="line">只可以同一时间有一个人在发送</span><br><span class="line">另一个就是一直在接收的</span><br><span class="line">这个是发送端和接收端就完全确认好了</span><br><span class="line">而半双工</span><br><span class="line">字面意思就知道</span><br><span class="line">他是介于单工和双工之间的一种通信方式</span><br><span class="line">半双工就是说两个人都可以作为发送方和接收方</span><br><span class="line">但是同一时间还是只能有一个人发送信息</span><br><span class="line">就好像我们在用对讲机的时候</span><br><span class="line">你同一时间只能由一个人在说话</span><br><span class="line">那另外一个时间你这个人说完话了</span><br><span class="line">还可以换别的人说话</span><br><span class="line">所以发送端是两个人都可以的</span><br><span class="line">但是同一时间只能有一个人在说话</span><br><span class="line">双工呢</span><br><span class="line">自然就是两个人可以双向同时的说话</span><br><span class="line">就好像我们打电话一样</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第三个功能就是定义传输速率</span><br><span class="line">我们说的百兆网</span><br><span class="line">十兆网</span><br><span class="line">这个十兆、百兆就是指我们这个</span><br><span class="line">发送端的发送速率</span><br><span class="line">或者说传输速率</span><br><span class="line">这都是物理层可以定义的</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第四个功能就是比特同步</span><br><span class="line">比特同步就是这端发送的1</span><br><span class="line">接收端就可以接收到1</span><br><span class="line">这种保证比特的同步是需要一个时钟的</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第五个功能呢</span><br><span class="line">就是比特编码</span><br><span class="line">比如说什么插分</span><br><span class="line">曼彻斯特编码</span><br><span class="line">等等</span><br><span class="line">他主要就是把这个01规定一下啊</span><br><span class="line">用什么样的电压表示1</span><br><span class="line">什么样的电压表示0</span><br><span class="line">这就是比特编码的意思</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">物理层的协议:</span><br><span class="line">Rj45、802.3</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/wnmjsj.png" alt="物理层"></p>
<h5 id="脑图时刻"><a href="#脑图时刻" class="headerlink" title="脑图时刻"></a>脑图时刻</h5><p><img src="https://files.catbox.moe/tkpz0b.png"></p>
]]></content>
      <categories>
        <category>计网</category>
      </categories>
      <tags>
        <tag>计网</tag>
      </tags>
  </entry>
  <entry>
    <title>ch1.6-TCP/IP模型</title>
    <url>/2021/08/10/ch1.6-TCPIP%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="一-OSI参考模型与TCP-IP参考模型"><a href="#一-OSI参考模型与TCP-IP参考模型" class="headerlink" title="一.OSI参考模型与TCP/IP参考模型"></a>一.OSI参考模型与TCP/IP参考模型</h1><p><img src="https://files.catbox.moe/vx1qtm.png" alt="TCP/IP参考模型"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">OSI参考模型</span><br><span class="line">与TCP&#x2F;IP参考模型的</span><br><span class="line">一个主要区别:</span><br><span class="line">就是在于</span><br><span class="line">它是一个法定的标准</span><br><span class="line">而TCP&#x2F;IP呢</span><br><span class="line">是我们可以事实应用的一个标准</span><br><span class="line">原因主要就是在于这个OSI</span><br><span class="line">他们研究出来的时候呢</span><br><span class="line">在市场上面有运营了</span><br><span class="line">已经开始使用了</span><br><span class="line">所以这个OSI他出来的出生的就比较晚</span><br><span class="line">在一个就是这些老学者呢</span><br><span class="line">他只是提出了这样一个架构</span><br><span class="line">但是没有说到底应该怎么应用</span><br><span class="line">因此</span><br><span class="line">这个OSI参考模型</span><br><span class="line">他也只是一个法定上的标准</span><br><span class="line">也只是一个理论上的概念</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TCP&#x2F;IP参考模型呢</span><br><span class="line">它其实是</span><br><span class="line">先诞生这个一个协议栈</span><br><span class="line">然后呢</span><br><span class="line">我们再把这个协议栈进行了分层</span><br><span class="line">成了这样一个参考模型</span><br><span class="line">然后我们再把这个协议栈进行了分层</span><br><span class="line">成了这样一个参考模型</span><br><span class="line">所以OSI呢</span><br><span class="line">它是先理论</span><br><span class="line">但是没有实践</span><br><span class="line">而TCP&#x2F;IP它是先有时间</span><br><span class="line">然后才有这样一个参考模型的理论</span><br><span class="line">我们可以看到TCP&#x2F;IP参考模型</span><br><span class="line">它有四层</span><br><span class="line">自下而上分别是网络接口层</span><br><span class="line">网继层</span><br><span class="line">传输层以及这个应用层</span><br><span class="line">那这个网络接口层呢</span><br><span class="line">其实是把这个数据链路层和物理层合并了</span><br><span class="line">他表示的就是与物理网络的一个接口</span><br><span class="line">但实际上呢</span><br><span class="line">这个TCP&#x2F;IP模型本身呢</span><br><span class="line">没有具体的描述这样一个部分</span><br><span class="line">只是指出主机必须通过某些协议与网络连接</span><br><span class="line">然后才能够在网络上面传递这个IP分组</span><br><span class="line">传递网络层的这样一个数据单元</span><br><span class="line">具体的网络类型呢</span><br><span class="line">可以有多种多样</span><br></pre></td></tr></table></figure>

<h2 id="TCP-IP之网络接口层"><a href="#TCP-IP之网络接口层" class="headerlink" title="TCP/IP之网络接口层"></a>TCP/IP之网络接口层</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">所以这个网络接口层呢</span><br><span class="line">它只说相当于是一个接口</span><br><span class="line">并没有具体规定它其中的一些细节 等等</span><br></pre></td></tr></table></figure>

<h2 id="TCP-IP之网际层"><a href="#TCP-IP之网际层" class="headerlink" title="TCP/IP之网际层"></a>TCP/IP之网际层</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">那在看上面的这个网际层</span><br><span class="line">那它和网络层呢</span><br><span class="line">其实是差不多的功能</span><br><span class="line">当然也是TCP&#x2F;IP参考模型中</span><br><span class="line">最关键的部分</span><br><span class="line">它和功能上面和这个OSI是非常相似的</span><br><span class="line">就是把数据包拆分成的分组发给任何的网络</span><br><span class="line">并且呢</span><br><span class="line">进行一个路由的选择</span><br></pre></td></tr></table></figure>

<h2 id="TCP-IP之传输层"><a href="#TCP-IP之传输层" class="headerlink" title="TCP/IP之传输层"></a>TCP/IP之传输层</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">再往上看</span><br><span class="line">传输层</span><br><span class="line">跟OSI参考模型也是一样的</span><br><span class="line">都是会实现一些端到端的</span><br><span class="line">或者说进程与进程之间的通信</span><br></pre></td></tr></table></figure>

<h2 id="TCP-IP之应用层"><a href="#TCP-IP之应用层" class="headerlink" title="TCP/IP之应用层"></a>TCP/IP之应用层</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这里面的应用层</span><br><span class="line">它是把表示层和会话层</span><br><span class="line">都纳入其中</span><br><span class="line">形成一个比较大的层次</span><br><span class="line">包含所有的高层协议</span><br><span class="line">比如说</span><br><span class="line">FTP还有DNS</span><br><span class="line">还有邮件</span><br><span class="line">当中使用的SMTP等等协议都是我们</span><br><span class="line">这个TCP&#x2F;IP</span><br><span class="line">所使用到的协议</span><br><span class="line">当然是就是把之前这个三层所用到的协议综合到一起</span><br><span class="line">放到一块来说了</span><br></pre></td></tr></table></figure>

<h1 id="二-TCP-IP协议栈"><a href="#二-TCP-IP协议栈" class="headerlink" title="二.TCP/IP协议栈"></a>二.TCP/IP协议栈</h1><p><img src="https://files.catbox.moe/31v6ny.png" alt="TCP/IP协议栈"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">为什么叫做TCP&#x2F;IP呢？</span><br><span class="line">首先</span><br><span class="line">这个是一个栈的结构</span><br><span class="line">大家都应该很清楚</span><br><span class="line">我们在数据结构当中有学过这样一层又一层的</span><br><span class="line">栈的结构</span><br><span class="line">大家都应该很清楚</span><br><span class="line">我们在数据结构当中有学过</span><br><span class="line">这样一层又一层的栈的结构</span><br><span class="line">那我们可以看到</span><br><span class="line">自下而上分别是每一个层次所对应的一些协议</span><br><span class="line">那再这个TCP&#x2F;IP协议栈当中的TCP协议</span><br><span class="line">以及这个IP协议</span><br><span class="line">是我们这个协议栈的大头</span><br><span class="line">非常常用的两个协议</span><br><span class="line">所以写这个协议栈就因此得名</span><br><span class="line">TCP&#x2F;IP</span><br><span class="line">这两个比较常用而已</span><br><span class="line">当然这个协议栈</span><br><span class="line">不只包括这两个协议</span><br><span class="line">还有包括各个层次的其他协议等等</span><br></pre></td></tr></table></figure>

<h1 id="三-OSI参考模型与TCP-IP参考模型的相同点"><a href="#三-OSI参考模型与TCP-IP参考模型的相同点" class="headerlink" title="三.OSI参考模型与TCP/IP参考模型的相同点"></a>三.OSI参考模型与TCP/IP参考模型的相同点</h1><h2 id="1-都分层"><a href="#1-都分层" class="headerlink" title="1.都分层"></a>1.都分层</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">采用的是一个分层的体系结构</span><br><span class="line">就会讲一些庞大的这个计算机网络问题呢</span><br><span class="line">拆分成一个又一个小的问题</span><br><span class="line">每一层能负责解决一类的问题</span><br><span class="line">那这个就是分层的由来</span><br></pre></td></tr></table></figure>

<h2 id="2-基于独立的协议栈的概念"><a href="#2-基于独立的协议栈的概念" class="headerlink" title="2.基于独立的协议栈的概念"></a>2.基于独立的协议栈的概念</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">看TCP&#x2F;IP的图</span><br></pre></td></tr></table></figure>

<h2 id="3-可以实现异构网络互联"><a href="#3-可以实现异构网络互联" class="headerlink" title="3.可以实现异构网络互联"></a>3.可以实现异构网络互联</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">其实也就是说可以实现不同厂家的一些设备</span><br><span class="line">进行相同的通信</span><br><span class="line">就是可以把全世界的</span><br><span class="line">不同厂家生产的计算机联系起来</span><br><span class="line">使他们的关系变得更加亲密</span><br></pre></td></tr></table></figure>

<h1 id="四-OSI参考模型与TCP-IP参考模型的不同点"><a href="#四-OSI参考模型与TCP-IP参考模型的不同点" class="headerlink" title="四.OSI参考模型与TCP/IP参考模型的不同点"></a>四.OSI参考模型与TCP/IP参考模型的不同点</h1><p><img src="https://files.catbox.moe/f9ahrr.png" alt="OSI参考模型与TCP/IP参考模型的不同点"></p>
<h2 id="1-面向连接"><a href="#1-面向连接" class="headerlink" title="1.面向连接"></a>1.面向连接</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">面向连接:就像我给你吃个东西</span><br><span class="line">那我会先问你要不要吃东西</span><br><span class="line">如果你要</span><br><span class="line">我再把这个东西喂给你</span><br><span class="line">你吃完之后就相当于我喂完了</span><br><span class="line">这个就是连接结束</span><br></pre></td></tr></table></figure>

<h2 id="2-无连接"><a href="#2-无连接" class="headerlink" title="2.无连接"></a>2.无连接</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">无连接:不征求你的意见 我直接就塞到你的嘴巴里</span><br><span class="line">这个就是无连接</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">首先我们知道网络层有一个非常重要的协议</span><br><span class="line">就是ip协议</span><br><span class="line">那这样一个协议呢</span><br><span class="line">它使强调面向无连接的</span><br><span class="line">也就是不需要连接的</span><br><span class="line">这两个模型都在网络层这块 有无连接通信</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">那这个传输层呢 我们说过是端到端</span><br><span class="line">进程与进程之间的通信</span><br><span class="line">所以我们这个传输层</span><br><span class="line">它主要是为了实现可靠传输而存在的</span><br><span class="line">为了实现可靠的传输呢</span><br><span class="line">就要先建立号一个连接</span><br><span class="line">所以说这个传输层再两个模型当中都有面向连接</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">接下来我们就结合第三句话说</span><br><span class="line">TCP&#x2F;IP协议最开始就考虑到互联问题</span><br><span class="line">所以把IP作为了重要的层次</span><br><span class="line">因此他就特别看重网络层的一个IP协议</span><br><span class="line">所以他特别看重这个</span><br><span class="line">就是无连接的通信方式</span><br><span class="line">因此TCP&#x2F;IP模型在网络层</span><br><span class="line">只有无连接</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">大家可以再继续找自己的方法来记一下</span><br><span class="line">像我呢</span><br><span class="line">就是这样记网络层的</span><br><span class="line">网络层和传输层这个对角线的地方</span><br><span class="line">他们都是两个都有的</span><br><span class="line">无连接和面向连接的</span><br><span class="line">而TCP&#x2F;IP模型在网络层格外看重IP协议</span><br><span class="line">所以他这个在网络层是无连接</span><br><span class="line">那剩下的一个空</span><br><span class="line">就是面向连接了</span><br></pre></td></tr></table></figure>

<h1 id="四-五层参考模型"><a href="#四-五层参考模型" class="headerlink" title="四.五层参考模型"></a>四.五层参考模型</h1><p><img src="https://files.catbox.moe/grkh0b.png" alt="五层参考模型"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">综合了OSI和TCP&#x2F;IP的优点</span><br><span class="line">OSI每一个层次具体的功能都说的很清晰</span><br><span class="line">所以他把这一点</span><br><span class="line">拿过来了</span><br><span class="line">那TCP&#x2F;IP</span><br><span class="line">它层次比较简单</span><br><span class="line">只有四层</span><br><span class="line">而且层与层之间没有什么太多功能的交叉</span><br><span class="line">所以说这是TCP&#x2F;IP的优点</span><br><span class="line">把他俩综合在一起就形成了这样一个</span><br><span class="line">我们在计算机考研当中通用的参考模型</span><br></pre></td></tr></table></figure>

<h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">支持各种网络应用</span><br><span class="line">他所对应的协议</span><br><span class="line">FTP、SMTP、HTTP</span><br></pre></td></tr></table></figure>

<h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">进程-进程的数据传输</span><br><span class="line">他的主要协议就是</span><br><span class="line">TCP、UDP</span><br></pre></td></tr></table></figure>

<h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">网络层指源主机到目的主机的分组数据</span><br><span class="line">分组路由与转发</span><br><span class="line">选择哪个路由</span><br><span class="line">并且在这个路由器当中</span><br><span class="line">从哪个口转发出去</span><br><span class="line">这都是网络层负责的内容</span><br><span class="line">所对应的协议呢 </span><br><span class="line">有这些 IP、ICMP、OSPF等等</span><br></pre></td></tr></table></figure>

<h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">它是把网络层传下来的数据报组装成帧</span><br><span class="line">也就是成帧的过程</span><br><span class="line">对应的协议有Ethernet以及PPP协议</span><br><span class="line">我们在链路层上面才会具体展开的来讲</span><br></pre></td></tr></table></figure>

<h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">实现比特传输</span><br></pre></td></tr></table></figure>

<h1 id="五-五层参考模型的数据封装与解封装"><a href="#五-五层参考模型的数据封装与解封装" class="headerlink" title="五.五层参考模型的数据封装与解封装"></a>五.五层参考模型的数据封装与解封装</h1><p><img src="https://files.catbox.moe/17ndv9.png" alt="五层参考模型数据封装与解封装"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">那我们最后啊</span><br><span class="line">再来看一下针对这样五层的参考模型</span><br><span class="line">我们的数据再传输的过程当中</span><br><span class="line">是要进行怎么样的一个封装和解封装过程呢？</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">其实我们这个a、b两台主机通信啊</span><br><span class="line">中间一定要有一些中间系统</span><br><span class="line">比如说路由器啊</span><br><span class="line">交换机等等</span><br><span class="line">那在这里面呢</span><br><span class="line">我们就把它省略掉了</span><br><span class="line">因为在这两中中间系统当中进行数据的封装和解封装</span><br><span class="line">过程其实在主机上都是一样的</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">首先呢</span><br><span class="line">对于这个主机上面哪些数据应用层会加一定的控制信息</span><br><span class="line">然后这个控制信息形成的这样一个单位</span><br><span class="line">传输单元就叫做报文</span><br><span class="line">接下来就把报文切割成段</span><br><span class="line">就放到传输层上面进行传输</span><br><span class="line">再加上传输层的控制协议</span><br><span class="line">因此就形成了一个个的报文段</span><br><span class="line">接下来就是报文段</span><br><span class="line">再到网络层的一个地方</span><br><span class="line">就是把这样一个数据单元再加上网络层的控制信息</span><br><span class="line">加上网络层的头部</span><br><span class="line">就形成了一个数据报</span><br><span class="line">如果数据报过长的时候</span><br><span class="line">我们可以给他进行一个切分</span><br><span class="line">分成分组</span><br><span class="line">对于这个数据报呢</span><br><span class="line">接下来到链路层的时候</span><br><span class="line">就要给他成帧了</span><br><span class="line">把数据报组成帧</span><br><span class="line">并且呢</span><br><span class="line">在这个头和尾</span><br><span class="line">这个地方加上链路层的控制信息</span><br><span class="line">头部的控制信息以及尾部的控制信息</span><br><span class="line">那它形成的这样一个传递的单元呢</span><br><span class="line">就叫做帧</span><br><span class="line">那对于帧呢</span><br><span class="line">物理层就不去再加什么其他的控制信息了</span><br><span class="line">直接就把他转成比特流的形式</span><br><span class="line">传输单元呢</span><br><span class="line">就是比特</span><br><span class="line">然后把这样一个比特流放在链路上面进行传输</span><br><span class="line">那传输到这个端系统</span><br><span class="line">或者说传输到中间系统的时候</span><br><span class="line">就要先进行一个解封装的过程</span><br><span class="line">也就是一个还原的过程</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">到物理层呢</span><br><span class="line">就是这样一个比特流序列</span><br><span class="line">到链路层的时候</span><br><span class="line">就开始还原成链路层的这样一个帧的形式</span><br><span class="line">接下来就把这个控制信息</span><br><span class="line">脱掉</span><br><span class="line">脱掉之后</span><br><span class="line">就剩下这个网络层的数据</span><br><span class="line">以及它的控制信息</span><br><span class="line">那在这个地方呢</span><br><span class="line">网络层识别出来它的控制信息之后</span><br><span class="line">再把这个网络层的首部</span><br><span class="line">脱掉</span><br><span class="line">剩下的就是传输层的这样一个协议</span><br><span class="line">数据单元</span><br><span class="line">那接下来再把传输层的这个控制信息去掉</span><br><span class="line">剩下的就是应用层的这样一个传输单元</span><br><span class="line">再把应用层的控制信息去掉之后</span><br><span class="line">就返回给这样一个系统了</span><br><span class="line">返回给主机B</span><br><span class="line">我最后收到什么样的数据</span><br><span class="line">就是对你的这个data</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">那关于这个五层参考模型的数据封装与解封装过程</span><br><span class="line">其实跟之前OSI七层的结构都是差不多的</span><br><span class="line">就像这个快递的打包和拆包的过程一样</span><br></pre></td></tr></table></figure>

<h1 id="脑图时刻"><a href="#脑图时刻" class="headerlink" title="脑图时刻"></a>脑图时刻</h1><p><img src="https://files.catbox.moe/44nlp9.png" alt="脑图时刻"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">接下来呢</span><br><span class="line">就是我们现在通用的</span><br><span class="line">以及我们接下来考研要学习的</span><br><span class="line">这个一个架构</span><br><span class="line">大家一定要清楚每一个模型</span><br><span class="line">它的各个层次都有什么</span><br><span class="line">就比如说ISO七层</span><br><span class="line">物联网淑慧试用</span><br><span class="line">TCP&#x2F;IP四层</span><br><span class="line">这个四层</span><br><span class="line">(应用层)(传输层)(网基层)和(网络接口层)</span><br><span class="line">那这个五层呢</span><br><span class="line">就是我们书上的目录了</span><br><span class="line">(应用层 传输层 网络层)</span><br><span class="line">最基本的</span><br><span class="line">除了要弄清楚每一个层次</span><br><span class="line">是什么之外</span><br><span class="line">还要知道这几个模型的各个层次都有什么功能</span><br><span class="line">使用了哪些协议</span><br><span class="line">接着呢</span><br><span class="line">还要理清楚这三者之间的关系以及区别</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">记住相同点</span><br><span class="line">和不同点</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>计网</category>
      </categories>
      <tags>
        <tag>计网</tag>
      </tags>
  </entry>
  <entry>
    <title>ch2.1-物理层基本概念</title>
    <url>/2021/08/11/ch2.1-%E7%89%A9%E7%90%86%E5%B1%82%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h1 id="1-物理层基本概念"><a href="#1-物理层基本概念" class="headerlink" title="1.物理层基本概念"></a>1.物理层基本概念</h1><h2 id="1-1导图"><a href="#1-1导图" class="headerlink" title="1.1导图"></a>1.1导图</h2><p><img src="https://inews.gtimg.com/newsapp_ls/0/13869539679/0.png" alt="物理层基本概念"></p>
<h2 id="1-2通信基础"><a href="#1-2通信基础" class="headerlink" title="1.2通信基础"></a>1.2通信基础</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通信基础这块我们要学习的四个部分</span><br><span class="line">首先呢 就是一些基本的概念</span><br><span class="line">包括 数据 信号 码元 信道 信源 信宿</span><br><span class="line">还有一些跟速度有关的概念</span><br><span class="line">速率 波特和带宽</span><br><span class="line">这都是基本概念 </span><br><span class="line">要学习的内容</span><br><span class="line">那有了这些概念呢</span><br><span class="line">我们就可以用这些名词</span><br><span class="line">来去做题</span><br><span class="line">或者说呢</span><br><span class="line">应用到这个公式当中</span><br><span class="line">我们要学习的两个非常重要的</span><br><span class="line">求极限的公式</span><br><span class="line">就是奈氏准则和香农定理</span><br><span class="line">他们两个呢</span><br><span class="line">都是在求信道的极限数据传输速率</span><br><span class="line">注意他们俩的区别呢</span><br><span class="line">就是所属的背景环境不太一样</span><br><span class="line">具体哪里不一样呢</span><br><span class="line">我们会在接下来的课程当中再来学习</span><br><span class="line">接下来</span><br><span class="line">编码与调制</span><br><span class="line">也是这章非常重要的内容</span><br><span class="line">编码指的是</span><br><span class="line">把数据调成数字信号</span><br><span class="line">变成数字信号的过程</span><br><span class="line">调制呢</span><br><span class="line">是把数据变成模拟信号的过程</span><br><span class="line">因为根据信道的不同</span><br><span class="line">我们要传输的这样一个信号形式也应该有不同</span><br><span class="line">所以我们就要在发送数据之前呢</span><br><span class="line">把这个数据先调成这个信道能传送的信号形式</span><br><span class="line">再把它发送出去</span><br><span class="line">接下来再看一下数据交换方式</span><br><span class="line">这个数据交换方式啊</span><br><span class="line">其实可以说是贯穿于计算机网络最重点的内容了</span><br><span class="line">数据交换方式主要包括电路交换</span><br><span class="line">报文交换</span><br><span class="line">以及分组交换</span><br><span class="line">那么</span><br><span class="line">在打电话这个例子当中</span><br><span class="line">我们用的是电路交换</span><br><span class="line">但是在计算机网络当中</span><br><span class="line">报文交换或者说分组交换</span><br><span class="line">是比较常见的</span><br><span class="line">在这一章呢</span><br><span class="line">我们会简单的介绍一下这三种数据交换方式的过程</span><br><span class="line">在后面的章节第四章网络层</span><br><span class="line">我们会更加深入的理解分组</span><br><span class="line">交换</span><br><span class="line">存储</span><br><span class="line">转发</span><br><span class="line">等等相关的一些概念</span><br></pre></td></tr></table></figure>

<h2 id="1-3数据的传输介质以及设备"><a href="#1-3数据的传输介质以及设备" class="headerlink" title="1.3数据的传输介质以及设备"></a>1.3数据的传输介质以及设备</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">传输介质呢</span><br><span class="line">包含导向型传输介质</span><br><span class="line">以及非导向型传输介质</span><br><span class="line">导向型就是你看得见</span><br><span class="line">摸得着的光纤啊</span><br><span class="line">电缆</span><br><span class="line">这都是</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">非导向传输介质呢</span><br><span class="line">就是你感受不到</span><br><span class="line">但它却实际存在的</span><br><span class="line">比如说无线电波</span><br><span class="line">微波</span><br><span class="line">红外线</span><br><span class="line">激光</span><br><span class="line">等等</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">那再来看物理层设备中继器和集线器</span><br><span class="line">简单来说</span><br><span class="line">我们要学习的思路非常清晰</span><br><span class="line">就是先了解上层基础</span><br><span class="line">然后呢</span><br><span class="line">再来学习下层建筑</span><br><span class="line">把这两者结合在一起</span><br><span class="line">就能很好的理解物理层功能</span><br><span class="line">以及它的特点</span><br><span class="line">那这节课我们就先来看一下物理层的</span><br><span class="line">一些基本概念</span><br></pre></td></tr></table></figure>

<h2 id="1-4物理层的一些基本概念"><a href="#1-4物理层的一些基本概念" class="headerlink" title="1.4物理层的一些基本概念"></a>1.4物理层的一些基本概念</h2><p><img src="https://inews.gtimg.com/newsapp_ls/0/13870591424/0.png" alt="物理层的一些特性"></p>
<h3 id="1-4-1物理层接口特性"><a href="#1-4-1物理层接口特性" class="headerlink" title="1.4.1物理层接口特性"></a>1.4.1物理层接口特性</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">物理层解决如何在连接各种计算机的传输媒体上</span><br><span class="line">(传输数据比特流),而不是指具体的传输媒体</span><br><span class="line">那这个传输媒体呢</span><br><span class="line">就是刚才所讲的传输介质</span><br><span class="line">包括导向型和非导向型</span><br><span class="line">那这个传输媒体或者说传输介质也有人称之为</span><br><span class="line">是这个网络体系结构当中的第零层</span><br><span class="line">也就是我们要区分开</span><br><span class="line">这些传输媒体其实并不属于物理层</span><br><span class="line">那到底什么属于物理层呢</span><br><span class="line">物理层的主要任务是确定与传输媒体接口</span><br><span class="line">有关的一些特性</span><br><span class="line">所以说</span><br><span class="line">物理层</span><br><span class="line">主要定义的是一些接口的相关特性</span><br><span class="line">那确定与接口有关的一些特性呢</span><br><span class="line">这个过程其实我们在定义一种标准</span><br><span class="line">举个例子来说</span><br><span class="line">只有一个插排</span><br><span class="line">那插排上面呢</span><br><span class="line">有两孔</span><br><span class="line">也有三孔</span><br><span class="line">这其实就是在定义接口上的标准</span><br><span class="line">只有定义了这些标准</span><br><span class="line">我们手机没电的时候才可以把充电器充在任何一个插排之上</span><br><span class="line">其次呢 还有这样一个例子</span><br><span class="line">比如说我们家里的这个有线路由器</span><br><span class="line">那有线路由器后面呢</span><br><span class="line">都会有很多插孔</span><br><span class="line">大家都回去看一下</span><br><span class="line">那这些插孔的具体来讲</span><br><span class="line">是又连到广域网</span><br><span class="line">又连到局域网的</span><br><span class="line">但是大家都可以发现这个你和你朋友加的路由器</span><br><span class="line">它后面的插孔</span><br><span class="line">这个形状应该都是一样的</span><br><span class="line">而且你们的网线的接头应该也都是一样的</span><br><span class="line">就是有一个水晶头</span><br><span class="line">然后里面呢</span><br><span class="line">有几根相互搅合在一起的彩色的双角线</span><br><span class="line">那这些呢</span><br><span class="line">其实也是在定义物理层接口上的一些</span><br><span class="line">特性的标准</span><br><span class="line">那只有定义了这些标准呢</span><br><span class="line">当你把你家里的网线拿到你朋友家去啊</span><br><span class="line">上网的时候或者拿到别的地方上网的时候</span><br><span class="line">你才可以无缝衔接的插入到别人家的路由器上面</span><br><span class="line">那接下来我们就看一下物理层所定义的一些接口特性</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">机械特性:定义物理连接的特性，规定物理连接所采用的规格、接口形状、阴险数目、引脚数量和排列情况</span><br><span class="line">其实就是我们讲的插排</span><br><span class="line">还有这个网线的例子</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">电器特性:电气特性规定的是在传输二进制位时，这个二进制位就是说传输0101这些比特的时候</span><br><span class="line">传输比特流的时候</span><br><span class="line">线路上信号的电压范围</span><br><span class="line">阻抗匹配</span><br><span class="line">传输速率</span><br><span class="line">和距离限制等</span><br><span class="line">电气特性通常都会有数字</span><br><span class="line">说电压的时候说的是一个电压的范围</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">功能特性:功能特性指明的时某条线上出现的</span><br><span class="line">某一电平</span><br><span class="line">表示何种意义</span><br><span class="line">接口部件的信号线的用途等等</span><br><span class="line">功能特性有的时候可能不会出现数字</span><br><span class="line">他可能只会说</span><br><span class="line">高电平处于什么含义</span><br><span class="line">或者说处于什么意义</span><br><span class="line">这个描述的就是功能特性</span><br><span class="line">电气特性的通常都会有数字</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">规程特性:定义的是各条物理线路的工作规程</span><br><span class="line">和时序关系</span><br><span class="line">当你在题目中看到规程</span><br><span class="line">过程</span><br><span class="line">时序这些字样的时候</span><br><span class="line">毫无疑问就是第四个规程特性</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>计网</category>
      </categories>
      <tags>
        <tag>计网</tag>
      </tags>
  </entry>
  <entry>
    <title>“ch2.2-线性表的定义和基本操作”</title>
    <url>/2021/08/15/ch2.1-%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="1-知识总览"><a href="#1-知识总览" class="headerlink" title="1.知识总览"></a>1.知识总览</h1><p><img src="https://inews.gtimg.com/newsapp_ls/0/13884281846/0.png" alt="知识总览"></p>
<h2 id="2-线性表的定义"><a href="#2-线性表的定义" class="headerlink" title="2.线性表的定义"></a>2.线性表的定义</h2><p><img src="https://inews.gtimg.com/newsapp_ls/0/13884361554/0.png" alt="线性表的定义"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用大白话的方式来讲，所谓线性表就是</span><br><span class="line">各个数据元素 它们之间的逻辑关系</span><br><span class="line">逻辑结构是这种一条线的结构</span><br><span class="line">就是被穿到一起。</span><br><span class="line">数据元素之间有这样的前后关系</span><br><span class="line">各个数据元素</span><br><span class="line">它们之间的逻辑关系</span><br><span class="line">逻辑结构</span><br><span class="line">是这种一条线</span><br><span class="line">被穿到一起。</span><br><span class="line">用严格数学意义上来讲</span><br><span class="line">线性表是具有（相同）数据类型的</span><br><span class="line">n(n&gt;&#x3D;0)个数据元素的有限序列</span><br><span class="line">其中n为表长</span><br><span class="line">当n&#x3D;0时</span><br><span class="line">线性表是一个（空表）。</span><br><span class="line">若用L命名线性表</span><br><span class="line">则其一般表示为</span><br><span class="line">L&#x3D;(a1,a2,...,an)。</span><br><span class="line">那我们在这个定义中需要注意这样的</span><br><span class="line">几个点</span><br><span class="line">1.线性表当中的各个数据元素,</span><br><span class="line">它们的类型都是相同的。</span><br><span class="line">比如你的这个数据元素,</span><br><span class="line">它是int型的话</span><br><span class="line">那么其他的这些数据元素,</span><br><span class="line">它们也都需要是int型。</span><br><span class="line">当然</span><br><span class="line">你也可以自己定义某一种结构类型</span><br><span class="line">比如struct A 那你自己定义的</span><br><span class="line">这个结构类型作为数据元素的数据类型。</span><br><span class="line">所有数据元素的数据类型都相同</span><br><span class="line">这一点意味着各个数据元素</span><br><span class="line">它们所占的存储空间是一样大的</span><br><span class="line">这个特性可以帮助计算机快速地找到</span><br><span class="line">某一个具体的数据元素。</span><br><span class="line">2.需要注意的地方是线性表</span><br><span class="line">它是一个序列</span><br><span class="line">那所谓的序就是只有次序</span><br><span class="line">各个数据元素之间有这样的先后次序</span><br><span class="line">这也很好理解</span><br><span class="line">3.需要注意的点</span><br><span class="line">线性表中的数据元素数量是有限的。</span><br><span class="line">比如举一个反例</span><br><span class="line">如果说所有的整数按照递增的次序来排列</span><br><span class="line">那这样的数据结构</span><br><span class="line">它既满足了各个数据元素相同</span><br><span class="line">这个特性</span><br><span class="line">同时也满足了各个数据元素之间</span><br><span class="line">有次序这样的特性</span><br><span class="line">但是由于这儿提到的是所有的整数</span><br><span class="line">而整数的数量它是无限的</span><br><span class="line">因此它不能算是一个线性表</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我们描述线性表当中的各个数据元素的时候</span><br><span class="line">这个角标是从1开始的</span><br><span class="line">a1表示这个线性表当中的第一个数据元素</span><br><span class="line">a2是第二个数据元素</span><br><span class="line">...</span><br><span class="line">ai是表示第i个数据元素</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">那所谓的第几个我们用一个专业术语描述</span><br><span class="line">叫做数据元素在线性表中的位序</span><br><span class="line">然后 一个线性表中的第一个元素</span><br><span class="line">我们称为表头元素</span><br><span class="line">最后一个元素称为表尾元素</span><br><span class="line">除了线性表当中的第一个元素之外</span><br><span class="line">其他的所有元素都可以找到一个直接前驱</span><br><span class="line">也就是排在它们前面的数据元素</span><br><span class="line">这就是前驱的概念</span><br><span class="line">而除了最后一个元素之外</span><br><span class="line">其他的每个元素都可以直接找到</span><br><span class="line">一个它的直接后继</span><br><span class="line">这是后继的概念</span><br><span class="line">那这里要再次强调位序这个概念</span><br><span class="line">位序是从1开始的</span><br><span class="line">但是我们在程序中定义一个数组的时候</span><br><span class="line">数组下标是从0开始的</span><br></pre></td></tr></table></figure>

<p><img src="https://inews.gtimg.com/newsapp_ls/0/13884853210/0.png" alt="线性表的定义"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">不知道大家看到线性表这个术语的时候</span><br><span class="line">这个表字会让大家联想到什么</span><br><span class="line">当我看到表这个字的时候</span><br><span class="line">我在刚开始学的时候</span><br><span class="line">会觉得说</span><br><span class="line">为什么这样的一个线性结构的关系要把它称为表呢</span><br><span class="line">可以从线性表的英文术语当中找到答案</span><br><span class="line">线性表的英文叫linear list</span><br><span class="line">那linear其实就是线型的</span><br><span class="line">直线的</span><br><span class="line">线状的</span><br><span class="line">它是由line这个单词变来的</span><br><span class="line">那line就是线</span><br><span class="line">比如大家喜欢看的天线宝宝</span><br><span class="line">就是sky line baby 对吧</span><br><span class="line">list这个单词</span><br><span class="line">它有列表的意思</span><br><span class="line">比如代办事项是todoList</span><br><span class="line">它就是由一个一个的元素组成的</span><br><span class="line">这就和我们线性表的样子对应上了</span><br><span class="line">所以我觉得为什么要翻译为线性表呢</span><br><span class="line">可能就是因为这个list</span><br><span class="line">它本来就有列表的含义</span><br><span class="line">再换一个角度理解</span><br><span class="line">如果说这样的一个数据元素</span><br><span class="line">它里边包含了多个数据项的话</span><br><span class="line">那么从形式上看</span><br><span class="line">它保存的内容不就是这样的一张表吗</span><br><span class="line">所以为什么这种数据结构它叫线性表</span><br><span class="line">而不是线性串之类的原因</span><br></pre></td></tr></table></figure>

<h2 id="3-线性表的基本操作"><a href="#3-线性表的基本操作" class="headerlink" title="3.线性表的基本操作"></a>3.线性表的基本操作</h2><p><img src="https://inews.gtimg.com/newsapp_ls/0/13884920943/0.png" alt="线性表的基本操作"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">需要实现的两个基本操作是</span><br><span class="line">1.初始化一个线性表</span><br><span class="line">2还有销毁一个线性表</span><br><span class="line">这两个基本操作</span><br><span class="line">实现了线性表从无到有和从有到无这样的两个过程</span><br><span class="line">主要做的工作是分配内存空间和释放内存空间</span><br><span class="line">当然还需要更改一些必要的信息</span><br><span class="line">那接下来还需要实现的基本操作是插入和删除</span><br><span class="line">这个部分是函数名</span><br><span class="line">括号里面的部分是函数的参数</span><br><span class="line">那这儿指明了三个参数</span><br><span class="line">第一个参数L指的是线性表</span><br><span class="line">第二个参数i指的是我们要在第i个位置上插入元素</span><br><span class="line">第三个元素e指的是我们具体要插入的这个元素的值</span><br><span class="line">1.插入操作</span><br><span class="line">在表L中的第i个位置上插入指定元素e</span><br><span class="line">2.删除操作</span><br><span class="line">删除表L中第i个位置的元素</span><br><span class="line">并用e返回删除元素的值</span><br><span class="line">3.接下来还需要实现的基本操作是</span><br><span class="line">按值查找和按位查找</span><br><span class="line">所谓的按值查找指的是</span><br><span class="line">可以给定一个元素e的值</span><br><span class="line">然后在线性表L当中查找这个线性表当中</span><br><span class="line">有没有哪个数据元素和我们传入的这个参数e是相同的</span><br><span class="line">这是按值查找</span><br><span class="line">那按位查找</span><br><span class="line">按位查找指的是</span><br><span class="line">我们传入一个参数i</span><br><span class="line">这个i指明了我们想要找的是线性表当中的第几个元素</span><br><span class="line">最后</span><br><span class="line">我们还可以定义一些其他的常用操作</span><br><span class="line">比如可以定义一个函数Length(L)传入L</span><br><span class="line">然后会返回这个线性表的长度</span><br><span class="line">也可以定义PrintList(L)按前后顺序输出线性表L</span><br><span class="line">的所有元素值</span><br><span class="line">empty(L)判空操作</span><br><span class="line">若L为空表</span><br><span class="line">则返回true,否则返回false</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">那这个地方要提几个点</span><br><span class="line">第一在我们学习任何一个数据结构的时候</span><br><span class="line">其实基本上对于数据结构的操作无非就是</span><br><span class="line">创建 销毁 或者 增删改查</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">重要：如果你对参数的修改结果需要带回来的话</span><br><span class="line">那么你就需要传入这种引用型的参数</span><br></pre></td></tr></table></figure>

<p><img src="https://inews.gtimg.com/newsapp_ls/0/13885017414/0.png" alt="线性表的基本操作"></p>
<p><img src="https://inews.gtimg.com/newsapp_ls/0/13885053267/0.png" alt="线性表的基本定义"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在了解了我们需要实现的哪些基本操作之后</span><br><span class="line">我们来探讨一个问题</span><br><span class="line">我们为什么需要实现对数据结构的基本操作呢</span><br><span class="line">1.现在的项目一般都是大型的项目</span><br><span class="line">都需要一个很大的团队来合作的编程</span><br><span class="line">所以定义的数据结构要让别人能够很方便的使用（封装）</span><br><span class="line">2.将常用的操作&#x2F;运算封装成函数，避免重复工作，降低出错风险</span><br></pre></td></tr></table></figure>

<p><img src="https://inews.gtimg.com/newsapp_ls/0/13885086732/0.png" alt="为什么要实现对数据结构的基本操作"></p>
<h2 id="4-重要考点"><a href="#4-重要考点" class="headerlink" title="4.重要考点"></a>4.重要考点</h2><p><img src="https://inews.gtimg.com/newsapp_ls/0/13885101593/0.png" alt="逻辑结构"></p>
]]></content>
      <tags>
        <tag>数据结构和算法</tag>
      </tags>
  </entry>
  <entry>
    <title>ch2.2-数据通信基础知识</title>
    <url>/2021/08/11/ch2.2-%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="数据通信基础知识"><a href="#数据通信基础知识" class="headerlink" title="数据通信基础知识"></a>数据通信基础知识</h1><h2 id="1-典型的数据通信模型"><a href="#1-典型的数据通信模型" class="headerlink" title="1.典型的数据通信模型"></a>1.典型的数据通信模型</h2><p><img src="https://inews.gtimg.com/newsapp_ls/0/13874707314/0.png" alt="典型的数据通信的一些相关数据"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">假如我们是拨号上网</span><br><span class="line">那我们的电脑就会通过这个公用电话网</span><br><span class="line">把我们要传的数据经过一系列的过程</span><br><span class="line">然后传给另一个端系统</span><br><span class="line">假如说我现在打开了qq</span><br><span class="line">要发送一段消息</span><br><span class="line">在吗？</span><br><span class="line">在干嘛？</span><br><span class="line">多喝热水</span><br><span class="line">那这一段消息呢</span><br><span class="line">是以文字的形式存在的</span><br><span class="line">那这种消息是我们人能理解的</span><br><span class="line">那么机器呢</span><br><span class="line">就要把它转化成机器所能理解的形式</span><br><span class="line">也就是转换成数据</span><br><span class="line">那数据data呢</span><br><span class="line">其实就是一系列0&#x2F;1的组合</span><br><span class="line">那么计算机网卡</span><br><span class="line">他所发出的这些数据</span><br><span class="line">在这个信号上</span><br><span class="line">或者说在电信号上面</span><br><span class="line">的表现</span><br><span class="line">就叫做数字信号</span><br><span class="line">那接下来</span><br><span class="line">要经过一个调制解调器</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">那这个调制解调器是什么作用呢</span><br><span class="line">他其实是把数字信号调制成了这个模拟信号</span><br><span class="line">为什么要调制成模拟信号</span><br><span class="line">因为在我们这个例子当中啊</span><br><span class="line">这个数据啊</span><br><span class="line">它是要经过公用电话网的</span><br><span class="line">那这是一个广域网</span><br><span class="line">在广域网当中呢</span><br><span class="line">就有很多条模拟信道</span><br><span class="line">那这些模拟信道是什么意思呢</span><br><span class="line">模拟信道</span><br><span class="line">它就是能传模拟信号</span><br><span class="line">但是不能传数字信号的信道</span><br><span class="line">所以我们就需要把这个数字信号</span><br><span class="line">转换成模拟信号才能够传过去</span><br><span class="line">那么到这边呢</span><br><span class="line">就要再经过这样一个调制解调器</span><br><span class="line">也就是一个逆过程</span><br><span class="line">把模拟信号再转换成原来的数字信号</span><br><span class="line">也就形成了计算机他所能理解的一个数据的形式</span><br><span class="line">也就是01010比特流的形式</span><br><span class="line">接下来呢</span><br><span class="line">计算机内部的一些操作</span><br><span class="line">再把这些0101的这个数字比特流的形式</span><br><span class="line">转换成我们人类所能理解的这种文字的形式</span><br><span class="line">转换成</span><br><span class="line">在吗</span><br><span class="line">在干嘛</span><br><span class="line">多喝热水</span><br><span class="line">那至于把01010比特流转换成这些文字形式</span><br><span class="line">这些我们能看懂的文字形式过程呢</span><br><span class="line">其实就是物理层以上几层</span><br><span class="line">所进行处理的过程</span><br><span class="line">那在这里面我不用做具体的展开</span><br><span class="line">大家只需要了解数据</span><br><span class="line">从计算机网卡当中发出来</span><br><span class="line">变成数字信号</span><br><span class="line">再经过调制解调器</span><br><span class="line">调成模拟信号</span><br><span class="line">模拟信号已放到广域网上面的</span><br><span class="line">模拟信道上面进行传输</span><br><span class="line">接下来</span><br><span class="line">再由调制解调器</span><br><span class="line">解调成数字信号</span><br><span class="line">最后这个数据</span><br><span class="line">才展现在我们的眼前</span><br><span class="line">那以上的每一个部分呢</span><br><span class="line">都有他所对应的数据通信当中的专业名词</span><br><span class="line">比如说</span><br><span class="line">输入端</span><br><span class="line">我们就可以叫做信源</span><br><span class="line">信源</span><br><span class="line">就是信息的来源</span><br><span class="line">那接下来我们这个输入的数据</span><br><span class="line">就会发到这个发送器</span><br><span class="line">这里面的调试解调器呢</span><br><span class="line">就可以作为发送器</span><br><span class="line">接收端的调试解调器呢</span><br><span class="line">我们就叫他做接收器</span><br><span class="line">那中间所要经过的这样一个公用电话网</span><br><span class="line">就叫做一个传输系统</span><br><span class="line">同时呢</span><br><span class="line">我们还会把这些部分再分一下</span><br><span class="line">像信源加上发送器</span><br><span class="line">这一块呢</span><br><span class="line">我们就称它为源系统</span><br><span class="line">中间这一块呢</span><br><span class="line">就叫做传输系统</span><br><span class="line">最后这一块呢</span><br><span class="line">就叫做目的系统</span><br><span class="line">那只一部分的名词</span><br><span class="line">大家有一个了解</span><br><span class="line">对应上了就ok了</span><br></pre></td></tr></table></figure>

<h2 id="2-数据通信的相关术语"><a href="#2-数据通信的相关术语" class="headerlink" title="2.数据通信的相关术语"></a>2.数据通信的相关术语</h2><p><img src="https://inews.gtimg.com/newsapp_ls/0/13874902021/0.png" alt="数据通信的相关术语"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通信的目的是传送消息（消息：语音、文字、图像、视频等）</span><br><span class="line">不管我们是打电话或者是发微信</span><br><span class="line">发 qq还是写信</span><br><span class="line">飞鸽传输</span><br><span class="line">这些都可以叫做通信</span><br><span class="line">数据data呢</span><br><span class="line">它是指传送信息的实体</span><br><span class="line">通常是有意义的符号序列</span><br><span class="line">那在刚才的这个通信系统当中呢</span><br><span class="line">我们的数据data其实就是0101这些二进制数的序列</span><br><span class="line">因此呢</span><br><span class="line">我们就可以说</span><br><span class="line">数据通信是指在不同计算机之间传输表示信息的</span><br><span class="line">二进制数01序列的过程</span><br><span class="line">其实就是在说数据通信</span><br><span class="line">它归根结底就是在传输这些</span><br><span class="line">二进制数的序列</span><br><span class="line">那这些二进制数</span><br><span class="line">如何漂洋过海去找到它的接收端呢</span><br><span class="line">就需要把这些二进制数转换成信号</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">那接下来这些二进制数如何飘扬过海去找它的接收端呢</span><br><span class="line">就需要把这些二进制数转换成信号</span><br><span class="line">信号呢</span><br><span class="line">就是数据的电气或者电磁的表现</span><br><span class="line">是数据在传输过程当中的存在形式</span><br><span class="line">那主要有两种存在形式</span><br><span class="line">一个是数字信号</span><br><span class="line">另一个呢</span><br><span class="line">就是模拟信号</span><br><span class="line">那数字信号也称之为离散信号</span><br><span class="line">它代表消息的参数的取值是离散的</span><br><span class="line">模拟信号呢</span><br><span class="line">又称之为连续信号</span><br><span class="line">它代表消息的参数取值是连续的</span><br><span class="line">模拟信号的图像是这样的</span><br><span class="line">离散就是跳跃的</span><br><span class="line">那连续呢</span><br><span class="line">就是这样可以连续不断的</span><br><span class="line">并没有明显性跳跃的图像</span><br><span class="line">大家也可以尝试着用导数的知识</span><br><span class="line">再来理解一下这两种形式</span><br><span class="line">消息 数据 和 信号</span><br><span class="line">在一起和刚才的例子是不是同学们都很清楚了</span><br><span class="line">在刚才的例子当中</span><br><span class="line">我们传送的消息</span><br><span class="line">指的就是在吗</span><br><span class="line">在干嘛</span><br><span class="line">多喝热水</span><br><span class="line">那这个数据啊</span><br><span class="line">其实就是计算机</span><br><span class="line">他把消息翻译成了计算机所能理解的语言</span><br><span class="line">也就是二进制数的01序列</span><br><span class="line">那接下来这个数据呢</span><br><span class="line">放到链路上面</span><br><span class="line">或者说放到信道上传输的时候</span><br><span class="line">就要以信号的形式存在</span><br><span class="line">至于它应该是一以数字信号</span><br><span class="line">还是模拟信号的形式存在呢</span><br><span class="line">这个要取决于这个信道</span><br><span class="line">它是什么样的</span><br><span class="line">如果这是一个模拟信道</span><br><span class="line">那它只能允许模拟性和通过</span><br><span class="line">如果这是一个数字信道</span><br><span class="line">那它就可以使数字信号通过</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">接下来我们再看这个概念</span><br><span class="line">就是信源</span><br><span class="line">信源是产生和发送数据的源头</span><br><span class="line">信宿呢就是接收数据的终点</span><br><span class="line">信道呢</span><br><span class="line">指的是信号的传输媒介</span><br><span class="line">一般用来表示向某一个方向传送信息的介质</span><br><span class="line">因此一条通信线路往往包含一条发送信道和一条接收信道</span><br><span class="line">其实这句话的意思就是在告诉我们</span><br><span class="line">信道它是有方向性的</span><br><span class="line">如果我给你发送数据</span><br><span class="line">我往你的方向就会有一个信道</span><br><span class="line">那如果你往我这发送数据</span><br><span class="line">你往我这个方向就会</span><br><span class="line">有一个发送信道</span><br><span class="line">当然 这条你的发送信道呢</span><br><span class="line">也同时是我的接收信道</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">信道还会有一些具体的划分：</span><br><span class="line">按照传输信号来分呢</span><br><span class="line">我们可以分成模拟信道和数字信道</span><br><span class="line">按照传输介质来分呢</span><br><span class="line">我们可以分为无线信道和有线信道</span><br><span class="line">也就是我们在之前物理层开篇的时候所想到的</span><br><span class="line">无线信道呢</span><br><span class="line">可以理解为看不到</span><br><span class="line">摸不着的</span><br><span class="line">非导向型的传输信道</span><br><span class="line">比如说微波通信</span><br><span class="line">卫星通信等等</span><br><span class="line">那这个有限信道呢</span><br><span class="line">就是我们看得到</span><br><span class="line">摸得着的</span><br><span class="line">比如说我们用的网线</span><br><span class="line">用的光纤</span><br><span class="line">用着同轴电缆这些</span><br><span class="line">它们里面啊</span><br><span class="line">它们里面的信号</span><br><span class="line">传输媒介都称之为有线信道</span><br></pre></td></tr></table></figure>

<h2 id="3-设计数据通信系统要考虑的3个问题"><a href="#3-设计数据通信系统要考虑的3个问题" class="headerlink" title="3.设计数据通信系统要考虑的3个问题"></a>3.设计数据通信系统要考虑的3个问题</h2><p><img src="https://inews.gtimg.com/newsapp_ls/0/13874930664/0.png" alt="设计数据通信系统要考虑的3个问题"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.采用单工通信&#x2F;半双工&#x2F;全双工通信方式？</span><br><span class="line">2.采用串行通信&#x2F;并行通信方式？</span><br><span class="line">3.采用同步通信&#x2F;异步通信方式？</span><br></pre></td></tr></table></figure>

<h3 id="3-1三种通信方式"><a href="#3-1三种通信方式" class="headerlink" title="3.1三种通信方式"></a>3.1三种通信方式</h3><p><img src="https://inews.gtimg.com/newsapp_ls/0/13874971874/0.png" alt="三种通信方式"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">人与人之间通信</span><br><span class="line">或者说人与人之间交流</span><br><span class="line">有几种方式呢</span><br><span class="line">1.第一种方式就是你说我听着 比如说我们在做讲座的时候只有这个老师或这个教授 </span><br><span class="line">他在讲话我们在下面是不说话的</span><br><span class="line">只有一个人在讲 我们呢 是沉默的大多数</span><br><span class="line">2.那第二种呢 就是两个人面对面的交流 你说一句 我说一句</span><br><span class="line">和刚才这种交流方式呢</span><br><span class="line">就显得更加平等了一些</span><br><span class="line">两个人呢</span><br><span class="line">都是表达者也都是聆听者</span><br><span class="line">只不过它们表达的时间是错开的</span><br><span class="line">3.第三种方式呢 就是两个人一起说</span><br><span class="line">一起说（对撕）通常出现在两个人对撕的情况</span><br><span class="line">那么对应到数据通信过程当中呢</span><br><span class="line">其实也是有这种类似的三种通信方式</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.从通信双 只有一个方向的通信而没有反方向的交互，仅需要（一条）信道</span><br><span class="line">也就是你说我听着</span><br><span class="line">那类比生活当中的例子呢</span><br><span class="line">就是主播</span><br><span class="line">只有主播在说话</span><br><span class="line">我们呢</span><br><span class="line">只是处于一个聆听者的状态</span><br><span class="line">2.半双工通信&#x2F;双向交替通信方式</span><br><span class="line">通信的双方都可以发送或接受消息，但任何一方都不能同时发送和接收</span><br><span class="line">需要（两条）信道</span><br><span class="line">常见的例子呢</span><br><span class="line">就是这个对讲机了</span><br><span class="line">两个人在使用对讲机说话的时候呢</span><br><span class="line">同一时间只能有一个人在讲话</span><br><span class="line">另一个人在听着</span><br><span class="line">但是你说完</span><br><span class="line">我就可以继续说了</span><br><span class="line">3.全双工通信&#x2F;双向同时通信</span><br><span class="line">通信双方可以同时发送和接收信息，也需要（两条）信道</span><br><span class="line">类比于两个人在打电话</span><br><span class="line">两个人都可以说话</span><br><span class="line">都可以同时的发送信息</span><br></pre></td></tr></table></figure>

<p><img src="https://inews.gtimg.com/newsapp_ls/0/13875012993/0.png" alt="三种通信方式"></p>
<h3 id="3-2串行传输-amp-并行传输"><a href="#3-2串行传输-amp-并行传输" class="headerlink" title="3.2串行传输&amp;并行传输"></a>3.2串行传输&amp;并行传输</h3><p><img src="https://inews.gtimg.com/newsapp_ls/0/13875131625/0.png" alt="选择串行还是并行"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">串行传输和并行传输</span><br><span class="line">1.串行传输指的是一个字符的八位二进制数按</span><br><span class="line">由低位到高位的顺序依次发送</span><br><span class="line">这个一个字符就是character</span><br><span class="line">那这个字节它是有八位的</span><br><span class="line">也就是有一个字节的长度</span><br><span class="line">也就是这样的</span><br><span class="line">逐个比特的发送就叫做串行传输</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">并行传输：</span><br><span class="line">并行传输指得是将表示一个字符的8位二进制数同时同时通过8条信道发送</span><br><span class="line">结合这个图示呢</span><br><span class="line">就是发送方有八条信道同时发送每一个比特</span><br><span class="line">也就是把一个字符</span><br><span class="line">刷的一下</span><br><span class="line">通过八条信道发送给了接收方</span><br><span class="line">结合生活当中的例子</span><br><span class="line">我们可以想象一下</span><br><span class="line">假如说呢</span><br><span class="line">我现在有一个面包店</span><br><span class="line">我做了一个面包</span><br><span class="line">这个面包</span><br><span class="line">我会给他切成8片</span><br><span class="line">想处理这8片面包有两种方式</span><br><span class="line">一种呢</span><br><span class="line">就是找一个人</span><br><span class="line">他一片接着一片的把这八片面包吃完</span><br><span class="line">也就是这种串行传输的方式</span><br><span class="line">另一个方式呢</span><br><span class="line">就是找八个人</span><br><span class="line">他们一人拿一片</span><br><span class="line">一起把它吃完</span><br><span class="line">那这个就是并行传输的方式</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如何筛选串行传输和并行传输：</span><br><span class="line">采用串行传输 我们只需要一条信道</span><br><span class="line">采用并行传输 我们需要八个信道</span><br><span class="line">那么这个耗费会比较高</span><br><span class="line">因此</span><br><span class="line">对于远距离的方式</span><br><span class="line">我们通常采用串行传输</span><br><span class="line">近距离的传输方式</span><br><span class="line">我们通常使用并行传输</span><br><span class="line">在计算机内部的数据传输</span><br><span class="line">就是采用的并行传输</span><br><span class="line">在集成电路芯片的内部</span><br><span class="line">我们采用的就是并行传输了</span><br><span class="line">同一个插线板上各个部件之间</span><br><span class="line">以及在同一个机箱内</span><br><span class="line">很多这个插件板之间的数据传输</span><br><span class="line">都是采用这种并行的传输方式</span><br><span class="line">同样对于这个打印机</span><br><span class="line">打印机和电脑的这个连接呢</span><br><span class="line">我们也可以看到有这样一个口</span><br><span class="line">那这个口叫做并口</span><br><span class="line">并口就是实现并行传输的这个接口</span><br></pre></td></tr></table></figure>

<h3 id="3-3同步传输还是异步传输"><a href="#3-3同步传输还是异步传输" class="headerlink" title="3.3同步传输还是异步传输"></a>3.3同步传输还是异步传输</h3><p><img src="https://inews.gtimg.com/newsapp_ls/0/13875223362/0.png" alt="同步传输"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">同步传输又称为区块传输</span><br><span class="line">在传送数据的时候呢</span><br><span class="line">需要先送出一个或多个同步字符</span><br><span class="line">再送出整批的数据</span><br><span class="line">结合这个图示</span><br><span class="line">我们来看一下</span><br><span class="line">如果我要传送的数据字符呢</span><br><span class="line">有这四个字节</span><br><span class="line">他们就是一个（数据区块）</span><br><span class="line">那我要传送这一个数据区块</span><br><span class="line">首先我就要放置一个或者多个同步字符</span><br><span class="line">在发送端的时候</span><br><span class="line">就要添加上这个同步字符</span><br><span class="line">那么接收端在接收的时候呢</span><br><span class="line">发现了这几个同步字符之后</span><br><span class="line">就可以准备接收了</span><br><span class="line">也就是实现了一个发送方和接收方的时钟同步</span><br><span class="line">这个呢</span><br><span class="line">就好比在跳舞的时候</span><br><span class="line">老师会先说5678</span><br><span class="line">相当于调整一下你和我之间的这个时钟</span><br><span class="line">我们要保持节奏上的一致和同步</span><br><span class="line">我才能跟上老师跳舞的这个节奏</span><br><span class="line">也就是老师跳了一个什么动作</span><br><span class="line">我就能跟上什么一个动作</span><br></pre></td></tr></table></figure>

<p><img src="https://inews.gtimg.com/newsapp_ls/0/13875347695/0.png" alt="异步传输"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">异步传输和同步传输的主要区别</span><br><span class="line">同步传输实现同步是要加字符的</span><br><span class="line">加同步字符的</span><br><span class="line">而异步传输要实现同步呢</span><br><span class="line">是要加字符起始位和字符终止位</span><br><span class="line">为什么异步传输也是为了实现同步呢</span><br><span class="line">首先我们都公认的一点就是计算机的通信过程</span><br><span class="line">和我们打电话</span><br><span class="line">是很相似的</span><br><span class="line">那人们在打电话的时候</span><br><span class="line">拨通电话之后确认身份之后</span><br><span class="line">两个人就进入了通话状态</span><br><span class="line">那在通话过程当中呢</span><br><span class="line">说话的人</span><br><span class="line">要说清每个字</span><br><span class="line">而且每说完一句话都要停顿一下</span><br><span class="line">那么对方呢</span><br><span class="line">也要适应这个说话人的语速</span><br><span class="line">听清对方所讲的每一个字</span><br><span class="line">然后根据这个说话人的语气和停顿来判断</span><br><span class="line">下一句什么时候开始</span><br><span class="line">什么时候结束</span><br><span class="line">这样才可以听得懂 </span><br><span class="line">那这是人们在说话的时候</span><br><span class="line">在打电话时候需要实现的一个同步问题</span><br><span class="line">那么计算机在通信过程中</span><br><span class="line">也是同理</span><br><span class="line">他也要实现同步问题</span><br><span class="line">很主要的一个同步问题呢</span><br><span class="line">就是要实现字符同步</span><br><span class="line">那在字符同步下实现字符同步的方法也就是这两种了</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">异步传输是怎么操作的：</span><br><span class="line">他和同步传输的区别就是在于</span><br><span class="line">在发送端他并不是连续的发送这几个字节的</span><br><span class="line">而他可能是隔一会</span><br><span class="line">就发一个字节</span><br><span class="line">心情好了</span><br><span class="line">发一个字节那就有断断续续的发送字节</span><br><span class="line">比如说</span><br><span class="line">我们再把这个字节3拿出来</span><br><span class="line">这个字节3呢</span><br><span class="line">它是1字节</span><br><span class="line">也就是8比特</span><br><span class="line">自低位向高位分别是b0-b7</span><br><span class="line">那在发送端发送数据的时候</span><br><span class="line">它会进行一个操作来实现同步</span><br><span class="line">也就是加上一个终止位和一个起始位</span><br><span class="line">那这个起始位和终止位默认为0&#x2F;1</span><br><span class="line">当然反过来也是可以的</span><br><span class="line">那异步传输的过程我们可以这样理解一下</span><br><span class="line">每次异步传输这个信息呢</span><br><span class="line">都会以这样一个起始位开头</span><br><span class="line">那这个起始位到达接收端的时候</span><br><span class="line">接收端他就知道</span><br><span class="line">数据已经到达了</span><br><span class="line">那接收端在接收这个起始位的</span><br><span class="line">这样一个过程呢</span><br><span class="line">其实就给了接收方响应接收和缓存数据比特的时间</span><br><span class="line">那么接下来就可以接收这几个</span><br><span class="line">这8个比特了</span><br><span class="line">那接收完这8个比特之后呢</span><br><span class="line">他又会收到一个停止位</span><br><span class="line">那这一个停止位表示的就是这一次传输信息的终止</span><br><span class="line">那如果我们让终止位为1</span><br><span class="line">起始位为0的话</span><br><span class="line">也就是说</span><br><span class="line">在刚开始的时候</span><br><span class="line">这个电平如果一下变到0了</span><br><span class="line">接收方就知道</span><br><span class="line">我可以开始接收数据了</span><br><span class="line">那么接收完这8个比特之后呢</span><br><span class="line">他就会收到一个终止位</span><br><span class="line">那这个终止位我们说是1</span><br><span class="line">也就是收到了一个1的电平</span><br><span class="line">也就是一个高电平</span><br><span class="line">那他收到这样一个高电平之后呢</span><br><span class="line">就继续保持这个高电平</span><br><span class="line">直至又发来了一个新的起始位</span><br><span class="line">为0</span><br><span class="line">0所对应的低电平</span><br><span class="line">他才知道啊</span><br><span class="line">这个电平的跳变</span><br><span class="line">就告诉我</span><br><span class="line">我应该开始接收下一个新的字节了</span><br><span class="line">那这就是异步传输的一个过程</span><br><span class="line">那异步传输的一个常见例子呢</span><br><span class="line">就是在键盘上敲数字</span><br><span class="line">因为我们不知道什么时候大家心情好了</span><br><span class="line">就按了一个键</span><br><span class="line">计算机对这样一个操作进行处理的过程呢</span><br><span class="line">其实就是异步传输</span><br></pre></td></tr></table></figure>

<h3 id="脑图时刻"><a href="#脑图时刻" class="headerlink" title="脑图时刻"></a>脑图时刻</h3><p><img src="https://inews.gtimg.com/newsapp_ls/0/13875353019/0.png" alt="脑图时刻"></p>
<h2 id="4-码元"><a href="#4-码元" class="headerlink" title="4.码元"></a>4.码元</h2><p><img src="https://files.catbox.moe/0iyn28.png" alt="码元"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">现在有两台主机a和b</span><br><span class="line">中间的就是他们的一个链路</span><br><span class="line">把复杂的网络情况都暂时忽略掉</span><br><span class="line">只用这样一条链路将这两个主机连接起来</span><br><span class="line">现在主机a呢 它产生了一些数据要发送给b</span><br><span class="line">数据呢 在上节课中讲过</span><br><span class="line">就是一系列01的这样二进制数的序列组合</span><br><span class="line">那如果要把它放到链路上面传输</span><br><span class="line">就一定要把这个数据转换成信号的形式</span><br><span class="line">也就是转换成数字信号的形式</span><br><span class="line">1对应的就是高电平信号</span><br><span class="line">0对应的就是低电平</span><br><span class="line">那a开始发送数据</span><br><span class="line">首先呢</span><br><span class="line">他把第一个比特</span><br><span class="line">把1发到了链路上面</span><br><span class="line">那在这个链路上面</span><br><span class="line">它显示的电信号就是一个高电平的信号</span><br><span class="line">接下来</span><br><span class="line">他发送第二个比特0</span><br><span class="line">那这个时候呢</span><br><span class="line">第二个比特在链路上面</span><br><span class="line">表示的信号形式就是一个低电平的信号</span><br><span class="line">以此类推</span><br><span class="line">把所有的这些数据</span><br><span class="line">全部放在链路上面进行传输</span><br><span class="line">那到了b这边呢</span><br><span class="line">b就要开始逐个比特的接收</span><br><span class="line">首先他会收到第一个</span><br><span class="line">他所看到的呢</span><br><span class="line">是一个高电平</span><br><span class="line">看到这个高电平</span><br><span class="line">他就知道高电平对应的是1</span><br><span class="line">那他就把这个高电平转换成1这样一个比特</span><br><span class="line">吸收或者说接收</span><br><span class="line">那接下来他就看到第二个电平是低电平</span><br><span class="line">还意识到</span><br><span class="line">这是一个0</span><br><span class="line">这是一个二进制数0</span><br><span class="line">那么就把这个0接收</span><br><span class="line">以此类推呢</span><br><span class="line">把剩下所有到来的这个信号</span><br><span class="line">全部转换成对应的这样一个数据形式并且接收</span><br><span class="line">那么在这个例子中</span><br><span class="line">什么是码元呢</span><br><span class="line">其实</span><br><span class="line">这每一小段</span><br><span class="line">它就是码元</span><br><span class="line">每一小段</span><br><span class="line">就是一个码元</span><br><span class="line">因此我们说码元</span><br><span class="line">他指的就是用一个固定时常的信号波形</span><br><span class="line">或者说数字脉冲来代表不同离散数值的基本波形</span><br><span class="line">是数字通信当中数字信号的计量单位</span><br><span class="line">这个时常内的信号呢</span><br><span class="line">就称之为k进制码元</span><br><span class="line">而该时常称为码元宽度</span><br><span class="line">这每一段呢 </span><br><span class="line">就是一个码元</span><br><span class="line">而这段的时间长度</span><br><span class="line">我们就称之为码元宽度</span><br><span class="line">那接下来就有一个几进制码元的说法</span><br><span class="line">当码元的离散状态有m个时</span><br><span class="line">这个码元就是m进制码元</span><br><span class="line">那我们看一下</span><br><span class="line">那我们看一下</span><br><span class="line">在这个里面</span><br><span class="line">他有几种离散状态呢</span><br><span class="line">很明显</span><br><span class="line">这里面的码元的离散状态</span><br><span class="line">也就是这里面所对应的这个信号波形的状态</span><br><span class="line">只有两种</span><br><span class="line">一低一高</span><br><span class="line">那么这个就叫做二进制码元</span><br><span class="line">那我们可以想一下</span><br><span class="line">如果这个波形</span><br><span class="line">它有四种</span><br><span class="line">四种高低不平的波形</span><br><span class="line">那这个是几进制码元呢</span><br><span class="line">当然它就是四进制码元了</span><br><span class="line">那这些不同进制的码元</span><br><span class="line">他们的区别是什么呢</span><br><span class="line">区别就在于他们所携带的</span><br><span class="line">这个比特信息量</span><br><span class="line">比如说</span><br><span class="line">在这种情况下</span><br><span class="line">在这个二进制编码二进制码元的时候</span><br><span class="line">我们看到只有两种不同的码元</span><br><span class="line">一个代表0状态 一个代表1状态</span><br><span class="line">所以在二进制编码当中的一个码元</span><br><span class="line">它包含的只有一个比特的信息量</span><br><span class="line">那么在四进制码元当中</span><br><span class="line">一个码元它可以携带</span><br><span class="line">多少个比特呢</span><br><span class="line">也就是我们来研究一下</span><br><span class="line">对于这样一个四进制码元</span><br><span class="line">他的一些相关信息</span><br><span class="line">四进制码元</span><br><span class="line">我们就知道码元的离散状态有四个</span><br><span class="line">或者说这种信号波形的表示有四种</span><br><span class="line">那我们接下来就要想了</span><br><span class="line">究竟我们要多少位</span><br><span class="line">或者说</span><br><span class="line">多少个比特才能够表示出来四个信号波形</span><br><span class="line">四个离散状态呢</span><br><span class="line">这个答案应该非常的简单</span><br><span class="line">也就是我们需要用两个比特就可以表示出</span><br><span class="line">四种状态</span><br><span class="line">所以四进制码元</span><br><span class="line">就可以携带两个比特的信息量</span><br><span class="line">如果是16进制码元</span><br><span class="line">码元的离散状态有16个</span><br><span class="line">因此呢</span><br><span class="line">对应着就应该有16种高低不同的信号波形</span><br><span class="line">应该有几位</span><br><span class="line">或者说几个比特才能够表示出16种状态来呢</span><br><span class="line">自然就是需要四个比特</span><br><span class="line">也就是4位的01序列</span><br><span class="line">能表示出16种高低不同的信号波形</span><br><span class="line">所以说这个16进制码元</span><br><span class="line">他一个码元可以携带的比特的信息量也就是4</span><br><span class="line">也就是他可以携带4比特</span><br></pre></td></tr></table></figure>

<h2 id="5-数字通信系统数据传输速率的两种表示方法"><a href="#5-数字通信系统数据传输速率的两种表示方法" class="headerlink" title="5.数字通信系统数据传输速率的两种表示方法"></a>5.数字通信系统数据传输速率的两种表示方法</h2><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://inews.gtimg.com/newsapp_ls/0/13981666419/0.png"></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">即 信息传输速率 &#x3D; 码元传输速率 * 一个码元携带的比特量</span><br></pre></td></tr></table></figure>



<h3 id="5-1码元传输速率"><a href="#5-1码元传输速率" class="headerlink" title="5.1码元传输速率"></a>5.1码元传输速率</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">那这个数据传输速率呢</span><br><span class="line">其实就是数字通信系统当中的一个性能指标</span><br><span class="line">这个速率呢</span><br><span class="line">也叫做数据率</span><br><span class="line">指的是数据的传输速率</span><br><span class="line">表示的单位时间内</span><br><span class="line">传输的数据量</span><br><span class="line">可以使用两种表示方法</span><br><span class="line">一个是码元传输速率</span><br><span class="line">另一个就是信息传输速率</span><br><span class="line">什么叫做码元传输速率呢</span><br><span class="line">顾名思义</span><br><span class="line">他指的就是在单位时间内数字通信系统所传输的</span><br><span class="line">码元个数</span><br><span class="line">当然题目当中有的时候也会说脉冲个数</span><br><span class="line">或者说信号变化的次数等等</span><br><span class="line">那这里面要注意有一个坑啊</span><br><span class="line">就是如果</span><br><span class="line">这个信号</span><br><span class="line">就是有两个低电平</span><br><span class="line">他们俩是连续的</span><br><span class="line">那这个信号有没有变化呢</span><br><span class="line">也是有变化的</span><br><span class="line">因为他是从一个信号变到了另一个信号</span><br><span class="line">或者说从一个码元到了另一个码元</span><br><span class="line">这其实也是发生了变化</span><br><span class="line">也应该进入到这个信号变化次数当中</span><br><span class="line">以及脉冲个数当中</span><br><span class="line">那要注意的是码元传输速率的单位是什么</span><br><span class="line">是波特Baud大写B</span><br><span class="line">一个波特呢</span><br><span class="line">表示的就是数字通讯系统当中</span><br><span class="line">每秒可以传输一个码元</span><br><span class="line">所以说码元传输速率</span><br><span class="line">指的就是一秒可以传输多少个码元</span><br><span class="line">就是我们刚才所讲的</span><br><span class="line">有k进制码元</span><br><span class="line">但是码元速率呢是与进制数无关</span><br><span class="line">只与码元长度有关</span><br><span class="line">码元长度是什么呢</span><br><span class="line">就是我们刚才所讲的</span><br><span class="line">这一小条</span><br><span class="line">它所占的时长就是码元的长度</span><br><span class="line">或者说码元的宽度</span><br><span class="line">码元的速率与码元长度的关系呢</span><br><span class="line">就是这样的</span><br><span class="line">Rb&#x3D;1&#x2F;T</span><br><span class="line">码元的传输速率归根结底只和码元长度</span><br><span class="line">就是说跟这个码元</span><br><span class="line">一个码元所占的时常有关</span><br><span class="line">是与进制数无关的</span><br></pre></td></tr></table></figure>

<h3 id="5-2信息传输速率"><a href="#5-2信息传输速率" class="headerlink" title="5.2信息传输速率"></a>5.2信息传输速率</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">表示数据传输速率的方法就是信息传输速率</span><br><span class="line">它也叫做信息速率</span><br><span class="line">比特率等等</span><br><span class="line">它表示的呢</span><br><span class="line">是单位时间内数字通信系统所传输的</span><br><span class="line">二进制码元个数</span><br><span class="line">或者说是比特数</span><br><span class="line">为什么我们可以用二进制码元个数</span><br><span class="line">来代替这个比特数</span><br><span class="line">因为在刚才的例子当中</span><br><span class="line">我们就看到了</span><br><span class="line">如果对应的是一个二进制码元的话</span><br><span class="line">他一个码元对应的就是一个比特</span><br><span class="line">包含着是一个比特的信息量</span><br><span class="line">所以二进制码元个数aka</span><br><span class="line">也就是说</span><br><span class="line">信息传输速率</span><br><span class="line">它指的是一秒可以传输多少个比特</span><br><span class="line">这两种表示方法</span><br><span class="line">它们之间有什么样的一个关系呢？</span><br><span class="line">如果一个码元</span><br><span class="line">他携带了n比特信息量</span><br><span class="line">则m波特的码元传输速率所对应的信息传输速率</span><br><span class="line">就是m*n比特每秒</span><br><span class="line">假如说在这样一个数字通讯系统当中</span><br><span class="line">它的码元传输速率是2波特</span><br><span class="line">也就是说1秒可以传输两个码元</span><br><span class="line">而同时又告诉你了</span><br><span class="line">这一个码元呢</span><br><span class="line">他携带的是两个比特的信息量</span><br><span class="line">在这个通讯系统当中</span><br><span class="line">信息传输速率</span><br><span class="line">或者说比特率应该是多少呢</span><br><span class="line">自然就是要用2*2也就是等于4比特每秒</span><br></pre></td></tr></table></figure>

<h3 id="5-3两种传输速率的转换"><a href="#5-3两种传输速率的转换" class="headerlink" title="5.3两种传输速率的转换"></a>5.3两种传输速率的转换</h3><p><img src="https://inews.gtimg.com/newsapp_ls/0/13981727228/0.png" alt="信息传输速率"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">码元传输速率和进制数无关</span><br><span class="line">所以码元传输速率根据上面的公式 </span><br><span class="line">8000除以4 &#x3D; 2000</span><br><span class="line">因为四进制码元 携带了两个比特信息量  </span><br><span class="line">2个0或1可以表示四种状态</span><br><span class="line">十六进制码元携带了 4个比特信息量  4个0或1可以表示16种状态</span><br><span class="line">套用m*n得到上图结论</span><br></pre></td></tr></table></figure>

<p><img src="https://inews.gtimg.com/newsapp_ls/0/13981807672/0.png" alt="码元"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一道题 给的是波特。也就是码元传输速率 是1600B </span><br><span class="line">转换成2进制也就是求信息传输速率</span><br><span class="line">八进制码元 可以携带 三个比特量  用0&#x2F;1表示有八种状态</span><br><span class="line">所以M &#x3D; 1600</span><br><span class="line">n &#x3D;3 </span><br><span class="line">信息传输速率 &#x3D;码元传输速率*一个码元携带的比特量&#x3D;1600 * 3 &#x3D; 4800 b&#x2F;s</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第二道题</span><br><span class="line">单位是b&#x2F;s 给的是信息传输速率位2400b&#x2F;s</span><br><span class="line">求码元传输速率</span><br><span class="line">四进制码元可以携带 2个比特量 用0&#x2F;1表示有两种状态</span><br><span class="line">码元传输速率 &#x3D; 信息传输速率 &#x2F; 一个码元携带的比特量 &#x3D; 2400 &#x2F; 2 &#x3D; 1200 B</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>计网</category>
      </categories>
      <tags>
        <tag>计网</tag>
      </tags>
  </entry>
  <entry>
    <title>顺序表的定义和特性</title>
    <url>/2021/08/15/ch2.2-%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E5%AE%9A%E4%B9%89/</url>
    <content><![CDATA[<h1 id="知识总览"><a href="#知识总览" class="headerlink" title="知识总览"></a>知识总览</h1><p><img src="https://inews.gtimg.com/newsapp_ls/0/13885238588/0.png" alt="知识总览"></p>
<h1 id="顺序表的定义"><a href="#顺序表的定义" class="headerlink" title="顺序表的定义"></a>顺序表的定义</h1><p><img src="https://inews.gtimg.com/newsapp_ls/0/13890153174/0.png" alt="顺序表的定义"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">顺序表指的是用顺序存储的方式来实现的线性表</span><br><span class="line">而所谓顺序存储指的是把逻辑上相邻的数据元素存储在物理上也相邻的存储单元中</span><br><span class="line">这些数据元素之间的前后关系通过这种物理内存上的联系来体现</span><br><span class="line">我们强调过线性表当中的各个数据元素</span><br><span class="line">它们的数据类型都是相同的</span><br><span class="line">每个数据元素他们所占的内存空间是一样大的</span><br><span class="line">如果顺序表的第一个数据元素</span><br><span class="line">它的存放地址是这个地址的话</span><br><span class="line">那么 由于顺序表当中各个数据元素</span><br><span class="line">他们在物理内存上是连续存放的</span><br><span class="line">并且每个数据元素</span><br><span class="line">他们所占的空间大小都是相等的</span><br><span class="line">因此 第二个数据元素</span><br><span class="line">所存放的位置</span><br><span class="line">就应该是这个顺序表的起始地址</span><br><span class="line">加上数据元素的大小</span><br><span class="line">第三个数据元素存放的位置</span><br><span class="line">就应该是它的起始地址加上2*数据元素的大小</span><br><span class="line">以此类推</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如何知道一个数据元素的大小到底是多少呢</span><br><span class="line">C语言当中提供了一个很方便使用的关键字</span><br><span class="line">叫sizeof() 打个小括号</span><br><span class="line">然后里边传入你的顺序表当中存放的这个数据元素的数据类型</span><br><span class="line">比如 如果你的顺序表当中存放的是一个一个的整数</span><br><span class="line">那么只要你用sizeof()里边的</span><br><span class="line">填入int 就可以得到一个int型的整数</span><br><span class="line">在这个系统当中</span><br><span class="line">它占多大的内存空间</span><br><span class="line">那在C语言当中</span><br><span class="line">很多情况下</span><br><span class="line">一个int型的变量</span><br><span class="line">它是占4个字节</span><br><span class="line">当然 你的顺序表当中还可以存放其他</span><br><span class="line">更复杂的数据</span><br><span class="line">比如说可以存放结构类型的数据</span><br><span class="line">像这个地方</span><br><span class="line">我们定义了一个叫Customer的结构</span><br><span class="line">里面存了两个整数</span><br><span class="line">分别是num和people</span><br><span class="line">那么两个整数</span><br><span class="line">每个整数占四个字节</span><br><span class="line">所以Customer这种数据类型</span><br><span class="line">它占的内存空间大小就应该是八个字节</span><br></pre></td></tr></table></figure>

<h1 id="顺序表的是实现–静态分配"><a href="#顺序表的是实现–静态分配" class="headerlink" title="顺序表的是实现–静态分配"></a>顺序表的是实现–静态分配</h1><p><img src="https://inews.gtimg.com/newsapp_ls/0/13897653877/0.png" alt="静态分配"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">所谓静态分配</span><br><span class="line">就是指使用这种大家最熟悉的数组的这种定义方式</span><br><span class="line">来实现一个顺序表</span><br><span class="line">当然这是一个静态的数组</span><br><span class="line">也就是说</span><br><span class="line">这个数组的长度、大小</span><br><span class="line">一旦确定了之后</span><br><span class="line">它就不可以改变</span><br><span class="line">这是静态数组的特点</span><br><span class="line">我们的顺序表用这样的数据类型来表示</span><br><span class="line">里面定义了一个静态数组</span><br><span class="line">长度为Maxsize</span><br><span class="line">这是我们宏定义的一个常量</span><br><span class="line">另外</span><br><span class="line">还定义了一个叫length的变量</span><br><span class="line">用于表示当前这个顺序表它的实际长度到底是多少</span><br><span class="line">那Maxsize的值决定了顺序表</span><br><span class="line">它最多可以存放几个元素</span><br><span class="line">length的值表示的是当前这个顺序表当中已经存入了多少个元素</span><br><span class="line">如果从内存的视角来看的话</span><br><span class="line">当你声明了一个data数组的时候</span><br><span class="line">那么其实就是在内存当中开辟了一整片的连续空间</span><br><span class="line">这一整片的连续空间总共可以存放十个数据元素</span><br><span class="line">我们这儿的代码当中</span><br><span class="line">数据元素的类型用ElemType来表示</span><br><span class="line">Elem其实就是element元素的缩写</span><br><span class="line">数据元素的类型可以是int型</span><br><span class="line">可以是你自己定义的某一些更复杂的struct类型</span><br><span class="line">这个具体要看你要用你的顺序表来存什么</span><br><span class="line">那这个地方我们用ElemType来表示</span><br><span class="line">只是为了让它根据有通用性</span><br></pre></td></tr></table></figure>

<p><img src="https://inews.gtimg.com/newsapp_ls/0/13897687613/0.png" alt="顺序表"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在这我们定义了一个顺序表</span><br><span class="line">这个顺序表是用于存放整数的</span><br><span class="line">也就说数据元素的数据类型是int</span><br><span class="line">那在这</span><br><span class="line">我们定义了一个叫做data的数组</span><br><span class="line">静态的数组用于存放这些数据元素</span><br><span class="line">最多只能存10个</span><br><span class="line">定义了这样的一个数据结构之后</span><br><span class="line">我们在main函数里首先声明一个sqlist</span><br><span class="line">也就是声明一个顺序表</span><br><span class="line">那么 在执行这句代码的时候</span><br><span class="line">其实计算机就会在内存当中给这个顺序表分配它所需要的空间</span><br><span class="line">首先是存放data数组的一整片的连续空间</span><br><span class="line">那这片空间的大小就应该是10乘以每一个数据元素的大小</span><br><span class="line">像这个地方</span><br><span class="line">由于我们的数据元素是int型</span><br><span class="line">所以每个数据元素的大小就应该是四个字节</span><br><span class="line">也就是data[0]是4个字节</span><br><span class="line">data[1]是4个字节</span><br><span class="line">data[2]是4个字节</span><br><span class="line">除了data之外</span><br><span class="line">也需要分配一个存放length这个变量的空间</span><br><span class="line">这个也是四个字节</span><br><span class="line">因为它也是int型的</span><br><span class="line">那接下来我们在这个地方</span><br><span class="line">我们实现了一个InitList这样的一个函数</span><br><span class="line">对这个顺序表进行初始化</span><br><span class="line">其实这个函数就是我们上一小节中提到的基本运算的一个</span><br><span class="line">既然main函数调用了InitList</span><br><span class="line">接下来就会开始执行这个函数</span><br><span class="line">里面的代码</span><br><span class="line">首先是一个for循环</span><br><span class="line">for循环做的事情就是把data这个数组当中</span><br><span class="line">所有的这些数据元素的值都置为0</span><br><span class="line">也就是给各个数据元素设置一个默认的初始值</span><br><span class="line">当然 这个设置默认初始值的步骤其实是可以省略的</span><br><span class="line">除此之外</span><br><span class="line">还需要把length的值置为0</span><br><span class="line">因为刚开始顺序表当中</span><br><span class="line">没有存入任何一个数据元素</span><br><span class="line">所以此时顺序表当前长度应该是0</span><br><span class="line">那这就是对顺序表的一个初始化工作</span><br><span class="line">接下来要探讨的问题是</span><br><span class="line">如果不给这个data数组设置一个默认的初始值的话</span><br><span class="line">会发生什么情况</span><br><span class="line">我们把这个部分的代码给去掉</span><br><span class="line">也就是说我们在对一个顺序表进行初始化的时候</span><br><span class="line">只是设置了他的length变量的值</span><br><span class="line">如果大家在自己的电脑上实现这一段代码的话</span><br><span class="line">那么大家的电脑上打印出来的</span><br><span class="line">data这个数组当中各个元素的值</span><br><span class="line">跟我的还会不一样</span><br><span class="line">那产生这种奇怪现象的原因是内存当中</span><br><span class="line">会有遗留的脏数据</span><br><span class="line">也就是说</span><br><span class="line">当我们在声明这个顺序表的时候</span><br><span class="line">虽然系统在背后给我们分配了这么一大片</span><br><span class="line">内存空间</span><br><span class="line">但是这一片内存空间之前存的是什么数据</span><br><span class="line">其实我们并不知道</span><br><span class="line">所以我们不给这些数据元素设置默认值的话</span><br><span class="line">那么会因为之前遗留下来的脏数据而导致我们的</span><br><span class="line">这个数组当中出现一些奇怪的数据</span><br><span class="line">不过刚才我们说过</span><br><span class="line">给各个数据元素设置默认值</span><br><span class="line">这一步其实是可省略的</span><br><span class="line">原因是我们在main函数里打印顺序表当中的内容</span><br><span class="line">这个操作其实是违规的</span><br><span class="line">我们就不应该</span><br><span class="line">按照这样的方式来访问顺序表</span><br><span class="line">因为顺序表当中不是定义了一个变量叫length</span><br><span class="line">length表示的是他当前的长度</span><br><span class="line">所以当我们在访问顺序表当中各个数据元素的时候</span><br><span class="line">不应该是从第一个元素访问到最后一个元素</span><br><span class="line">而应该是访问到顺序表当中</span><br><span class="line">当前实际已经存储的最后一个元素</span><br><span class="line">由于刚开始length的值是0</span><br><span class="line">所以如果用这种稍微正规一些的写法的话</span><br><span class="line">那么这个for循环当中的语句是不会被执行的</span><br><span class="line">所以</span><br><span class="line">为什么说我们可以省略</span><br><span class="line">给各个数据元素设置默认值这一步</span><br><span class="line">那是因为如果按正常的访问方式的话</span><br><span class="line">那么其实并不应该访问大于顺序表实际长度的那些数据元素</span><br><span class="line">当然</span><br><span class="line">其实更好的做法应该是使用基本操作来访问各个数据元素</span><br><span class="line">我们提到过</span><br><span class="line">实现一个基本操作叫GetElem(L,i)</span><br><span class="line">这个基本操作实现的事情是把L这个线性表当中</span><br><span class="line">的第i个元素给取出来</span><br><span class="line">所以使用基本操作来访问是最好的一种方式</span><br><span class="line">那这个地方想让大家重点体会的是</span><br><span class="line">这个脏数据是怎么回事</span><br><span class="line">既然内存当中会有脏数据</span><br><span class="line">所以当我们声明length这个变量的时候</span><br><span class="line">length的初始值把它设为0这一步</span><br><span class="line">是不是就肯定不能省略</span><br><span class="line">因为你无法预知</span><br><span class="line">在这小片的内存区域内之前存放的</span><br><span class="line">到底是什么数据</span><br><span class="line">那有的同学可能会说</span><br><span class="line">C语言不是会自动给int型</span><br><span class="line">的变量设置一个默认初始值为0吗</span><br><span class="line">那其实这个默认初始值设置为多少</span><br><span class="line">这是编译器做的事情</span><br><span class="line">如果换一个C语言的编译器</span><br><span class="line">也许他就不会帮你做这种初始化的工作</span><br><span class="line">所以当我们在声明一个顺序表的时候</span><br><span class="line">刚开始把他的length设为0这一步是必须做的</span><br><span class="line">那么通过刚才的代码</span><br><span class="line">相信大家对静态分配方式已经有了更深入的了解</span><br><span class="line">那么通过刚才的代码</span><br><span class="line">相信大家对顺序表的静态分配这种实现方式</span><br><span class="line">已经有了更深入的理解</span><br><span class="line">那这种实现方式的精髓在这个地方</span><br><span class="line">就是要定义一个静态的数组来存放你的数据元素</span><br></pre></td></tr></table></figure>

<h1 id="存满了怎么办"><a href="#存满了怎么办" class="headerlink" title="存满了怎么办"></a>存满了怎么办</h1><p><img src="https://inews.gtimg.com/newsapp_ls/0/13898161089/0.png" alt="存满了怎么办"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果&quot;数组&quot;存满了怎么办？</span><br><span class="line">可以放弃治疗，顺序表的表长刚开始确定后就无法更改（存储空间是静态的）</span><br><span class="line">那既然这样的话</span><br><span class="line">你刚开始申请一大片连续的存储空间</span><br><span class="line">把这个数组的长度设大一点不就行了吗</span><br><span class="line">那如果采用这种方式的话</span><br><span class="line">存在的问题就是很浪费</span><br><span class="line">假如数组长度为10000</span><br><span class="line">最后只用了10个长度</span><br><span class="line">那这样就很浪费资源</span><br><span class="line">那从这个地方大家应该能够体会到静态分配</span><br><span class="line">这种实现方式</span><br><span class="line">它存在一定的局限性</span><br><span class="line">主要就是这个顺序表的大小</span><br><span class="line">容量</span><br><span class="line">它是不可调的</span><br><span class="line">无法更改</span><br><span class="line">那如果要让顺序表的大小可变的话</span><br><span class="line">那我们可以采用动态分配的这种实现方式</span><br></pre></td></tr></table></figure>

<h1 id="顺序表的实现–动态分配"><a href="#顺序表的实现–动态分配" class="headerlink" title="顺序表的实现–动态分配"></a>顺序表的实现–动态分配</h1><p><img src="https://inews.gtimg.com/newsapp_ls/0/13898304053/0.png" alt="动态分配"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果采用动态分配来实现顺序表的话</span><br><span class="line">那么我们需要定义一个指针</span><br><span class="line">这个指针是只想了顺序表当中的第一个数据元素</span><br><span class="line">由于动态分配方式当中顺序表的容量大小</span><br><span class="line">是可以变的</span><br><span class="line">所以我们需要在这增加一个变量</span><br><span class="line">叫MaxSize</span><br><span class="line">表示顺序表的最大容量是多少</span><br><span class="line">除了最大容量之外</span><br><span class="line">当然也需要用length这个变量来记录顺序表</span><br><span class="line">当前长度</span><br><span class="line">也就说</span><br><span class="line">此时顺序表当中实际上已经存放了多少个数据元素</span><br><span class="line">C语言中提供了malloc和free这两个函数</span><br><span class="line">来分别实现动态的申请一片内存空间</span><br><span class="line">和释放一片内存空间</span><br><span class="line">malloc这个函数他所实现的事情是会申请一整片</span><br><span class="line">的连续的内存空间</span><br><span class="line">那这一整片的内存空间</span><br><span class="line">它肯定有个起始的内存地址</span><br><span class="line">所以 malloc函数执行结束之后</span><br><span class="line">他会 return 会返回一个指向这一整片</span><br><span class="line">存储空间开始地址的这个指针</span><br><span class="line">由于这一片存储空间是用于存放我们一个一个的数据元素的</span><br><span class="line">所以在这个地方</span><br><span class="line">我们需要把malloc函数返回的这个指针</span><br><span class="line">把它强制转换成你所定义的这个数据元素的</span><br><span class="line">数据类型所对应的指针</span><br><span class="line">比如</span><br><span class="line">如果你的顺序表示用于存放整数的</span><br><span class="line">也就说数据元素是int类型</span><br><span class="line">当你在使用malloc函数的时候</span><br><span class="line">就需要把这个ElemType把它换成int</span><br><span class="line">那malloc函数返回的这个内存的起始地址的这个指针</span><br><span class="line">我们需要把它赋给顺序表当中的data这个指针变量</span><br><span class="line">也就是说data这个指针是指向了这一整片存储空间</span><br><span class="line">的起始地址</span><br><span class="line">第二个需要注意的点</span><br><span class="line">既然malloc函数是申请一整片的连续存储空间</span><br><span class="line">那么你到底要申请多大的空间呢</span><br><span class="line">这个是由malloc函数的这个参数所知名的</span><br><span class="line">左边这个sizeOf(ElemType)之前我们讲过</span><br><span class="line">这个部分的式子</span><br><span class="line">得到的结果就是你的一个数据元素</span><br><span class="line">它所占存储空间的大小</span><br><span class="line">如果你的数据元素是int类型</span><br><span class="line">那么它所占大小就应该是四个字节</span><br><span class="line">然后第二个部分</span><br><span class="line">他要* InitSize 指的是</span><br><span class="line">这个顺序表他刚开始初始的长度</span><br><span class="line">那在这</span><br><span class="line">我们把它定义为</span><br><span class="line">一个常量是10</span><br><span class="line">那这个式子得到的结果就是</span><br><span class="line">你的int型变量所需要的存储空间大小</span><br><span class="line">那这就是malloc函数</span><br></pre></td></tr></table></figure>

<p><img src="https://inews.gtimg.com/newsapp_ls/0/13898528964/0.png" alt="顺序表的实现"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用上图的代码看一下这个顺序表的动态分配</span><br><span class="line">在背后发生了一些什么事情</span><br><span class="line">这个顺序表的数据元素类型是int类型</span><br><span class="line">那data这个指针</span><br><span class="line">指向了顺序表当中的第一个数据元素</span><br><span class="line">然后我们实现了一个函数InitList</span><br><span class="line">用于初始化一个动态分配方式实现的顺序表</span><br><span class="line">然后再实现一个函数</span><br><span class="line">用于动态的增加这个顺序表的长度</span><br><span class="line">然后我们在main函数里调用这些相关的操作</span><br><span class="line">需要注意的是InitList这里面使用到了malloc函数</span><br><span class="line">然后增加动态数组的长度</span><br><span class="line">或者说增加顺序表的长度</span><br><span class="line">这个函数里边又使用到了malloc和free</span><br><span class="line">这两个函数</span><br><span class="line">malloc和free包含在了这个头文件当中</span><br><span class="line">所以如果大家自己写代码</span><br><span class="line">需要使用到malloc和free这两个函数的话</span><br><span class="line">需要include这个头文件</span><br><span class="line">那接下来 </span><br><span class="line">来分析一下这段代码运行的过程</span><br><span class="line">首先</span><br><span class="line">在main函数里声明一个顺序表</span><br><span class="line">执行完这一句代码之后</span><br><span class="line">其实计算机会在内存当中开辟这样的一小片空间</span><br><span class="line">这片存储空间存放了这个顺序表当中的这几个变量</span><br><span class="line">maxsize表示的是顺序表的最大容量</span><br><span class="line">然后length表示的是当前这个顺序表当中有几个数据元素</span><br><span class="line">而data它是一个指针类型的变量</span><br><span class="line">接下来会执行我们定义的这个基本操作</span><br><span class="line">也就是初始化顺序表</span><br><span class="line">在这个函数的第一句</span><br><span class="line">会调用malloc函数</span><br><span class="line">malloc函数会申请一整片连续的存储空间</span><br><span class="line">这片存储空间的大小应该是</span><br><span class="line">能够存的下10个int类型数据的这样的一个大小</span><br><span class="line">接下来malloc函数会返回一个指针</span><br><span class="line">我们把这个指针的类型把它转换成和这儿相统一的指针类型</span><br><span class="line">然后把malloc返回的这些指针的值</span><br><span class="line">把他赋给data</span><br><span class="line">之前我们说过</span><br><span class="line">malloc返回的是这一整片连续存储空间的起始地址</span><br><span class="line">所以在执行完这句代码之后</span><br><span class="line">data这个指针</span><br><span class="line">应该是指向了这个位置</span><br><span class="line">再次强调</span><br><span class="line">需要把malloc返回的指针把他</span><br><span class="line">转换成</span><br><span class="line">我们这定义的同类型的指针</span><br><span class="line">除了data之外</span><br><span class="line">我们还需要把顺序表的当前长度length</span><br><span class="line">设为0</span><br><span class="line">然后把顺序表的最大容量</span><br><span class="line">把它设置为这个初始值</span><br><span class="line">和这个地方保持一致</span><br><span class="line">好 那接下来我们省略了一些代码</span><br><span class="line">可以往这个顺序表中插入数据</span><br><span class="line">把它都给填满</span><br><span class="line">那此时length的值</span><br><span class="line">就应该是10</span><br><span class="line">MaxSize的值</span><br><span class="line">也应该是10</span><br><span class="line">再往后如果还想存入一些数据的话</span><br><span class="line">这个顺序表的大小是不是就不够了</span><br><span class="line">所以在这个地方我们实现了一个函数动态的</span><br><span class="line">增加这个数组的长度</span><br><span class="line">或者增加这个顺序表的长度</span><br><span class="line">那这儿有个参数len</span><br><span class="line">这个参数表示的是我需要拓展多少的长度</span><br><span class="line">那我们这传入5</span><br><span class="line">也就说想要让这个顺序表可以再多存5个元素</span><br><span class="line">第一句我们定义了一个指针P</span><br><span class="line">把顺序表的data指针的值赋给了这个p</span><br><span class="line">也就是说p和data是指向了同一个位置</span><br><span class="line">接下来要调用malloc函数</span><br><span class="line">malloc函数所做的事情是申请一整片的内存空间</span><br><span class="line">这片空间的大小</span><br><span class="line">应该能够存的下当前的所有的这些</span><br><span class="line">数据元素</span><br><span class="line">同时还可以再多存五个新的数据元素</span><br><span class="line">当然 这还需要乘以每一个数据元素的大小</span><br><span class="line">sizeOf(Elem Type)也就是需要</span><br><span class="line">使用sizeOf这个关键字</span><br><span class="line">这样的话就意味着开辟了一片新的空间</span><br><span class="line">这片空间可以存15个元素</span><br><span class="line">以前只能存10个</span><br><span class="line">现在可以多存5个</span><br><span class="line">由于malloc</span><br><span class="line">他申请的内存空间是另一片</span><br><span class="line">内存空间</span><br><span class="line">而这篇内存空间此时并没没有往里面存任何数据</span><br><span class="line">接下来</span><br><span class="line">我们让data这个指针</span><br><span class="line">指向新的这一片空间</span><br><span class="line">然后再用for循环</span><br><span class="line">把以前p指向的内存空间的这些数据的值</span><br><span class="line">把他挪过来给</span><br><span class="line">然后由于顺序表的最大容量增加了这么多</span><br><span class="line">所以我们需要 </span><br><span class="line">把Maxsize的值把它加五</span><br><span class="line">也就是变成了15</span><br><span class="line">最后要做的一件事情就是调用free函数</span><br><span class="line">free函数会把P这个指针所指向的这一整片</span><br><span class="line">的存储空间给释放掉</span><br><span class="line">把它归还给系统 </span><br></pre></td></tr></table></figure>

<h1 id="顺序表的特点"><a href="#顺序表的特点" class="headerlink" title="顺序表的特点"></a>顺序表的特点</h1><p><img src="https://inews.gtimg.com/newsapp_ls/0/13900890579/0.png" alt="顺序表的特点"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">顺序表的特点:</span><br><span class="line">1.随机访问，也就说可以在常数级的时间复杂度内就可以找到第i个元素。原因就在于，顺序表当中各个数据元素的存放位置是连续存放的，因此只需要知道第一个数据元素的存放地址，那么后面这些数据元素的存放地址就可以马上算出来，所以可以在常数级的时间内找到第i个元素。那对应的代码其实就是我们用数组，然后给一个数组下标就可以直接找到第i个元素，其实在系统在背后还做了计算地址等等这一系列的操作。</span><br><span class="line">2.顺序表的第二个特点是存储密度高，每个存储节点只存储数据元素本身，但如果我们采用链式存储的话，除了存储数据元素本身之外，还需要耗费一定的存储空间来存放指针这样的信息。</span><br><span class="line">3.第三个特点是拓展容量不方便。静态分配这种方式直接就是不可以扩展容量，而动态分配这种方式虽然可以拓展容量。但是由于我们需要把数据复制到新的区域，所以其实时间复杂度也比较高</span><br><span class="line">4.第四个特点是插入、删除操作不方便，需要移动大量的元素，那这个特性我们会在下个小节当中结合具体的代码。</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="https://inews.gtimg.com/newsapp_ls/0/13900921004/0.png" alt="总结"></p>
]]></content>
      <tags>
        <tag>数据结构和算法</tag>
      </tags>
  </entry>
  <entry>
    <title>2.3-顺序表的基本操作C语言实现</title>
    <url>/2021/08/23/ch2.3-%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9CC%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="1-插入"><a href="#1-插入" class="headerlink" title="1.插入"></a>1.插入</h1><p><img src="https://inews.gtimg.com/newsapp_ls/0/13910280382/0.png" alt="插入"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">假设我们用静态分配方式实现了一个顺序表</span><br><span class="line">这个顺序表原来总共可以存十个元素</span><br><span class="line">假设某一个时刻</span><br><span class="line">这个数据结构当中包含了这样的5个数据元素</span><br><span class="line">那这些数据元素在内存当中就应该是这么存放的</span><br><span class="line">会占用顺序表的前五个位置</span><br><span class="line">那由于存放了5个顺序元素</span><br><span class="line">所以此时这个顺序表的长度应该是5</span><br><span class="line">此时如果要进行一个插入操作</span><br><span class="line">往这个线性表的第三个位置插入一个数据元素C的话</span><br><span class="line">那逻辑上来看</span><br><span class="line">进行这个操作自会后</span><br><span class="line">c就变成了b的后继节点</span><br><span class="line">d的前驱节点</span><br><span class="line">由于我们的这个线性表是用顺序表的方式实现的</span><br><span class="line">所以需要用存储位置上的相邻关系来体现</span><br><span class="line">这种数据元素之间的逻辑关系</span><br><span class="line">因此 如果在第三个位置插入元素c的话</span><br><span class="line">那么需要把后面的这三个元素都依次往后移</span><br><span class="line">然后再把c这个元素插入到第三个位置</span><br><span class="line">所以如果我们在顺序表的第i个位置插入一个元素的话</span><br><span class="line">这个顺序表当中第i个位置以及第i个位置</span><br><span class="line">以后的那些数据元素都得往后移一位</span><br><span class="line">接下来我们看看代码实现</span><br></pre></td></tr></table></figure>

<p> <img src="https://inews.gtimg.com/newsapp_ls/0/13910331972/0.png" alt="顺序表的插入"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">假设此时存入了12456这样的几个数据元素</span><br><span class="line">所以此时顺序表的长度应该是5</span><br><span class="line">所以接下来会调用我们这儿的这个函数来</span><br><span class="line">实现插入操作</span><br><span class="line">这个函数时间的事情是往第3个位置插入数据元素3</span><br><span class="line">那之前我们说过</span><br><span class="line">首先要把后续的这些数据元素都分别往后移</span><br><span class="line">所以在这我们使用了一个for循环</span><br><span class="line">刚开始j这个变量的值等于顺序表的长度</span><br><span class="line">也就是等于5</span><br><span class="line">只要j&gt;&#x3D;i也就是他大于等于3的话</span><br><span class="line">这个循环就会一直继续</span><br><span class="line">每一轮循环之后j的值会减1</span><br><span class="line">第一次执行这个循环里面的语句的时候</span><br><span class="line">j的值是5对吧</span><br><span class="line">所以这句代码做的事情是把data[4]的数据</span><br><span class="line">把它放到data[5]这个位置</span><br><span class="line">也就是把这个数据元素往后挪一位</span><br><span class="line">...</span><br><span class="line">for循环最后的效果就是</span><br><span class="line">把data[4]里的数据放到data[5]里面</span><br><span class="line">把data[3]里的数据放到data[4]里面</span><br><span class="line">把data[2]里的数据放到data[3]里面</span><br><span class="line">循环结束之后</span><br><span class="line">我们可以往第3个位置插入我们的数据元素</span><br><span class="line">也就是3这个数字</span><br><span class="line">这个地方我们大家一定要注意</span><br><span class="line">函数参数i表示的是这个线性表的为序</span><br><span class="line">它是从1开始的</span><br><span class="line">实际对应我们的数组的时候</span><br><span class="line">数组的下标是从0开始的</span><br><span class="line">所以我们要把数据元素放在第3个位置</span><br><span class="line">实际上应该是要把他放在数组下标为2</span><br><span class="line">的那个地方</span><br><span class="line">写代码的时候一定要注意</span><br><span class="line">接下来由于多了一个数据元素</span><br><span class="line">所以顺序表的长度length就应该加1</span><br><span class="line">到此为止我们就是实现了插入这个基本操作</span><br><span class="line">不过要提醒大家的是</span><br><span class="line">如果你的队友</span><br><span class="line">在使用你给他定义的这个函数的时候</span><br><span class="line">他传入的参数出现了一些问题的话</span><br><span class="line">那么这段代码的运行就会出错</span><br><span class="line">当这段代码运行完了之后</span><br><span class="line">3这个数据元素会被插到8这个位置</span><br><span class="line">但是中间这个地方空了</span><br><span class="line">我们的顺序表当中</span><br><span class="line">他的各个数据元素一定是必须一个一个相邻的存放的</span><br><span class="line">所以你看</span><br><span class="line">这段代码</span><br><span class="line">其实他是不够健壮的</span><br><span class="line">怎么避免这个问题呢</span><br><span class="line">很简单</span><br><span class="line">我们只需要一个条件判断的语句</span><br><span class="line">可以判断一下这个i的值是否合法</span><br><span class="line">那i的合法值应该是</span><br><span class="line">从1开始到length+1结束</span><br></pre></td></tr></table></figure>

<p><img src="https://inews.gtimg.com/newsapp_ls/0/13910479937/0.png" alt="插入"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">刚开始需要先进行i这个值的合法性判断</span><br><span class="line">如果i这个值小于1或者大于length+1的话</span><br><span class="line">说明此次他想要插入的这个位置本身就不合法</span><br><span class="line">那在这种情况下</span><br><span class="line">给他一个false</span><br><span class="line">那这样的话</span><br><span class="line">这个函数的调用者在接收到false</span><br><span class="line">这个返回值的时候</span><br><span class="line">他就可以知道此次调用失败了</span><br><span class="line">然后他就可以根据你的这个反馈</span><br><span class="line">去检查他自己的代码是不是出现问题了</span><br><span class="line">如果此时这个顺序表已经存满了</span><br><span class="line">那在这种情况下</span><br><span class="line">这次的插入操作也应该是失败的</span><br><span class="line">所以也需要返回一个false</span><br><span class="line">那这两个条件都满足之后</span><br><span class="line">才可以进行刚才我们说的那一系列的操作</span><br><span class="line">就是先把后续的那些元素都依次往后移</span><br><span class="line">最后再把此次想要插入的那个元素插入到</span><br><span class="line">相应的位置</span><br><span class="line">在插入成功之后</span><br><span class="line">再给调用者返回一个true</span><br><span class="line">那用这样的方式定义一个插入操作</span><br><span class="line">不仅使用者使用起来很爽</span><br><span class="line">同时代码也有健壮性</span><br><span class="line">那这么写的代码就是好代码</span><br></pre></td></tr></table></figure>

<h1 id="2-插入C语言代码实现"><a href="#2-插入C语言代码实现" class="headerlink" title="2.插入C语言代码实现"></a>2.插入C语言代码实现</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#define MaxSize 10   &#x2F;&#x2F;定义最大长度</span><br><span class="line">typedef struct &#123;</span><br><span class="line">    int data[MaxSize];&#x2F;&#x2F;用静态的“数组”存放数据元素</span><br><span class="line">    int length;&#x2F;&#x2F;顺序表的当前长度</span><br><span class="line">&#125;Sqlist;  &#x2F;&#x2F;顺序表的类型定义</span><br><span class="line">&#x2F;&#x2F;初始化一个顺序表</span><br><span class="line">&#x2F;&#x2F;to do</span><br><span class="line">void InitList(Sqlist &amp;L)&#123;</span><br><span class="line"> L.length&#x3D;5;</span><br><span class="line"> L.data[0]&#x3D;1;</span><br><span class="line"> L.data[1]&#x3D;2;</span><br><span class="line"> L.data[2]&#x3D;3;</span><br><span class="line"> L.data[3]&#x3D;4;</span><br><span class="line"> L.data[4]&#x3D;5;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;在指定位置新增一个元素,i是位序,e是插入的值</span><br><span class="line">bool ListInsert(Sqlist &amp;L,int i,int e)&#123;</span><br><span class="line">    if(i&lt;1||i&gt;L.length+1)&#123;&#x2F;&#x2F;判断i的范围是否有效</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    if(L.length&gt;MaxSize)&#123;&#x2F;&#x2F;存储空间已满,不能插入</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    for (int j &#x3D; L.length; j &gt;&#x3D;i ; j--)  &#x2F;&#x2F;将第i个元素及之后的元素后移</span><br><span class="line">    &#123;</span><br><span class="line">        L.data[j] &#x3D; L.data[j-1];</span><br><span class="line">    &#125;</span><br><span class="line">    L.data[i-1]&#x3D;e; &#x2F;&#x2F;在位置i处放入e</span><br><span class="line">    L.length++;</span><br><span class="line">    return  true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;打印一个顺序表</span><br><span class="line">void print(Sqlist L)&#123;</span><br><span class="line">    for(int i &#x3D; 0; i&lt;L.length; i ++)&#123;</span><br><span class="line">        printf(&quot;data[%d]&#x3D;%d\n&quot;,i,L.data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int  main()&#123;</span><br><span class="line">   Sqlist L; &#x2F;&#x2F;声明一个顺序表</span><br><span class="line">   InitList(L);&#x2F;&#x2F;初始化一个顺序表</span><br><span class="line">   print(L);&#x2F;&#x2F;打印一个顺序表</span><br><span class="line">   printf(&quot;##########在第3个位序上增加一个2\n&quot;);</span><br><span class="line">   if(ListInsert(L,3,2))&#123;</span><br><span class="line">       printf(&quot;#########打印增加元素后的顺序表 \n&quot;);</span><br><span class="line">       print(L);</span><br><span class="line">   &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-删除"><a href="#3-删除" class="headerlink" title="3.删除"></a>3.删除</h1><p><img src="https://inews.gtimg.com/newsapp_ls/0/13913174608/0.png" alt="删除"></p>
<p><img src="https://files.catbox.moe/aifohl.gif" alt="如图"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果要删除一个元素的话</span><br><span class="line">那么我们需要把这个元素后面的那些元素</span><br><span class="line">都依次往前移一位</span><br><span class="line">同时要把length的值-1</span><br><span class="line">这个删除操作当中有3个参数</span><br><span class="line">第一个是要删除哪个顺序表</span><br><span class="line">第二个是要删除这个顺序表当中的第几个数据元素</span><br><span class="line">第三个参数它是一个引用型的参数</span><br><span class="line">用这个参数把此次删除的数据元素返回</span><br><span class="line">假设</span><br><span class="line">通过之前的一系列执行</span><br><span class="line">已经建立了一个这样的顺序表</span><br><span class="line">它里边共存了六个数据元素</span><br><span class="line">如果此时</span><br><span class="line">想使用这个基本操作</span><br><span class="line">删除一个数据元素的话</span><br><span class="line">首先需要定义一个和你的顺序表当中</span><br><span class="line">存储的这些数据元素同类型的一个变量</span><br><span class="line">那我们的这个顺序表当中</span><br><span class="line">存储的数据元素类型</span><br><span class="line">都是int类型</span><br><span class="line">所以我们定一个int型的变量e</span><br><span class="line">并且给他设置一个初始值 -1</span><br><span class="line">声名了这个变量e</span><br><span class="line">就意味着内存当中会开辟一小片的空间</span><br><span class="line">用于存放e这个变量相关的数据</span><br><span class="line">由于我们给他设了一个初始值</span><br><span class="line">所以这片区域里边存储的数据内容</span><br><span class="line">是-1这个值</span><br><span class="line">接下来调用删除这个操作</span><br><span class="line">要删除L这个顺序表当中的第三个元素</span><br><span class="line">然后把此次删除的那个元素用e这个变量返回</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">因为此时可以被删除的数据元素肯定是已经存在的</span><br><span class="line">这些数据元素当中的某一个</span><br><span class="line">所以如果i的值落在了这个区间之外的话</span><br><span class="line">就应该给他return一个false</span><br><span class="line">也就是给这个函数的使用者一个反馈</span><br><span class="line">告诉他你的这个删除操作失败了</span><br><span class="line">所以在这个地方</span><br><span class="line">我们用一个if语句来接收这个函数的返回值</span><br><span class="line">如果此次返回了false的话</span><br><span class="line">说明我们的这次调用就已经调用失败了</span><br><span class="line">那由于此时想要删除的是第三个元素</span><br><span class="line">所以这个i的值是合法的</span><br><span class="line">因此接下来会执行下面的这句</span><br><span class="line">这句代码会把此次要删除的这个数据元素的值</span><br><span class="line">把它复制到e</span><br><span class="line">这个变量所对应的这个内存区域当中</span><br><span class="line">好 接下来就是执行一个for循环</span><br><span class="line">把后面的这些数据元素依次往前移一位</span><br><span class="line">最后length的值减一</span><br><span class="line">也就是6变成了5</span><br><span class="line">那由于删除操作成功了</span><br><span class="line">所以会给函数的调用者返回一个true</span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>数据结构和算法</tag>
      </tags>
  </entry>
  <entry>
    <title>2.4-奈氏准则和香农定理</title>
    <url>/2021/08/30/ch2.4-%E5%A5%88%E6%B0%8F%E5%87%86%E5%88%99%E5%92%8C%E9%A6%99%E5%86%9C%E5%AE%9A%E7%90%86/</url>
    <content><![CDATA[<h1 id="1-失真"><a href="#1-失真" class="headerlink" title="1.失真"></a>1.失真</h1><p><img src="https://inews.gtimg.com/newsapp_ls/0/13932569692/0.png" alt="失真"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在计算机网络当中</span><br><span class="line">主要指的信号</span><br><span class="line">它和本身传的时候</span><br><span class="line">也就是说在开始的时候</span><br><span class="line">信号它发生了一些扭曲的和变化</span><br><span class="line">那么来看这样两种情况</span><br><span class="line">首先</span><br><span class="line">我们在发送端发送这样一个数据的数据波形</span><br><span class="line">在现实当中</span><br><span class="line">它肯定会有一些带宽受限</span><br><span class="line">所以有一些高频的信号就传不过去了</span><br><span class="line">然后还有噪声和干扰</span><br><span class="line">所以就会导致信号最后跟刚开始发送的不太一样</span><br><span class="line">就会有一些磨损</span><br><span class="line">有一些衰减</span><br><span class="line">但是可以看到</span><br><span class="line">即使是这样一个扭曲的波形</span><br><span class="line">我们还是可以根据它</span><br><span class="line">来识别出或者说读出我们最开始发送的数据</span><br><span class="line">是什么样的一个规律</span><br><span class="line">一种情况</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">另一种情况</span><br><span class="line">还是发送一样的信号波形</span><br><span class="line">一样的数字信号</span><br><span class="line">经历了这样一个现实当中信道的干扰</span><br><span class="line">噪声</span><br><span class="line">带宽受限等影响之后</span><br><span class="line">它在接收端接收到的波形就是这样了</span><br><span class="line">可以看到这样一个波形</span><br><span class="line">我们就很难再识别出来</span><br><span class="line">我们发送信号</span><br><span class="line">究竟发送的数据是什么样的</span><br><span class="line">这两种情况</span><br><span class="line">实际上都叫做失真</span><br><span class="line">不过第一种它是有失真</span><br><span class="line">但是可以在接收端识别</span><br><span class="line">第二种情况 这个时候就是失真大</span><br><span class="line">在接收端无法识别</span><br><span class="line">因为它失真已经非常严重了</span><br><span class="line">在接收端没有办法判断发的这个源码</span><br><span class="line">究竟是0还是1</span><br><span class="line">对于这种失真的现象</span><br><span class="line">受影响的有几个因素</span><br><span class="line">1.就是码元传输速率</span><br><span class="line">码元传输速率越快的话</span><br><span class="line">也就会导致信号失真的程度就越严重</span><br><span class="line">2.就是信号传输距离</span><br><span class="line">距离越远</span><br><span class="line">衰减就越久</span><br><span class="line">干扰也就越久</span><br><span class="line">因此对于信号的影响也很大</span><br><span class="line">3.第三种就是噪声干扰</span><br><span class="line">噪声干扰越多</span><br><span class="line">信号就越容易失真</span><br><span class="line">4.第四种就是传输媒体质量</span><br><span class="line">传输媒体的质量越差 </span><br><span class="line">在接收端接收到的这个波形</span><br><span class="line">的失真自然也就越严重</span><br><span class="line">前面三种是正相关</span><br><span class="line">后面这样是负相关的关系</span><br><span class="line">好 我们讲了失真之后</span><br><span class="line">有一个非常重要的失真现象</span><br><span class="line">要引申出奈氏准则的这样一个现象</span><br><span class="line">就叫做码间串扰</span><br></pre></td></tr></table></figure>

<h1 id="2-失真的一种现象-码间串扰"><a href="#2-失真的一种现象-码间串扰" class="headerlink" title="2.失真的一种现象-码间串扰"></a>2.失真的一种现象-码间串扰</h1><p><img src="https://inews.gtimg.com/newsapp_ls/0/13932586924/0.png" alt="码间串扰"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">假如说我们在传送数据的时候</span><br><span class="line">我们是通过电话入网</span><br><span class="line">我们知道这个电话线上面是模拟信道</span><br><span class="line">所以在模拟信道传输一定要使用模拟信号</span><br><span class="line">那我们就要把我们发送的一些数字信号进行一个</span><br><span class="line">调制的过程</span><br><span class="line">可以看到</span><br><span class="line">我们可以调制成很多信号</span><br><span class="line">在信道的实际传输过程当中</span><br><span class="line">信道上其实布满了各种各样频率的信号</span><br><span class="line">可以看到这种比较宽的</span><br><span class="line">比较胖的</span><br><span class="line">就是低频的信号</span><br><span class="line">稍微低频一点</span><br><span class="line">如果是相同时间内呢</span><br><span class="line">它震动次数要比下面的次数都少</span><br><span class="line">所以它叫低频</span><br><span class="line">再往下</span><br><span class="line">这个稍微快一点</span><br><span class="line">它的频率是300hz</span><br><span class="line">也比200hz要更快</span><br><span class="line">这个hz</span><br><span class="line">其实的意思是一秒当中可以震动的次数</span><br><span class="line">这一种震动的就更快了</span><br><span class="line">它的频率是3300HZ</span><br><span class="line">最后这一种最快</span><br><span class="line">是4000HZ</span><br><span class="line">对应左边的这些数字</span><br><span class="line">其实都叫做信号的带宽</span><br><span class="line">它对应的是这个信号的带宽</span><br><span class="line">300HZ对应的是这个信号的带宽</span><br><span class="line">这四种信号并不全都可以通过电话线进行传播</span><br><span class="line">上面的这种200hz</span><br><span class="line">以及最下面400hz</span><br><span class="line">是不能通过的</span><br><span class="line">而中间的才可以通过</span><br><span class="line">那么中间可以通过的最高和最低频率之差</span><br><span class="line">就是信道带宽</span><br><span class="line">在这个例子里面</span><br><span class="line">最高可以通过的频率是3300HZ</span><br><span class="line">最低可以通过的频率是300HZ</span><br><span class="line">因此信道带宽就是3000hz</span><br><span class="line">我们可以看到 上面这个200hz不能通过</span><br><span class="line">原因是什么呢</span><br><span class="line">所以它在这样非常复杂的电话线上传播的过程当中</span><br><span class="line">非常容易受到衰减</span><br><span class="line">受到损耗</span><br><span class="line">所以最后导致</span><br><span class="line">它可能都衰减没了</span><br><span class="line">因此它就不能通过</span><br><span class="line">那4000hz为什么呢</span><br><span class="line">4000hz其实就是要讲的码间串扰的问题</span><br><span class="line">因为我们这个4000hz的信号</span><br><span class="line">它震动的次数或者说震动的频率和速度太快了</span><br><span class="line">震动的频率太快了</span><br><span class="line">就会导致接收端</span><br><span class="line">在接收的时候</span><br><span class="line">区分不出来它们波形之间的差异</span><br><span class="line">所以就会导致码间串扰的现象</span><br><span class="line">码间串扰就是指</span><br><span class="line">接收端收到的信号波形失去了码元</span><br><span class="line">之间清晰界限的</span><br><span class="line">这样一个现象</span><br><span class="line">就叫做码间串扰</span><br><span class="line">信号震动的频率越快的话</span><br><span class="line">就说明码元的传输速率就越快</span><br><span class="line">因为信号和码元其实是一一对应的</span><br><span class="line">一种码元对应一种信号</span><br><span class="line">因此</span><br><span class="line">信号变化的速度快</span><br><span class="line">码元变化的速度自然也就很快</span><br><span class="line">所以码元传输速率和信号的频率</span><br><span class="line">其实是对应的关系</span><br><span class="line">计算机网络当中的码间串扰就是指</span><br><span class="line">码元的传输速率太快了</span><br><span class="line">导致码元之间界限就不清楚</span><br><span class="line">分不清0还是1</span><br><span class="line">在实际生活当中</span><br><span class="line">也有这样的例子</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/lq83dc.gif" alt="失真"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">比如说有一群人要从你面前经过</span><br><span class="line">你要挨个查数</span><br><span class="line">你要查总共在你旁边经过的人数</span><br><span class="line">那就让这些人开始走</span><br><span class="line">好 我们看到这些人非常的多</span><br><span class="line">可能在接收端</span><br><span class="line">也就是在你这边</span><br><span class="line">查不出来了</span><br><span class="line">已经查到充血了还是</span><br><span class="line">查不出来这些人是多少</span><br><span class="line">因为他们实在走的太快了</span><br><span class="line">所以导致他们每个人之间的距离就非常的近</span><br><span class="line">因此 我们就很难区别出这个人和下一个人之间的距离</span><br><span class="line">导致都像是重影了一样</span><br><span class="line">像一条影子一般这样滑过去</span><br><span class="line">这其实就是码间串扰的现象</span><br><span class="line">就是说码元</span><br><span class="line">它们因为传的太快了</span><br><span class="line">码元的传输速率过快</span><br><span class="line">导致码元在接收端的时候距离过近</span><br><span class="line">码元之间的界限就不清楚</span><br><span class="line">这就是码间串扰</span><br><span class="line">为了解决这个问题</span><br><span class="line">就出现了一个非常棒的准则</span><br><span class="line">就叫做奈氏准则</span><br><span class="line">他也叫奈奎斯特定理</span><br><span class="line">奈氏准则</span><br><span class="line">就是由奈奎斯特在1924年推导出来的一个定理</span><br></pre></td></tr></table></figure>

<h1 id="3-奈奎斯特定理"><a href="#3-奈奎斯特定理" class="headerlink" title="3.奈奎斯特定理"></a>3.奈奎斯特定理</h1><p><img src="https://files.catbox.moe/10j0yu.png" alt="奈奎斯特定理"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">奈氏准则</span><br><span class="line">就是由奈奎斯特在1924年推导出来的一个定理</span><br><span class="line">他规定的</span><br><span class="line">就是在理想低通条件下</span><br><span class="line">为了避免码间串扰</span><br><span class="line">定义极限码元传输速率是2W波特</span><br><span class="line">其中的W是信道带宽</span><br><span class="line">单位是赫兹</span><br><span class="line">理想低通的理想</span><br><span class="line">指的就是这个信道</span><br><span class="line">是没有噪声的</span><br><span class="line">没有电磁干扰的</span><br><span class="line">也就是说</span><br><span class="line">信号在传输的过程当中不会受到外界的影响</span><br><span class="line">低通</span><br><span class="line">指的就是带宽受限</span><br><span class="line">为什么要叫低通</span><br><span class="line">因为我们知道</span><br><span class="line">信道它是有带宽的</span><br><span class="line">带宽指的就是最高频率</span><br><span class="line">减去最低频率的差</span><br><span class="line">所有低于最高频率的信号</span><br><span class="line">都是可以通过的</span><br><span class="line">所以叫低通</span><br><span class="line">低于最高频率的可以通过</span><br><span class="line">就是低通的意思</span><br><span class="line">低通其实就是带宽受限的意思</span><br><span class="line">为了避免码间串扰</span><br><span class="line">就会有一个规定</span><br><span class="line">码元传输速率不可以是无穷大</span><br><span class="line">一定要有上限值</span><br><span class="line">而这个上限值</span><br><span class="line">奈氏给我们退出来了</span><br><span class="line">是2w</span><br><span class="line">其中的w是信道的带宽</span><br><span class="line">单位采用的是hz</span><br><span class="line">我们之前讲带宽的时候</span><br><span class="line">说在计算机网络</span><br><span class="line">通常使用带宽的单位都是bit&#x2F;s</span><br><span class="line">但是要注意的是</span><br><span class="line">在奈氏准则以及香农定理两个公式中</span><br><span class="line">带宽的单位都用的hz</span><br><span class="line">在做题的时候</span><br><span class="line">会直接给你信道带宽是多少hz</span><br><span class="line">这个时候你就可以想到要用奈氏准则</span><br><span class="line">或者是香农定理来求</span><br><span class="line">如果码元传输速率比较慢</span><br><span class="line">那我们的信号</span><br><span class="line">可以看到</span><br><span class="line">非常的清楚</span><br><span class="line">它都比较胖</span><br><span class="line">在接收端酒可以清楚的分辨出1010</span><br><span class="line">分辨出码元的界限</span><br><span class="line">识别出每一个码元</span><br><span class="line">但是码元传输速率如果过快的话</span><br><span class="line">太快了</span><br><span class="line">我们在接收端的时候根本分不清谁是谁</span><br><span class="line">它们彼此之间没有清楚的界限</span><br><span class="line">因此</span><br><span class="line">就达不到识别每一个码元的目的</span><br><span class="line">所以 规定码元传输速率的极限值为2w</span><br><span class="line">为了混淆大家</span><br><span class="line">我们还会再求一步极限数据率</span><br><span class="line">极限传输速率</span><br><span class="line">使得奈氏准则看上去好像和香农定理很想</span><br><span class="line">但是要注意它们俩侧重点不一样</span><br><span class="line">奈氏准则</span><br><span class="line">只是限制码元传输速率有上限</span><br><span class="line">但是香农定理才是真正的限制信息的传输速率</span><br><span class="line">也就是比特率有上限</span><br><span class="line">看上图</span><br><span class="line">V指的是有多少种码元</span><br><span class="line">或者说是码元的离散电平数目</span><br><span class="line">在题里面就会说</span><br><span class="line">信号当中有四种相位</span><br><span class="line">也就是说整个波形有四种</span><br><span class="line">四种波形的状态也就对应着四种码元</span><br><span class="line">直接带入v就可以了</span><br><span class="line">w就是刚才所说的带宽</span><br><span class="line">单位是hz</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/gc6dku.png" alt="奈氏准则"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">信号有16种变化</span><br><span class="line">因此就对应的是16种码元</span><br><span class="line">那就把16带入到v里面</span><br><span class="line">w是3000hz</span><br><span class="line">所以最大数据传输率如上图</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>计网</category>
      </categories>
      <tags>
        <tag>计网</tag>
      </tags>
  </entry>
  <entry>
    <title>ch2.4-链表的定义</title>
    <url>/2021/09/01/ch2.4-%E9%93%BE%E8%A1%A8%E7%9A%84%E5%AE%9A%E4%B9%89/</url>
    <content><![CDATA[<h1 id="1-用代码定义一个单链表"><a href="#1-用代码定义一个单链表" class="headerlink" title="1.用代码定义一个单链表"></a>1.用代码定义一个单链表</h1><p>  <img src="https://files.catbox.moe/xgtney.png" alt="单链表"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有了这个结构体的定义之后</span><br><span class="line">如果我们想要往这个单链表当中增加一个新的节点的话</span><br><span class="line">我们可以用malloc函数</span><br><span class="line">来申请一片存储这个节点的空间</span><br><span class="line">并且用指针p来接收malloc函数的返回值</span><br><span class="line">让它指向这个节点的起始位置</span><br><span class="line">教材中用typedef关键字</span><br><span class="line">用这个关键字可以把这个数据类型给重命名化</span><br><span class="line">加了关键字之后</span><br><span class="line">如图等价定义</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/loh2oz.png" alt="数据类型"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我们在这先定义了一个struct LNode</span><br><span class="line">然后单独写了这样的一个语句把它重命名</span><br><span class="line">但是教材里面用了一种更简洁的方式</span><br><span class="line">如下图</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/hkbpxv.png" alt="链表"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一段代码和第二段代码等价</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/0ps2fq.png" alt="单链表"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LNode *L</span><br><span class="line">和</span><br><span class="line">LinkList L</span><br><span class="line">这两种方式从效果上来看其实是一摸一样的</span><br><span class="line">只不过采用后面这种方式来声明头指针的话</span><br><span class="line">那代码可读性会更强一些</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/b66j2l.png" alt="链表"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">之后会学习一个基本操作</span><br><span class="line">GetElem 就是说把L这个链表当中的第i个</span><br><span class="line">结点给取出来了</span><br><span class="line">并且返回回来了</span><br><span class="line">注意在这段代码里面既使用了LNode *</span><br><span class="line">也使用了LinkList</span><br><span class="line">虽然这两种表示方式本质上它们是等价的</span><br><span class="line">但是在这个函数中 它最终要return</span><br><span class="line">要返回的是第i个结点</span><br><span class="line">所以它的这个返回值的类型</span><br><span class="line">它把它定义为了LNode*</span><br><span class="line">其实它是想强调说</span><br><span class="line">我返回的这是一个节点</span><br><span class="line">而括号里的参数LinkList L</span><br><span class="line">它想强调的是</span><br><span class="line">这是一个单链表</span><br><span class="line">我要从这个单链表当中找到它的第i个节点</span><br></pre></td></tr></table></figure>

<h1 id="2-不带头节点的单链表"><a href="#2-不带头节点的单链表" class="headerlink" title="2.不带头节点的单链表"></a>2.不带头节点的单链表</h1><p><img src="https://files.catbox.moe/cn5umx.png" alt="单链表"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">不带头节点的单链表</span><br><span class="line">首先</span><br><span class="line">声名一个指向单链表的指针L</span><br><span class="line">它是指向某一个节点的</span><br><span class="line">只不过这个地方我们想强调的是</span><br><span class="line">它指向的是一个单链表</span><br><span class="line">所以我们用linkList</span><br><span class="line">这个别名来定义</span><br><span class="line">只不过这地方我们想强调的是</span><br><span class="line">它指向的是一个单链表</span><br><span class="line">所以我们用LinkList这个别名来定义</span><br><span class="line">执行linkList L之后</span><br><span class="line">内存中会开辟一小片空间用于存放头指针L</span><br><span class="line">再往后执行我们这儿的初始化函数</span><br><span class="line">这个初始化函数很简单</span><br><span class="line">就是把L的值设为null</span><br><span class="line">用这样的方式表示当前它是一个空表</span><br><span class="line">做这个操作是为了防止这一小片内存当中</span><br><span class="line">以前有遗留的脏数据</span><br><span class="line">判断它是否为空的依据就是它的这个头指针L</span><br><span class="line">此时是不是等于NULL</span><br><span class="line">如果等于NULL的话</span><br><span class="line">说明此时是空的</span><br></pre></td></tr></table></figure>

<h1 id="3-带头节点的单链表"><a href="#3-带头节点的单链表" class="headerlink" title="3.带头节点的单链表"></a>3.带头节点的单链表</h1><p><img src="https://files.catbox.moe/a6m9ht.png" alt="单链表"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">因为Lnode* 强调的是一个节点</span><br><span class="line">先分配一个头节点</span><br><span class="line">头节点不存储数据</span><br><span class="line">我们加头节点</span><br><span class="line">知识为了之后再实现某一些基本操作</span><br><span class="line">的时候会更方便一点</span><br><span class="line">判断单链表是否为空</span><br><span class="line">就是看头节点的next指针域是否为null</span><br><span class="line">如果他等于null的话</span><br><span class="line">那他就是空的</span><br></pre></td></tr></table></figure>

<h1 id="4-知识回顾"><a href="#4-知识回顾" class="headerlink" title="4.知识回顾"></a>4.知识回顾</h1><p><img src="https://files.catbox.moe/2i8cot.png" alt="链表"></p>
]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>数据结构和算法</tag>
      </tags>
  </entry>
  <entry>
    <title>ch2.5-单链表的插入和删除</title>
    <url>/2021/09/01/ch2.5-%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5%E5%92%8C%E5%88%A0%E9%99%A4/</url>
    <content><![CDATA[<h1 id="1-尾插法（带头节点）"><a href="#1-尾插法（带头节点）" class="headerlink" title="1.尾插法（带头节点）"></a>1.尾插法（带头节点）</h1><p><img src="https://files.catbox.moe/4xz4hg.png" alt="按位序插入"></p>
<p>代码思路：</p>
<p><img src="https://files.catbox.moe/rf0u1d.gif" alt="按位序插入"></p>
<p>手写代码：</p>
<img src="https://files.catbox.moe/denpm8.png" alt="链表按序插入" style="zoom:20%;" />

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">struct  LNode&#123;</span><br><span class="line">    int  data;</span><br><span class="line">    struct LNode *next;</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F;typedef int zhengshu;</span><br><span class="line">&#x2F;&#x2F;typedef int *zhengshuzhizhen;</span><br><span class="line">&#x2F;&#x2F;typedef &lt;数据类型&gt; &lt;别名&gt;</span><br><span class="line">&#x2F;&#x2F;int x &#x3D; 1;</span><br><span class="line">&#x2F;&#x2F;int *p;</span><br><span class="line">&#x2F;&#x2F;等价于</span><br><span class="line">&#x2F;&#x2F;zhengshu x &#x3D;1;</span><br><span class="line">&#x2F;&#x2F;zhengshuzhizhen p;</span><br><span class="line">typedef struct LNode LNode;&#x2F;&#x2F;强调这是一个节点</span><br><span class="line">typedef struct LNode * Linklist;&#x2F;&#x2F;强调这是一个链表</span><br><span class="line">&#x2F;&#x2F;LNode * 强调的是一个节点 ，Linklist强调的这是一个链表</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;前插操作</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;头插法</span><br><span class="line">bool InsertNextNode(LNode *p,int e)&#123;</span><br><span class="line">    LNode *s &#x3D;(LNode *) malloc(sizeof (LNode));</span><br><span class="line">    s-&gt;data&#x3D;e;</span><br><span class="line">    s-&gt;next &#x3D; p-&gt;next;</span><br><span class="line">    p-&gt;next &#x3D; s;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;按序插入一个链表</span><br><span class="line">bool insertList(Linklist &amp;L,int i, int e)&#123;</span><br><span class="line">    if (i&lt;1)&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    LNode* p&#x3D;L;&#x2F;&#x2F;申请一个指针指向头节点</span><br><span class="line">    int j &#x3D; 0;</span><br><span class="line">    if (p-&gt;next!&#x3D;NULL &amp;&amp; j&lt;i-1)&#123;</span><br><span class="line">        p&#x3D;p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    LNode* s &#x3D; (LNode*) malloc(sizeof(LNode));</span><br><span class="line">    s-&gt;data &#x3D; e ;</span><br><span class="line">    s-&gt;next &#x3D; p-&gt;next;</span><br><span class="line">    p-&gt;next &#x3D;s;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;遍历一个单链表并打印</span><br><span class="line">void TraversingLinklist(Linklist &amp;L)&#123;</span><br><span class="line">    LNode *p&#x3D;L;</span><br><span class="line">    while (p-&gt;next!&#x3D;NULL)&#123;</span><br><span class="line">        p&#x3D;p-&gt;next;</span><br><span class="line">        printf(&quot;%d &quot;,p-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;初始化3个节点的单链表(带头节点)</span><br><span class="line">bool InitList(Linklist &amp;L)&#123;&#x2F;&#x2F;强调这是一个链表</span><br><span class="line">    L&#x3D;(LNode *) malloc(sizeof (LNode)); &#x2F;&#x2F;开辟一个内存空间,让指针L指向他,L可以引用他</span><br><span class="line">    L-&gt;data&#x3D; NULL;&#x2F;&#x2F;L为头结点</span><br><span class="line">    LNode *s &#x3D; (LNode *) malloc(sizeof (LNode));&#x2F;&#x2F;开辟一个内存空间,让指针s指向他,s可以引用他</span><br><span class="line">    LNode *t &#x3D;(LNode *) malloc(sizeof (LNode));&#x2F;&#x2F;开辟一个内存空间,让指针t指向他,t可以引用他</span><br><span class="line">    L-&gt;next &#x3D;t;</span><br><span class="line">    t-&gt;data &#x3D;111;</span><br><span class="line">    t-&gt;next&#x3D;s;</span><br><span class="line">    &#x2F;&#x2F;头插法</span><br><span class="line">    InsertNextNode(t,222);</span><br><span class="line">    s-&gt;data &#x3D; 333;</span><br><span class="line">    s-&gt;next &#x3D;NULL;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">   Linklist L; &#x2F;&#x2F;声名一个指向单链表的指针</span><br><span class="line">   &#x2F;&#x2F;初始化一个链表</span><br><span class="line">   InitList(L);</span><br><span class="line">   &#x2F;&#x2F;遍历打印链表，包括头节点</span><br><span class="line">   TraversingLinklist(L);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="2-头插法"><a href="#2-头插法" class="headerlink" title="2.头插法"></a>2.头插法</h1><h2 id="2-1头插法gif"><a href="#2-1头插法gif" class="headerlink" title="2.1头插法gif"></a>2.1头插法gif</h2><p><img src="https://files.catbox.moe/tgpdia.gif" alt="头插法"></p>
<h2 id="2-2头插法手写代码"><a href="#2-2头插法手写代码" class="headerlink" title="2.2头插法手写代码"></a>2.2头插法手写代码</h2><p><img src="https://files.catbox.moe/ytbnze.png" alt="头插法"></p>
<h2 id="2-3头插法代码"><a href="#2-3头插法代码" class="headerlink" title="2.3头插法代码"></a>2.3头插法代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">struct  LNode&#123;</span><br><span class="line">    int  data;</span><br><span class="line">    struct LNode *next;</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F;typedef int zhengshu;</span><br><span class="line">&#x2F;&#x2F;typedef int *zhengshuzhizhen;</span><br><span class="line">&#x2F;&#x2F;typedef &lt;数据类型&gt; &lt;别名&gt;</span><br><span class="line">&#x2F;&#x2F;int x &#x3D; 1;</span><br><span class="line">&#x2F;&#x2F;int *p;</span><br><span class="line">&#x2F;&#x2F;等价于</span><br><span class="line">&#x2F;&#x2F;zhengshu x &#x3D;1;</span><br><span class="line">&#x2F;&#x2F;zhengshuzhizhen p;</span><br><span class="line">typedef struct LNode LNode;&#x2F;&#x2F;强调这是一个节点</span><br><span class="line">typedef struct LNode * Linklist;&#x2F;&#x2F;强调这是一个链表</span><br><span class="line">&#x2F;&#x2F;LNode * 强调的是一个节点 ，Linklist强调的这是一个链表</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;前插操作</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;头插法</span><br><span class="line">bool InsertNextNode(LNode *p,int e)&#123;</span><br><span class="line">    LNode *s &#x3D;(LNode *) malloc(sizeof (LNode));</span><br><span class="line">    s-&gt;data&#x3D;e;</span><br><span class="line">    s-&gt;next &#x3D; p-&gt;next;</span><br><span class="line">    p-&gt;next &#x3D; s;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;按序插入一个链表</span><br><span class="line">bool insertList(Linklist &amp;L,int i, int e)&#123;</span><br><span class="line">    if (i&lt;1)&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    LNode* p&#x3D;L;&#x2F;&#x2F;申请一个指针指向头节点</span><br><span class="line">    int j &#x3D; 0;</span><br><span class="line">    if (p-&gt;next!&#x3D;NULL &amp;&amp; j&lt;i-1)&#123;</span><br><span class="line">        p&#x3D;p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    LNode* s &#x3D; (LNode*) malloc(sizeof(LNode));</span><br><span class="line">    s-&gt;data &#x3D; e ;</span><br><span class="line">    s-&gt;next &#x3D; p-&gt;next;</span><br><span class="line">    p-&gt;next &#x3D;s;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;遍历一个单链表并打印</span><br><span class="line">void TraversingLinklist(Linklist &amp;L)&#123;</span><br><span class="line">    LNode *p&#x3D;L;</span><br><span class="line">    while (p-&gt;next!&#x3D;NULL)&#123;</span><br><span class="line">        p&#x3D;p-&gt;next;</span><br><span class="line">        printf(&quot;%d &quot;,p-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;初始化3个节点的单链表(带头节点)</span><br><span class="line">bool InitList(Linklist &amp;L)&#123;&#x2F;&#x2F;强调这是一个链表</span><br><span class="line">    L&#x3D;(LNode *) malloc(sizeof (LNode)); &#x2F;&#x2F;开辟一个内存空间,让指针L指向他,L可以引用他</span><br><span class="line">    L-&gt;data&#x3D; NULL;&#x2F;&#x2F;L为头结点</span><br><span class="line">    LNode *s &#x3D; (LNode *) malloc(sizeof (LNode));&#x2F;&#x2F;开辟一个内存空间,让指针s指向他,s可以引用他</span><br><span class="line">    LNode *t &#x3D;(LNode *) malloc(sizeof (LNode));&#x2F;&#x2F;开辟一个内存空间,让指针t指向他,t可以引用他</span><br><span class="line">    L-&gt;next &#x3D;t;</span><br><span class="line">    t-&gt;data &#x3D;111;</span><br><span class="line">    t-&gt;next&#x3D;s;</span><br><span class="line">    &#x2F;&#x2F;头插法</span><br><span class="line">    InsertNextNode(t,222);</span><br><span class="line">    s-&gt;data &#x3D; 333;</span><br><span class="line">    s-&gt;next &#x3D;NULL;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    Linklist L; &#x2F;&#x2F;声名一个指向单链表的指针</span><br><span class="line">    &#x2F;&#x2F;初始化一个链表</span><br><span class="line">    InitList(L);</span><br><span class="line">    &#x2F;&#x2F;遍历打印链表，包括头节点</span><br><span class="line">    TraversingLinklist(L);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-按序删除"><a href="#3-按序删除" class="headerlink" title="3.按序删除"></a>3.按序删除</h1><p><img src="https://files.catbox.moe/7z5nh4.png" alt="按序删除"></p>
<h2 id="3-1按序删除gif"><a href="#3-1按序删除gif" class="headerlink" title="3.1按序删除gif"></a>3.1按序删除gif</h2><p><img src="https://files.catbox.moe/s5lf5m.gif" alt="按序删除"></p>
<h2 id="3-2按序删除手写代码"><a href="#3-2按序删除手写代码" class="headerlink" title="3.2按序删除手写代码"></a>3.2按序删除手写代码</h2><p><img src="https://files.catbox.moe/38jq0y.png" alt="按序删除手写代码"></p>
<h2 id="3-3按序删除代码"><a href="#3-3按序删除代码" class="headerlink" title="3.3按序删除代码"></a>3.3按序删除代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">struct  LNode&#123;</span><br><span class="line">    int  data;</span><br><span class="line">    struct LNode *next;</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F;typedef int zhengshu;</span><br><span class="line">&#x2F;&#x2F;typedef int *zhengshuzhizhen;</span><br><span class="line">&#x2F;&#x2F;typedef &lt;数据类型&gt; &lt;别名&gt;</span><br><span class="line">&#x2F;&#x2F;int x &#x3D; 1;</span><br><span class="line">&#x2F;&#x2F;int *p;</span><br><span class="line">&#x2F;&#x2F;等价于</span><br><span class="line">&#x2F;&#x2F;zhengshu x &#x3D;1;</span><br><span class="line">&#x2F;&#x2F;zhengshuzhizhen p;</span><br><span class="line">typedef struct LNode LNode;&#x2F;&#x2F;强调这是一个节点</span><br><span class="line">typedef struct LNode * Linklist;&#x2F;&#x2F;强调这是一个链表</span><br><span class="line">&#x2F;&#x2F;LNode * 强调的是一个节点 ，Linklist强调的这是一个链表</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;按序删除并返回节点</span><br><span class="line">bool ListDelete(Linklist &amp;L,int i,int e)&#123;</span><br><span class="line">    LNode *p;</span><br><span class="line">    p&#x3D;L;</span><br><span class="line">    int j &#x3D; 0;</span><br><span class="line">    while(p!&#x3D;NULL &amp;&amp; j&lt;i-1)&#123;</span><br><span class="line">        p&#x3D;p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    if(p&#x3D;&#x3D;NULL)&#123;  &#x2F;&#x2F;i的值不合法</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    if(p-&gt;next &#x3D;&#x3D; NULL)&#123;&#x2F;&#x2F;p-&gt;next如果等于NULL,说明p为最后一个节点，不符合要求</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    LNode *q &#x3D; p -&gt; next; &#x2F;&#x2F;q指向被删除的节点,p-&gt;next也是指针，指向被删除的节点</span><br><span class="line">    e&#x3D;q-&gt;data;</span><br><span class="line">    p-&gt;next &#x3D; q-&gt;next; &#x2F;&#x2F;p-&gt;next是节点的指针，q-&gt;next指向null，所以p-&gt;next是节点的指针指向null</span><br><span class="line">    free(q);</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;头插法</span><br><span class="line">bool InsertNextNode(LNode *p,int e)&#123;</span><br><span class="line">    LNode *s &#x3D;(LNode *) malloc(sizeof (LNode));</span><br><span class="line">    s-&gt;data&#x3D;e;</span><br><span class="line">    s-&gt;next &#x3D; p-&gt;next;</span><br><span class="line">    p-&gt;next &#x3D; s;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;按序插入一个链表</span><br><span class="line">bool insertList(Linklist &amp;L,int i, int e)&#123;</span><br><span class="line">    if (i&lt;1)&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    LNode* p&#x3D;L;&#x2F;&#x2F;申请一个指针指向头节点</span><br><span class="line">    int j &#x3D; 0;</span><br><span class="line">    if (p-&gt;next!&#x3D;NULL &amp;&amp; j&lt;i-1)&#123;</span><br><span class="line">        p&#x3D;p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    LNode* s &#x3D; (LNode*) malloc(sizeof(LNode));</span><br><span class="line">    s-&gt;data &#x3D; e ;</span><br><span class="line">    s-&gt;next &#x3D; p-&gt;next;</span><br><span class="line">    p-&gt;next &#x3D;s;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;遍历一个单链表并打印</span><br><span class="line">void TraversingLinklist(Linklist &amp;L)&#123;</span><br><span class="line">    LNode *p&#x3D;L;</span><br><span class="line">    while (p-&gt;next!&#x3D;NULL)&#123;</span><br><span class="line">        p&#x3D;p-&gt;next;</span><br><span class="line">        printf(&quot;%d &quot;,p-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;初始化3个节点的单链表(带头节点)</span><br><span class="line">bool InitList(Linklist &amp;L)&#123;&#x2F;&#x2F;强调这是一个链表</span><br><span class="line">    L&#x3D;(LNode *) malloc(sizeof (LNode)); &#x2F;&#x2F;开辟一个内存空间,让指针L指向他,L可以引用他</span><br><span class="line">    L-&gt;data&#x3D; NULL;</span><br><span class="line">    LNode *s &#x3D; (LNode *) malloc(sizeof (LNode));&#x2F;&#x2F;开辟一个内存空间,让指针s指向他,s可以引用他</span><br><span class="line">    LNode *t &#x3D;(LNode *) malloc(sizeof (LNode));&#x2F;&#x2F;开辟一个内存空间,让指针t指向他,t可以引用他</span><br><span class="line">    L-&gt;next &#x3D;t;&#x2F;&#x2F;指针类型&#x3D;指针类型的意思有两个意思，第一层意思是第一个指针指向的节点指向第二个指针指向的节点，第二层意思是 地址&#x3D;地址</span><br><span class="line">    t-&gt;data &#x3D;111;</span><br><span class="line">    t-&gt;next&#x3D;s;</span><br><span class="line">    &#x2F;&#x2F;头插法</span><br><span class="line">    InsertNextNode(t,222);</span><br><span class="line">    s-&gt;data &#x3D; 333;</span><br><span class="line">    s-&gt;next &#x3D;NULL;</span><br><span class="line">&#x2F;&#x2F;    &#x2F;&#x2F;按位序删除</span><br><span class="line">&#x2F;&#x2F;    ListDelete(L,3,333);</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">   Linklist L; &#x2F;&#x2F;声名一个指向单链表的指针</span><br><span class="line">   &#x2F;&#x2F;初始化一个链表</span><br><span class="line">   InitList(L);</span><br><span class="line">   &#x2F;&#x2F;遍历打印链表，包括头节点</span><br><span class="line">   TraversingLinklist(L);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="4-指定节点删除"><a href="#4-指定节点删除" class="headerlink" title="4. 指定节点删除"></a>4. 指定节点删除</h1><p>代码：</p>
<p><img src="https://files.catbox.moe/kjef60.png" alt="指定节点删除"></p>
<h2 id="4-1指定节点删除gif"><a href="#4-1指定节点删除gif" class="headerlink" title="4.1指定节点删除gif"></a>4.1指定节点删除gif</h2><p><img src="https://files.catbox.moe/4m1m0c.gif" alt="指定节点删除"></p>
<h2 id="4-2指定节点手写代码"><a href="#4-2指定节点手写代码" class="headerlink" title="4.2指定节点手写代码"></a>4.2指定节点手写代码</h2><p><img src="https://files.catbox.moe/omkqlg.png" alt="指定节点"></p>
<h2 id="4-3代码实现"><a href="#4-3代码实现" class="headerlink" title="4.3代码实现"></a>4.3代码实现</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">struct  LNode&#123;</span><br><span class="line">    int  data;</span><br><span class="line">    struct LNode *next;</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F;typedef int zhengshu;</span><br><span class="line">&#x2F;&#x2F;typedef int *zhengshuzhizhen;</span><br><span class="line">&#x2F;&#x2F;typedef &lt;数据类型&gt; &lt;别名&gt;</span><br><span class="line">&#x2F;&#x2F;int x &#x3D; 1;</span><br><span class="line">&#x2F;&#x2F;int *p;</span><br><span class="line">&#x2F;&#x2F;等价于</span><br><span class="line">&#x2F;&#x2F;zhengshu x &#x3D;1;</span><br><span class="line">&#x2F;&#x2F;zhengshuzhizhen p;</span><br><span class="line">typedef struct LNode LNode;&#x2F;&#x2F;强调这是一个节点</span><br><span class="line">typedef struct LNode * Linklist;&#x2F;&#x2F;强调这是一个链表</span><br><span class="line">&#x2F;&#x2F;LNode * 强调的是一个节点 ，Linklist强调的这是一个链表</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;按序删除并返回节点</span><br><span class="line">bool ListDelete(Linklist &amp;L,int i,int e)&#123;</span><br><span class="line">    LNode *p;</span><br><span class="line">    p&#x3D;L;</span><br><span class="line">    int j &#x3D; 0;</span><br><span class="line">    while(p!&#x3D;NULL &amp;&amp; j&lt;i-1)&#123;</span><br><span class="line">        p&#x3D;p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    if(p&#x3D;&#x3D;NULL)&#123;  &#x2F;&#x2F;i的值不合法</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    if(p-&gt;next &#x3D;&#x3D; NULL)&#123;&#x2F;&#x2F;p-&gt;next如果等于NULL,说明p为最后一个节点，不符合要求</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    LNode *q &#x3D; p -&gt; next; &#x2F;&#x2F;q指向被删除的节点,p-&gt;next也是指针，指向被删除的节点</span><br><span class="line">    e&#x3D;q-&gt;data;</span><br><span class="line">    p-&gt;next &#x3D; q-&gt;next; &#x2F;&#x2F;将 *q 节点从链中断开</span><br><span class="line">    free(q);</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;头插法</span><br><span class="line">bool InsertNextNode(LNode *p,int e)&#123;</span><br><span class="line">    LNode *s &#x3D;(LNode *) malloc(sizeof (LNode));</span><br><span class="line">    s-&gt;data&#x3D;e;</span><br><span class="line">    s-&gt;next &#x3D; p-&gt;next;</span><br><span class="line">    p-&gt;next &#x3D; s;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;按序插入一个链表</span><br><span class="line">bool insertList(Linklist &amp;L,int i, int e)&#123;</span><br><span class="line">    if (i&lt;1)&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    LNode* p&#x3D;L;&#x2F;&#x2F;申请一个指针指向头节点</span><br><span class="line">    int j &#x3D; 0;</span><br><span class="line">    if (p-&gt;next!&#x3D;NULL &amp;&amp; j&lt;i-1)&#123;</span><br><span class="line">        p&#x3D;p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    LNode* s &#x3D; (LNode*) malloc(sizeof(LNode));</span><br><span class="line">    s-&gt;data &#x3D; e ;</span><br><span class="line">    s-&gt;next &#x3D; p-&gt;next;</span><br><span class="line">    p-&gt;next &#x3D;s;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">bool DeleteNode(LNode *p)&#123;</span><br><span class="line">    if (p&#x3D;&#x3D;NULL)&#123;  &#x2F;&#x2F;p为空，p指向的节点为空</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#x2F;&#x2F;    if(p-&gt;next &#x3D;&#x3D; NULL)&#123; &#x2F;&#x2F;p指向节点的next指针域为空 也就是p指向的节点不是最后一个节点</span><br><span class="line">&#x2F;&#x2F;        return false;</span><br><span class="line">&#x2F;&#x2F;    &#125;</span><br><span class="line">    LNode *q  &#x3D;  p-&gt;next;</span><br><span class="line">    p-&gt;data &#x3D; p-&gt;next-&gt;data;</span><br><span class="line">    p-&gt;next &#x3D; q-&gt;next;</span><br><span class="line">    free(q);</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;遍历一个单链表并打印</span><br><span class="line">void TraversingLinklist(Linklist &amp;L)&#123;</span><br><span class="line">    LNode *p&#x3D;L;</span><br><span class="line">    while (p-&gt;next!&#x3D;NULL)&#123;</span><br><span class="line">        p&#x3D;p-&gt;next;</span><br><span class="line">        printf(&quot;%d &quot;,p-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;初始化3个节点的单链表(带头节点)</span><br><span class="line">bool InitList(Linklist &amp;L)&#123;&#x2F;&#x2F;强调这是一个链表</span><br><span class="line">    L&#x3D;(LNode *) malloc(sizeof (LNode)); &#x2F;&#x2F;开辟一个内存空间,让指针L指向他,L可以引用他</span><br><span class="line">    L-&gt;data&#x3D; NULL;</span><br><span class="line">    &#x2F;&#x2F;指针-&gt;next 指向节点的next的指针域</span><br><span class="line">    LNode *s &#x3D; (LNode *) malloc(sizeof (LNode));&#x2F;&#x2F;开辟一个内存空间,让指针s指向他,s可以引用他</span><br><span class="line">    LNode *t &#x3D;(LNode *) malloc(sizeof (LNode));&#x2F;&#x2F;开辟一个内存空间,让指针t指向他,t可以引用他</span><br><span class="line">    LNode *m &#x3D;(LNode *) malloc(sizeof (LNode));&#x2F;&#x2F;开辟一个内存空，让指针m指向他,m可以引用他</span><br><span class="line">    L-&gt;next &#x3D;t;&#x2F;&#x2F;指针类型&#x3D;指针类型的意思有两个意思，第一层意思是第一个指针指向的节点指向第二个指针指向的节点，第二层意思是 地址&#x3D;地址</span><br><span class="line">    t-&gt;data &#x3D;111;</span><br><span class="line">    t-&gt;next&#x3D;s;</span><br><span class="line">    &#x2F;&#x2F;头插法</span><br><span class="line">&#x2F;&#x2F;    InsertNextNode(t,222);</span><br><span class="line">    s-&gt;data &#x3D; 222;</span><br><span class="line">    s-&gt;next &#x3D;m;</span><br><span class="line">    m-&gt;data &#x3D; 333;</span><br><span class="line">    m-&gt;next &#x3D;NULL;</span><br><span class="line">    &#x2F;&#x2F;按指定节点删除</span><br><span class="line">    DeleteNode(s);</span><br><span class="line">   &#x2F;&#x2F;按位序删除</span><br><span class="line">&#x2F;&#x2F;    ListDelete(L,3,333);</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">   Linklist L; &#x2F;&#x2F;声名一个指向单链表的指针</span><br><span class="line">   &#x2F;&#x2F;初始化一个链表</span><br><span class="line">   InitList(L);</span><br><span class="line">   &#x2F;&#x2F;遍历打印链表，包括头节点</span><br><span class="line">   TraversingLinklist(L);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>数据结构和算法</tag>
      </tags>
  </entry>
  <entry>
    <title>ch2.6-单链表的查找</title>
    <url>/2021/09/12/ch2.6-%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<h1 id="1-按位查找"><a href="#1-按位查找" class="headerlink" title="1.按位查找"></a>1.按位查找</h1><p><img src="https://files.catbox.moe/a2rpma.png" alt="按位查找"></p>
<h2 id="1-1按位查找gif"><a href="#1-1按位查找gif" class="headerlink" title="1.1按位查找gif"></a>1.1按位查找gif</h2><p><img src="https://files.catbox.moe/ekw4pd.gif" alt="按位查找"></p>
<h2 id="1-2按位查找手写代码"><a href="#1-2按位查找手写代码" class="headerlink" title="1.2按位查找手写代码"></a>1.2按位查找手写代码</h2><p><img src="https://files.catbox.moe/6ltvl3.png" alt="按位查找"></p>
<h2 id="1-3代码实现"><a href="#1-3代码实现" class="headerlink" title="1.3代码实现"></a>1.3代码实现</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">struct  LNode&#123;</span><br><span class="line">    int  data;</span><br><span class="line">    struct LNode *next;</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F;typedef int zhengshu;</span><br><span class="line">&#x2F;&#x2F;typedef int *zhengshuzhizhen;</span><br><span class="line">&#x2F;&#x2F;typedef &lt;数据类型&gt; &lt;别名&gt;</span><br><span class="line">&#x2F;&#x2F;int x &#x3D; 1;</span><br><span class="line">&#x2F;&#x2F;int *p;</span><br><span class="line">&#x2F;&#x2F;等价于</span><br><span class="line">&#x2F;&#x2F;zhengshu x &#x3D;1;</span><br><span class="line">&#x2F;&#x2F;zhengshuzhizhen p;</span><br><span class="line">typedef struct LNode LNode;&#x2F;&#x2F;定义一个节点</span><br><span class="line">typedef struct LNode * Linklist;&#x2F;&#x2F;定义这是一个链表指针</span><br><span class="line">&#x2F;&#x2F;LNode * 强调的是一个节点 ，Linklist强调的这是一个链表</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;按位查找</span><br><span class="line">LNode * getElem(Linklist L,int i)&#123;</span><br><span class="line">    LNode * p &#x3D; L; &#x2F;&#x2F;p指针指向头节点</span><br><span class="line">    if (i&lt;&#x3D;0)&#123;</span><br><span class="line">        return  NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    int j &#x3D; 0;</span><br><span class="line">    while(p !&#x3D; NULL &amp;&amp; j&lt;i-1)&#123;</span><br><span class="line">      p&#x3D; p-&gt;next;</span><br><span class="line">      j++;</span><br><span class="line">    &#125;</span><br><span class="line">    return p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;按序删除并返回节点</span><br><span class="line">bool ListDelete(Linklist &amp;L,int i,int e)&#123;</span><br><span class="line">    LNode *p;</span><br><span class="line">    p&#x3D;L;</span><br><span class="line">    int j &#x3D; 0;</span><br><span class="line">    while(p!&#x3D;NULL &amp;&amp; j&lt;i-1)&#123;</span><br><span class="line">        p&#x3D;p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    if(p&#x3D;&#x3D;NULL)&#123;  &#x2F;&#x2F;i的值不合法</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    if(p-&gt;next &#x3D;&#x3D; NULL)&#123;&#x2F;&#x2F;p-&gt;next如果等于NULL,说明p为最后一个节点，不符合要求</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    LNode *q &#x3D; p -&gt; next; &#x2F;&#x2F;q指向被删除的节点,p-&gt;next也是指针，指向被删除的节点</span><br><span class="line">    e&#x3D;q-&gt;data;</span><br><span class="line">    p-&gt;next &#x3D; q-&gt;next; &#x2F;&#x2F;将 *q 节点从链中断开</span><br><span class="line">    free(q);</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;头插法</span><br><span class="line">bool InsertNextNode(LNode *p,int e)&#123;</span><br><span class="line">    LNode *s &#x3D;(LNode *) malloc(sizeof (LNode));</span><br><span class="line">    s-&gt;data&#x3D;e;</span><br><span class="line">    s-&gt;next &#x3D; p-&gt;next;</span><br><span class="line">    p-&gt;next &#x3D; s;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;按序插入一个链表</span><br><span class="line">bool insertList(Linklist &amp;L,int i, int e)&#123;</span><br><span class="line">    if (i&lt;1)&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    LNode* p&#x3D;L;&#x2F;&#x2F;申请一个指针指向头节点</span><br><span class="line">    int j &#x3D; 0;</span><br><span class="line">    if (p-&gt;next!&#x3D;NULL &amp;&amp; j&lt;i-1)&#123;</span><br><span class="line">        p&#x3D;p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    LNode* s &#x3D; (LNode*) malloc(sizeof(LNode));</span><br><span class="line">    s-&gt;data &#x3D; e ;</span><br><span class="line">    s-&gt;next &#x3D; p-&gt;next;</span><br><span class="line">    p-&gt;next &#x3D;s;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">bool DeleteNode(LNode *p)&#123;</span><br><span class="line">    if (p&#x3D;&#x3D;NULL)&#123;  &#x2F;&#x2F;p为空，p指向的节点为空</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#x2F;&#x2F;    if(p-&gt;next &#x3D;&#x3D; NULL)&#123; &#x2F;&#x2F;p指向节点的next指针域为空 也就是p指向的节点不是最后一个节点</span><br><span class="line">&#x2F;&#x2F;        return false;</span><br><span class="line">&#x2F;&#x2F;    &#125;</span><br><span class="line">    LNode *q  &#x3D;  p-&gt;next;</span><br><span class="line">    p-&gt;data &#x3D; p-&gt;next-&gt;data;</span><br><span class="line">    p-&gt;next &#x3D; q-&gt;next;</span><br><span class="line">    free(q);</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;遍历一个单链表并打印</span><br><span class="line">void TraversingLinklist(Linklist &amp;L)&#123;</span><br><span class="line">    LNode *p&#x3D;L;</span><br><span class="line">    while (p-&gt;next!&#x3D;NULL)&#123;</span><br><span class="line">        p&#x3D;p-&gt;next;</span><br><span class="line">        printf(&quot;%d &quot;,p-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;初始化3个节点的单链表(带头节点)</span><br><span class="line">bool InitList(Linklist &amp;L)&#123;&#x2F;&#x2F;强调这是一个链表</span><br><span class="line">    L&#x3D;(LNode *) malloc(sizeof (LNode)); &#x2F;&#x2F;开辟一个内存空间,让指针L指向他,L可以引用他</span><br><span class="line">    L-&gt;data&#x3D; NULL;</span><br><span class="line">    &#x2F;&#x2F;指针-&gt;next 指向节点的next的指针域</span><br><span class="line">    LNode *s &#x3D; (LNode *) malloc(sizeof (LNode));&#x2F;&#x2F;开辟一个内存空间,让指针s指向他,s可以引用他</span><br><span class="line">    LNode *t &#x3D;(LNode *) malloc(sizeof (LNode));&#x2F;&#x2F;开辟一个内存空间,让指针t指向他,t可以引用他</span><br><span class="line">    LNode *m &#x3D;(LNode *) malloc(sizeof (LNode));&#x2F;&#x2F;开辟一个内存空，让指针m指向他,m可以引用他</span><br><span class="line">    L-&gt;next &#x3D;t;&#x2F;&#x2F;指针类型&#x3D;指针类型的意思有两个意思，第一层意思是第一个指针指向的节点指向第二个指针指向的节点，第二层意思是 地址&#x3D;地址</span><br><span class="line">    t-&gt;data &#x3D;111;</span><br><span class="line">    t-&gt;next&#x3D;s;</span><br><span class="line">    s-&gt;data &#x3D; 222;</span><br><span class="line">    s-&gt;next &#x3D;m;</span><br><span class="line">    m-&gt;data &#x3D; 333;</span><br><span class="line">    m-&gt;next &#x3D;NULL;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">   Linklist L; &#x2F;&#x2F;声名一个指向单链表的指针</span><br><span class="line">   &#x2F;&#x2F;初始化一个链表</span><br><span class="line">   InitList(L);</span><br><span class="line">    &#x2F;&#x2F;头插法</span><br><span class="line">&#x2F;&#x2F;    InsertNextNode(t,222);</span><br><span class="line">    &#x2F;&#x2F;按指定节点删除</span><br><span class="line">&#x2F;&#x2F;    DeleteNode(s);</span><br><span class="line">    &#x2F;&#x2F;按位序删除</span><br><span class="line">&#x2F;&#x2F;    ListDelete(L,3,333);</span><br><span class="line">&#x2F;&#x2F; 按位序查找</span><br><span class="line">    printf(&quot;%d &quot;, getElem(L,2)-&gt;data);</span><br><span class="line">&#x2F;&#x2F;   &#x2F;&#x2F;遍历打印链表，包括头节点</span><br><span class="line">&#x2F;&#x2F;   TraversingLinklist(L);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-按值查找"><a href="#2-按值查找" class="headerlink" title="2.按值查找"></a>2.按值查找</h1><p><img src="https://files.catbox.moe/swoggj.png" alt="按值查找"></p>
<h2 id="2-1按值查找gif"><a href="#2-1按值查找gif" class="headerlink" title="2.1按值查找gif"></a>2.1按值查找gif</h2><p><img src="https://files.catbox.moe/5rd5bo.gif" alt="按值查找思路"></p>
<h2 id="2-2按值查找手写代码"><a href="#2-2按值查找手写代码" class="headerlink" title="2.2按值查找手写代码"></a>2.2按值查找手写代码</h2><p><img src="https://files.catbox.moe/zug949.png" alt="按值查找代码"></p>
<h2 id="2-3代码实现"><a href="#2-3代码实现" class="headerlink" title="2.3代码实现"></a>2.3代码实现</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">struct  LNode&#123;</span><br><span class="line">    int  data;</span><br><span class="line">    struct LNode *next;</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F;typedef int zhengshu;</span><br><span class="line">&#x2F;&#x2F;typedef int *zhengshuzhizhen;</span><br><span class="line">&#x2F;&#x2F;typedef &lt;数据类型&gt; &lt;别名&gt;</span><br><span class="line">&#x2F;&#x2F;int x &#x3D; 1;</span><br><span class="line">&#x2F;&#x2F;int *p;</span><br><span class="line">&#x2F;&#x2F;等价于</span><br><span class="line">&#x2F;&#x2F;zhengshu x &#x3D;1;</span><br><span class="line">&#x2F;&#x2F;zhengshuzhizhen p;</span><br><span class="line">typedef struct LNode LNode;&#x2F;&#x2F;定义一个节点</span><br><span class="line">typedef struct LNode * Linklist;&#x2F;&#x2F;定义这是一个链表指针</span><br><span class="line">&#x2F;&#x2F;LNode * 强调的是一个节点 ，Linklist强调的这是一个链表</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;按位查找</span><br><span class="line">LNode * getElem(Linklist L,int i)&#123;</span><br><span class="line">    LNode * p &#x3D; L; &#x2F;&#x2F;p指针指向头节点</span><br><span class="line">    if (i&lt;&#x3D;0)&#123;</span><br><span class="line">        return  NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    int j &#x3D; 0;</span><br><span class="line">    while(p !&#x3D; NULL &amp;&amp; j&lt;i-1)&#123;</span><br><span class="line">      p&#x3D; p-&gt;next;</span><br><span class="line">      j++;</span><br><span class="line">    &#125;</span><br><span class="line">    return p;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;按值查找</span><br><span class="line">LNode * LocateElem(Linklist L,int e)&#123;</span><br><span class="line">    LNode * p &#x3D; L;</span><br><span class="line">    while (p!&#x3D;NULL &amp;&amp; p-&gt;data !&#x3D;e)&#123;</span><br><span class="line">        p&#x3D;p-&gt;next;&#x2F;&#x2F;p-&gt;data如果等于e,跳出循环</span><br><span class="line">    &#125;</span><br><span class="line">    return p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;按序删除并返回节点</span><br><span class="line">bool ListDelete(Linklist &amp;L,int i,int e)&#123;</span><br><span class="line">    LNode *p;</span><br><span class="line">    p&#x3D;L;</span><br><span class="line">    int j &#x3D; 0;</span><br><span class="line">    while(p!&#x3D;NULL &amp;&amp; j&lt;i-1)&#123;</span><br><span class="line">        p&#x3D;p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    if(p&#x3D;&#x3D;NULL)&#123;  &#x2F;&#x2F;i的值不合法</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    if(p-&gt;next &#x3D;&#x3D; NULL)&#123;&#x2F;&#x2F;p-&gt;next如果等于NULL,说明p为最后一个节点，不符合要求</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    LNode *q &#x3D; p -&gt; next; &#x2F;&#x2F;q指向被删除的节点,p-&gt;next也是指针，指向被删除的节点</span><br><span class="line">    e&#x3D;q-&gt;data;</span><br><span class="line">    p-&gt;next &#x3D; q-&gt;next; &#x2F;&#x2F;将 *q 节点从链中断开</span><br><span class="line">    free(q);</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;头插法</span><br><span class="line">bool InsertNextNode(LNode *p,int e)&#123;</span><br><span class="line">    LNode *s &#x3D;(LNode *) malloc(sizeof (LNode));</span><br><span class="line">    s-&gt;data&#x3D;e;</span><br><span class="line">    s-&gt;next &#x3D; p-&gt;next;</span><br><span class="line">    p-&gt;next &#x3D; s;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;按序插入一个链表</span><br><span class="line">bool insertList(Linklist &amp;L,int i, int e)&#123;</span><br><span class="line">    if (i&lt;1)&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    LNode* p&#x3D;L;&#x2F;&#x2F;申请一个指针指向头节点</span><br><span class="line">    int j &#x3D; 0;</span><br><span class="line">    if (p-&gt;next!&#x3D;NULL &amp;&amp; j&lt;i-1)&#123;</span><br><span class="line">        p&#x3D;p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    LNode* s &#x3D; (LNode*) malloc(sizeof(LNode));</span><br><span class="line">    s-&gt;data &#x3D; e ;</span><br><span class="line">    s-&gt;next &#x3D; p-&gt;next;</span><br><span class="line">    p-&gt;next &#x3D;s;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">bool DeleteNode(LNode *p)&#123;</span><br><span class="line">    if (p&#x3D;&#x3D;NULL)&#123;  &#x2F;&#x2F;p为空，p指向的节点为空</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#x2F;&#x2F;    if(p-&gt;next &#x3D;&#x3D; NULL)&#123; &#x2F;&#x2F;p指向节点的next指针域为空 也就是p指向的节点不是最后一个节点</span><br><span class="line">&#x2F;&#x2F;        return false;</span><br><span class="line">&#x2F;&#x2F;    &#125;</span><br><span class="line">    LNode *q  &#x3D;  p-&gt;next;</span><br><span class="line">    p-&gt;data &#x3D; p-&gt;next-&gt;data;</span><br><span class="line">    p-&gt;next &#x3D; q-&gt;next;</span><br><span class="line">    free(q);</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;遍历一个单链表并打印</span><br><span class="line">void TraversingLinklist(Linklist &amp;L)&#123;</span><br><span class="line">    LNode *p&#x3D;L;</span><br><span class="line">    while (p-&gt;next!&#x3D;NULL)&#123;</span><br><span class="line">        p&#x3D;p-&gt;next;</span><br><span class="line">        printf(&quot;%d &quot;,p-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;初始化4个节点的单链表(带头节点)</span><br><span class="line">bool InitList(Linklist &amp;L)&#123;&#x2F;&#x2F;强调这是一个链表</span><br><span class="line">    L&#x3D;(LNode *) malloc(sizeof (LNode)); &#x2F;&#x2F;开辟一个内存空间,让指针L指向他,L可以引用他</span><br><span class="line">    L-&gt;data&#x3D; NULL;</span><br><span class="line">    &#x2F;&#x2F;指针-&gt;next 指向节点的next的指针域</span><br><span class="line">    LNode *s &#x3D; (LNode *) malloc(sizeof (LNode));&#x2F;&#x2F;开辟一个内存空间,让指针s指向他,s可以引用他</span><br><span class="line">    LNode *t &#x3D;(LNode *) malloc(sizeof (LNode));&#x2F;&#x2F;开辟一个内存空间,让指针t指向他,t可以引用他</span><br><span class="line">    LNode *m &#x3D;(LNode *) malloc(sizeof (LNode));&#x2F;&#x2F;开辟一个内存空，让指针m指向他,m可以引用他</span><br><span class="line">    L-&gt;next &#x3D;t;&#x2F;&#x2F;指针类型&#x3D;指针类型的意思有两个意思，第一层意思是第一个指针指向的节点指向第二个指针指向的节点，第二层意思是 地址&#x3D;地址</span><br><span class="line">    t-&gt;data &#x3D;111;</span><br><span class="line">    t-&gt;next&#x3D;s;</span><br><span class="line">    s-&gt;data &#x3D; 222;</span><br><span class="line">    s-&gt;next &#x3D;m;</span><br><span class="line">    m-&gt;data &#x3D; 333;</span><br><span class="line">    m-&gt;next &#x3D;NULL;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">   Linklist L; &#x2F;&#x2F;声名一个指向单链表的指针</span><br><span class="line">   &#x2F;&#x2F;初始化一个链表</span><br><span class="line">   InitList(L);</span><br><span class="line">    &#x2F;&#x2F;头插法</span><br><span class="line">&#x2F;&#x2F;    InsertNextNode(t,222);</span><br><span class="line">    &#x2F;&#x2F;按指定节点删除</span><br><span class="line">&#x2F;&#x2F;    DeleteNode(s);</span><br><span class="line">    &#x2F;&#x2F;按位序删除</span><br><span class="line">&#x2F;&#x2F;    ListDelete(L,3,333);</span><br><span class="line">&#x2F;&#x2F; 按位序查找</span><br><span class="line">    printf(&quot;%d &quot;, LocateElem(L,222)-&gt;data);</span><br><span class="line">&#x2F;&#x2F;   &#x2F;&#x2F;遍历打印链表，包括头节点</span><br><span class="line">&#x2F;&#x2F;   TraversingLinklist(L);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="3-求表长"><a href="#3-求表长" class="headerlink" title="3.求表长"></a>3.求表长</h1><p><img src="https://files.catbox.moe/y7b5fi.png" alt="求表长"></p>
<h2 id="3-1求表长gif"><a href="#3-1求表长gif" class="headerlink" title="3.1求表长gif"></a>3.1求表长gif</h2><p><img src="https://files.catbox.moe/ekw4pd.gif" alt="求表长"></p>
<h2 id="3-2求表长手写代码"><a href="#3-2求表长手写代码" class="headerlink" title="3.2求表长手写代码"></a>3.2求表长手写代码</h2><p><img src="https://files.catbox.moe/xls2tw.png" alt="求表长手写代码"></p>
<h2 id="3-3-代码实现"><a href="#3-3-代码实现" class="headerlink" title="3.3 代码实现"></a>3.3 代码实现</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">struct  LNode&#123;</span><br><span class="line">    int  data;</span><br><span class="line">    struct LNode *next;</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F;typedef int zhengshu;</span><br><span class="line">&#x2F;&#x2F;typedef int *zhengshuzhizhen;</span><br><span class="line">&#x2F;&#x2F;typedef &lt;数据类型&gt; &lt;别名&gt;</span><br><span class="line">&#x2F;&#x2F;int x &#x3D; 1;</span><br><span class="line">&#x2F;&#x2F;int *p;</span><br><span class="line">&#x2F;&#x2F;等价于</span><br><span class="line">&#x2F;&#x2F;zhengshu x &#x3D;1;</span><br><span class="line">&#x2F;&#x2F;zhengshuzhizhen p;</span><br><span class="line">typedef struct LNode LNode;&#x2F;&#x2F;定义一个节点</span><br><span class="line">typedef struct LNode * Linklist;&#x2F;&#x2F;定义这是一个链表指针</span><br><span class="line">&#x2F;&#x2F;LNode * 强调的是一个节点 ，Linklist强调的这是一个链表</span><br><span class="line">&#x2F;&#x2F;求表长（带上头节点）</span><br><span class="line">int getLength(Linklist L)&#123;</span><br><span class="line">    LNode * p &#x3D; L;  &#x2F;&#x2F;p 和 l的值相等</span><br><span class="line">    int len &#x3D; 0;</span><br><span class="line">    while(p!&#x3D;NULL)&#123;</span><br><span class="line">        p&#x3D;p-&gt;next;</span><br><span class="line">        len++;</span><br><span class="line">    &#125;</span><br><span class="line">    return  len;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;按位查找</span><br><span class="line">LNode * getElem(Linklist L,int i)&#123;</span><br><span class="line">    LNode * p &#x3D; L; &#x2F;&#x2F;p指针指向头节点</span><br><span class="line">    if (i&lt;&#x3D;0)&#123;</span><br><span class="line">        return  NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    int j &#x3D; 0;</span><br><span class="line">    while(p !&#x3D; NULL &amp;&amp; j&lt;i-1)&#123;</span><br><span class="line">      p&#x3D; p-&gt;next;</span><br><span class="line">      j++;</span><br><span class="line">    &#125;</span><br><span class="line">    return p;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;按值查找</span><br><span class="line">LNode * LocateElem(Linklist L,int e)&#123;</span><br><span class="line">    LNode * p &#x3D; L;</span><br><span class="line">    while (p!&#x3D;NULL &amp;&amp; p-&gt;data !&#x3D;e)&#123;</span><br><span class="line">        p&#x3D;p-&gt;next;&#x2F;&#x2F;p-&gt;data如果等于e,跳出循环</span><br><span class="line">    &#125;</span><br><span class="line">    return p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;按序删除并返回节点</span><br><span class="line">bool ListDelete(Linklist &amp;L,int i,int e)&#123;</span><br><span class="line">    LNode *p;</span><br><span class="line">    p&#x3D;L;</span><br><span class="line">    int j &#x3D; 0;</span><br><span class="line">    while(p!&#x3D;NULL &amp;&amp; j&lt;i-1)&#123;</span><br><span class="line">        p&#x3D;p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    if(p&#x3D;&#x3D;NULL)&#123;  &#x2F;&#x2F;i的值不合法</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    if(p-&gt;next &#x3D;&#x3D; NULL)&#123;&#x2F;&#x2F;p-&gt;next如果等于NULL,说明p为最后一个节点，不符合要求</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    LNode *q &#x3D; p -&gt; next; &#x2F;&#x2F;q指向被删除的节点,p-&gt;next也是指针，指向被删除的节点</span><br><span class="line">    e&#x3D;q-&gt;data;</span><br><span class="line">    p-&gt;next &#x3D; q-&gt;next; &#x2F;&#x2F;将 *q 节点从链中断开</span><br><span class="line">    free(q);</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;头插法</span><br><span class="line">bool InsertNextNode(LNode *p,int e)&#123;</span><br><span class="line">    LNode *s &#x3D;(LNode *) malloc(sizeof (LNode));</span><br><span class="line">    s-&gt;data&#x3D;e;</span><br><span class="line">    s-&gt;next &#x3D; p-&gt;next;</span><br><span class="line">    p-&gt;next &#x3D; s;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;按序插入一个链表</span><br><span class="line">bool insertList(Linklist &amp;L,int i, int e)&#123;</span><br><span class="line">    if (i&lt;1)&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    LNode* p&#x3D;L;&#x2F;&#x2F;申请一个指针指向头节点</span><br><span class="line">    int j &#x3D; 0;</span><br><span class="line">    if (p-&gt;next!&#x3D;NULL &amp;&amp; j&lt;i-1)&#123;</span><br><span class="line">        p&#x3D;p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    LNode* s &#x3D; (LNode*) malloc(sizeof(LNode));</span><br><span class="line">    s-&gt;data &#x3D; e ;</span><br><span class="line">    s-&gt;next &#x3D; p-&gt;next;</span><br><span class="line">    p-&gt;next &#x3D;s;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">bool DeleteNode(LNode *p)&#123;</span><br><span class="line">    if (p&#x3D;&#x3D;NULL)&#123;  &#x2F;&#x2F;p为空，p指向的节点为空</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#x2F;&#x2F;    if(p-&gt;next &#x3D;&#x3D; NULL)&#123; &#x2F;&#x2F;p指向节点的next指针域为空 也就是p指向的节点不是最后一个节点</span><br><span class="line">&#x2F;&#x2F;        return false;</span><br><span class="line">&#x2F;&#x2F;    &#125;</span><br><span class="line">    LNode *q  &#x3D;  p-&gt;next;</span><br><span class="line">    p-&gt;data &#x3D; p-&gt;next-&gt;data;</span><br><span class="line">    p-&gt;next &#x3D; q-&gt;next;</span><br><span class="line">    free(q);</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;遍历一个单链表并打印</span><br><span class="line">void TraversingLinklist(Linklist &amp;L)&#123;</span><br><span class="line">    LNode *p&#x3D;L;</span><br><span class="line">    while (p-&gt;next!&#x3D;NULL)&#123;</span><br><span class="line">        p&#x3D;p-&gt;next;</span><br><span class="line">        printf(&quot;%d &quot;,p-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;初始化4个节点的单链表(带头节点)</span><br><span class="line">bool InitList(Linklist &amp;L)&#123;&#x2F;&#x2F;强调这是一个链表</span><br><span class="line">    L&#x3D;(LNode *) malloc(sizeof (LNode)); &#x2F;&#x2F;开辟一个内存空间,让指针L指向他,L可以引用他</span><br><span class="line">    L-&gt;data&#x3D; NULL;</span><br><span class="line">    &#x2F;&#x2F;指针-&gt;next 指向节点的next的指针域</span><br><span class="line">    LNode *s &#x3D; (LNode *) malloc(sizeof (LNode));&#x2F;&#x2F;开辟一个内存空间,让指针s指向他,s可以引用他</span><br><span class="line">    LNode *t &#x3D;(LNode *) malloc(sizeof (LNode));&#x2F;&#x2F;开辟一个内存空间,让指针t指向他,t可以引用他</span><br><span class="line">    LNode *m &#x3D;(LNode *) malloc(sizeof (LNode));&#x2F;&#x2F;开辟一个内存空，让指针m指向他,m可以引用他</span><br><span class="line">    L-&gt;next &#x3D;t;&#x2F;&#x2F;指针类型&#x3D;指针类型的意思有两个意思，第一层意思是第一个指针指向的节点指向第二个指针指向的节点，第二层意思是 地址&#x3D;地址</span><br><span class="line">    t-&gt;data &#x3D;111;</span><br><span class="line">    t-&gt;next&#x3D;s;</span><br><span class="line">    s-&gt;data &#x3D; 222;</span><br><span class="line">    s-&gt;next &#x3D;m;</span><br><span class="line">    m-&gt;data &#x3D; 333;</span><br><span class="line">    m-&gt;next &#x3D;NULL;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">   Linklist L; &#x2F;&#x2F;声名一个指向单链表的指针</span><br><span class="line">   &#x2F;&#x2F;初始化一个链表</span><br><span class="line">   InitList(L);</span><br><span class="line">   printf(&quot;%d &quot;, getLength(L));</span><br><span class="line">    &#x2F;&#x2F;头插法</span><br><span class="line">&#x2F;&#x2F;    InsertNextNode(t,222);</span><br><span class="line">    &#x2F;&#x2F;按指定节点删除</span><br><span class="line">&#x2F;&#x2F;    DeleteNode(s);</span><br><span class="line">    &#x2F;&#x2F;按位序删除</span><br><span class="line">&#x2F;&#x2F;    ListDelete(L,3,333);</span><br><span class="line">&#x2F;&#x2F; 按位序查找</span><br><span class="line">&#x2F;&#x2F;    printf(&quot;%d &quot;, LocateElem(L,222)-&gt;data);</span><br><span class="line">&#x2F;&#x2F;   &#x2F;&#x2F;遍历打印链表，包括头节点</span><br><span class="line">&#x2F;&#x2F;   TraversingLinklist(L);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>数据结构和算法</tag>
      </tags>
  </entry>
  <entry>
    <title>双链表</title>
    <url>/2021/09/14/ch2.7-%E5%8F%8C%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="1-双链表的定义"><a href="#1-双链表的定义" class="headerlink" title="1.双链表的定义"></a>1.双链表的定义</h1><p><img src="https://files.catbox.moe/gir80j.png" alt="双链表的定义"></p>
<h1 id="2-初始化一个双链表，并循环打印"><a href="#2-初始化一个双链表，并循环打印" class="headerlink" title="2.初始化一个双链表，并循环打印"></a>2.初始化一个双链表，并循环打印</h1><p><img src="https://files.catbox.moe/lbf3af.png" alt="初始化一个双链表"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">struct  DLNode&#123;</span><br><span class="line">    int  data;</span><br><span class="line">    struct DLNode *prior,*next;</span><br><span class="line">&#125;;</span><br><span class="line">typedef  struct  DLNode DNode; &#x2F;&#x2F;侧重于节点</span><br><span class="line">typedef  struct  DLNode * DLinkList;&#x2F;&#x2F;侧重于链表</span><br><span class="line">bool InitDLinkList(DLinkList &amp;L)&#123;</span><br><span class="line">    L &#x3D; (DNode *) malloc(sizeof (DLNode));&#x2F;&#x2F;开辟一个内存空间,L指针指向头节点,L可以指向头节点,L的值是头节点的地址</span><br><span class="line">    DNode * m &#x3D; (DNode *) malloc(sizeof (DLNode));</span><br><span class="line">    DNode * n &#x3D;(DNode *) malloc(sizeof (DLNode));</span><br><span class="line">    DNode * s &#x3D;(DNode *) malloc(sizeof (DLNode));</span><br><span class="line">    if(L&#x3D;&#x3D;NULL) &#x2F;&#x2F;如果内存没空间，返回true</span><br><span class="line">        return false;</span><br><span class="line">    L-&gt;prior &#x3D; NULL;</span><br><span class="line">    L-&gt;data &#x3D; NULL;</span><br><span class="line">    L-&gt;next &#x3D;m;</span><br><span class="line">    m-&gt;data &#x3D;111;</span><br><span class="line">    m-&gt;prior &#x3D;L;</span><br><span class="line">    m-&gt;next &#x3D; n;</span><br><span class="line">    n-&gt;data &#x3D;222;</span><br><span class="line">    n-&gt;prior &#x3D; m;</span><br><span class="line">    n-&gt;next &#x3D; s;</span><br><span class="line">    s-&gt;data &#x3D; 333;</span><br><span class="line">    s-&gt;prior &#x3D; n;</span><br><span class="line">    s-&gt;next &#x3D; NULL;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;遍历一个单链表并打印</span><br><span class="line">void TraversingLinklist(DLinkList &amp;L) &#123;</span><br><span class="line">    DNode * p &#x3D; L;</span><br><span class="line">    while (p-&gt;next!&#x3D;NULL)&#123;</span><br><span class="line">        p&#x3D;p-&gt;next;</span><br><span class="line">        printf(&quot;%d &quot;,p-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">   &#x2F;&#x2F;定义一个链表指针类型</span><br><span class="line">   DLinkList L;</span><br><span class="line">   &#x2F;&#x2F;初始化一个指针类型</span><br><span class="line">   InitDLinkList(L);</span><br><span class="line">   TraversingLinklist(L);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-双链表的插入（在一个结点后插入）"><a href="#3-双链表的插入（在一个结点后插入）" class="headerlink" title="3.双链表的插入（在一个结点后插入）"></a>3.双链表的插入（在一个结点后插入）</h1><h2 id="3-1当结点不是最后一个结点的时候"><a href="#3-1当结点不是最后一个结点的时候" class="headerlink" title="3.1当结点不是最后一个结点的时候"></a>3.1当结点不是最后一个结点的时候</h2><p><img src="https://files.catbox.moe/crll5l.png"></p>
<h3 id="3-1-1插入原理图"><a href="#3-1-1插入原理图" class="headerlink" title="3.1.1插入原理图"></a>3.1.1插入原理图</h3><p><img src="https://files.catbox.moe/e1kvl3.gif" alt="插入原理图"></p>
<h3 id="3-2-2手写代码"><a href="#3-2-2手写代码" class="headerlink" title="3.2.2手写代码"></a>3.2.2手写代码</h3><p><img src="https://files.catbox.moe/loub0y.png" alt="双链表的代码"></p>
<h2 id="3-2当结点是最后一个结点的时候"><a href="#3-2当结点是最后一个结点的时候" class="headerlink" title="3.2当结点是最后一个结点的时候"></a>3.2当结点是最后一个结点的时候</h2><p><img src="https://files.catbox.moe/x6l3li.gif" alt="插入结点为最后一个节点的时候"></p>
<h3 id="3-2-1手写代码"><a href="#3-2-1手写代码" class="headerlink" title="3.2.1手写代码"></a>3.2.1手写代码</h3><p><img src="https://files.catbox.moe/dskb60.png"></p>
<p><img src="https://files.catbox.moe/66ydz0.png"></p>
<h3 id="3-2-2代码实现"><a href="#3-2-2代码实现" class="headerlink" title="3.2.2代码实现"></a>3.2.2代码实现</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F;typedef int zhengshu;</span><br><span class="line">&#x2F;&#x2F;typedef int *zhengshuzhizhen;</span><br><span class="line">&#x2F;&#x2F;typedef &lt;数据类型&gt; &lt;别名&gt;</span><br><span class="line">&#x2F;&#x2F;int x &#x3D; 1;</span><br><span class="line">&#x2F;&#x2F;int *p;</span><br><span class="line">&#x2F;&#x2F;等价于</span><br><span class="line">&#x2F;&#x2F;zhengshu x &#x3D;1;</span><br><span class="line">&#x2F;&#x2F;zhengshuzhizhen p;</span><br><span class="line"></span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">struct  DLNode&#123;</span><br><span class="line">    int  data;</span><br><span class="line">    struct DLNode * prior,* next;</span><br><span class="line">&#125;;</span><br><span class="line">typedef  struct  DLNode DNode; &#x2F;&#x2F;侧重于节点</span><br><span class="line">typedef  struct  DLNode * DLinkList;&#x2F;&#x2F;侧重于链表</span><br><span class="line">bool InitDLinkList(DLinkList &amp;L)&#123;</span><br><span class="line">    L &#x3D; (DNode *) malloc(sizeof (DLNode));&#x2F;&#x2F;开辟一个内存空间,并返回指向此结点的指针变量,指针变量存的是这个结点的地址,把结点的地址赋值给指针变量L,即L指向新创建的结点整体。</span><br><span class="line">    DNode * m &#x3D; (DNode *) malloc(sizeof (DLNode));</span><br><span class="line">    DNode * n &#x3D;(DNode *) malloc(sizeof (DLNode));</span><br><span class="line">    DNode * s &#x3D;(DNode *) malloc(sizeof (DLNode));</span><br><span class="line">    if(L&#x3D;&#x3D;NULL) &#x2F;&#x2F;如果内存没空间，返回true</span><br><span class="line">        return false;</span><br><span class="line">    L-&gt;prior &#x3D; NULL;</span><br><span class="line">    L-&gt;data &#x3D; NULL;</span><br><span class="line">    L-&gt;next &#x3D;m;</span><br><span class="line">    m-&gt;data &#x3D;111;</span><br><span class="line">    m-&gt;prior &#x3D;L;</span><br><span class="line">    m-&gt;next &#x3D; n;</span><br><span class="line">    n-&gt;data &#x3D;222;</span><br><span class="line">    n-&gt;prior &#x3D; m;</span><br><span class="line">    n-&gt;next &#x3D; s;</span><br><span class="line">    s-&gt;data &#x3D; 333;</span><br><span class="line">    s-&gt;prior &#x3D; n;</span><br><span class="line">    s-&gt;next &#x3D; NULL;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;遍历一个单链表并打印</span><br><span class="line">void TraversingLinklist(DLinkList &amp;L) &#123;</span><br><span class="line">    DNode * p &#x3D; L;</span><br><span class="line">    while (p-&gt;next!&#x3D;NULL)&#123;</span><br><span class="line">        p&#x3D;p-&gt;next;</span><br><span class="line">        printf(&quot;%d &quot;,p-&gt;data);&#x2F;&#x2F;等同于 （*p）.data</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;双链表的插入</span><br><span class="line">bool InsertNextNode(DNode * p)&#123;</span><br><span class="line">    DNode * s &#x3D; (DNode *) malloc(sizeof (DNode));</span><br><span class="line">    s-&gt;data &#x3D; 222;</span><br><span class="line">    if(p-&gt;next!&#x3D;NULL)&#123; &#x2F;&#x2F;如果p指向的结点不是最后一个结点</span><br><span class="line">        s-&gt;next &#x3D; p-&gt;next; &#x2F;&#x2F; s-&gt;next 整体是个指针变量,（p-&gt;next）指向p指向的下一个结点,(p-&gt;next)存储的是p指向的下一个结点地址的值,所以（s-&gt;next）的值&#x3D;p指向的下一个结点地址的值,所以(s-&gt;next)指向p的下一个结点。</span><br><span class="line">        (p-&gt;next)-&gt;prior &#x3D; s; &#x2F;&#x2F;(p-&gt;next)指向p指向的结点后继结点,(p-&gt;next)-&gt;prior&#x3D;s,s指向结点的地址赋值给p指向结点的后继结点的prior指针变量,所以p指向结点的后继结点的前指针变量指向s指向的结点。</span><br><span class="line">        s-&gt;prior &#x3D; p; &#x2F;&#x2F;同理</span><br><span class="line">        p-&gt;next &#x3D; s;  &#x2F;&#x2F;同理</span><br><span class="line">        return  true;</span><br><span class="line">    &#125;</span><br><span class="line">    if(p-&gt;next &#x3D;&#x3D; NULL)&#123; &#x2F;&#x2F;如果p指向的结点是最后一个结点</span><br><span class="line">        (*s).next &#x3D;(*p).next;</span><br><span class="line">        (*s).prior &#x3D;p;</span><br><span class="line">        (*p).next &#x3D;s; &#x2F;&#x2F;s存储的是s指向节点地址的值,把s赋值给p指向节点的next指针变量,也就是((*p).next)指向s指向的节点</span><br><span class="line">       return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">   &#x2F;&#x2F;定义一个链表指针类型</span><br><span class="line">  DLinkList L;</span><br><span class="line">   &#x2F;&#x2F;初始化一个指针类型</span><br><span class="line">  InitDLinkList(L);</span><br><span class="line">  &#x2F;&#x2F;双链表的插入</span><br><span class="line">  InsertNextNode( L);</span><br><span class="line">  TraversingLinklist(L);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>数据结构和算法</tag>
      </tags>
  </entry>
  <entry>
    <title>ch3.1-内存管理</title>
    <url>/2021/09/13/ch3-1-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="1-内存的基础知识"><a href="#1-内存的基础知识" class="headerlink" title="1.内存的基础知识"></a>1.内存的基础知识</h1><p><img src="https://files.catbox.moe/c3zv2i.png" alt="内存的基础知识"></p>
<h1 id="2-什么是内存，有何作用"><a href="#2-什么是内存，有何作用" class="headerlink" title="2.什么是内存，有何作用"></a>2.什么是内存，有何作用</h1><p><img src="https://files.catbox.moe/7m5ssb.png" alt="内存"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">内存</span><br><span class="line">它的作用就是用来存放数据</span><br><span class="line">程序在执行之前需要先把相关的数据</span><br><span class="line">放入内存才可以被cpu处理</span><br><span class="line">那么这么做的原因是因为</span><br><span class="line">我们的程序本来是放在外存放在磁盘当中的</span><br><span class="line">但是磁盘的读写速度很慢</span><br><span class="line">而CPU的处理速度又很快</span><br><span class="line">程序相关的数据都是从外存读入的</span><br><span class="line">那么显然CPU的这个速度会被外存的速度给拖累</span><br><span class="line">为了缓和CPU和硬盘外存之间的速度矛盾</span><br><span class="line">所以我们要执行的CPU要处理的这些程序数据</span><br><span class="line">把它放到内存里</span><br><span class="line">既然我们的内存是存放数据的</span><br><span class="line">那么我们的内存当中可能会存放很多很多数据</span><br><span class="line">那操作系统是怎么区分各个程序的数据是放在什么地方的呢</span><br><span class="line">那为了区分这些数据存放的位置</span><br><span class="line">就需要给内存进行一个地址的编号</span><br><span class="line">就有点类似于说</span><br><span class="line">我们去住酒店的时候</span><br><span class="line">怎么区分我们每个人住在哪个房间</span><br><span class="line">其实很简单</span><br><span class="line">酒店的做法就是给每个房间编号</span><br><span class="line">比如说这是1号房间</span><br><span class="line">2号房间</span><br><span class="line">3号房间</span><br><span class="line">那我们的内存其实和这个酒店是一样的</span><br><span class="line">只不过酒店的这些房间里</span><br><span class="line">你可以存的是人</span><br><span class="line">而内存当中</span><br><span class="line">它的这些小房间里</span><br><span class="line">它存的是一个一个的数据</span><br><span class="line">内存会被划分成这样一个一个的小房间</span><br><span class="line">每个小房间就是一个存储单元</span><br><span class="line">接下来</span><br><span class="line">在划分了这些存储单元之后</span><br><span class="line">就需要给这些存储单元进行一些编号</span><br><span class="line">那内存的这个地址编号一般来说是从零开始的</span><br><span class="line">然后依次递增</span><br><span class="line">并且每一个地址会对应一个数据的存储单元</span><br><span class="line">也就是会对应一个小房间</span><br><span class="line">那么这样一个存储单元可以存放多少数据呢</span><br><span class="line">这个具体看计算机的编址方式</span><br><span class="line">我们在操作系统这门课中</span><br><span class="line">大部分遇到的情况是告诉你说</span><br><span class="line">计算机按字节编址</span><br><span class="line">按字节编址的意思就是一个地址</span><br><span class="line">它对应的是一个字节的数据</span><br><span class="line">也就是说</span><br><span class="line">这样的一个存储单元</span><br><span class="line">它可以存放一个字节</span><br><span class="line">而一个字节</span><br><span class="line">它又由八个二进制位组成</span><br><span class="line">也就是8个0101这样组成</span><br><span class="line">那在有的题目当中</span><br><span class="line">也有可能会告诉我们这个计算机</span><br><span class="line">是按字编址的</span><br><span class="line">如果它告诉我们是按字编址的话</span><br><span class="line">那么就意味着一个地址</span><br><span class="line">它所对应的存储单元可以存放一个字</span><br><span class="line">而一个字的长度是多少个比特位</span><br></pre></td></tr></table></figure>

<h1 id="3-几个常用的数量单位"><a href="#3-几个常用的数量单位" class="headerlink" title="3.几个常用的数量单位"></a>3.几个常用的数量单位</h1><p><img src="https://files.catbox.moe/j7kahz.png" alt="数量单位"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一个手机</span><br><span class="line">或者一台电脑</span><br><span class="line">它有4GB内存</span><br><span class="line">那除了GB以外</span><br><span class="line">我们还经常看到什么MB、KB这样的单位</span><br><span class="line">所谓的1K其实就是2的10次方这么多</span><br><span class="line">而1M其实是2的20次方那么多</span><br><span class="line">1G其实是2的30次方那么多</span><br><span class="line">所以这个地方 4G 其实它是一个数量</span><br><span class="line">而B是一个数据的单位</span><br><span class="line">这个B bite指的是字节</span><br><span class="line">小写的b</span><br><span class="line">它指的是bit是一个比特位</span><br><span class="line">一个二进制位</span><br><span class="line">一个bite</span><br><span class="line">也就是1个B等于8b</span><br><span class="line">所以一个手机有4GB内存的话</span><br><span class="line">那么就意味着这个手机的内存当中</span><br><span class="line">它可以存放4乘以2的30次方这么多个字节的数据</span><br><span class="line">所以说如果这个手机</span><br><span class="line">或者这个电脑</span><br><span class="line">它是按字节编址的</span><br><span class="line">那么这个内存的地址空间就应该是</span><br><span class="line">4乘以2的30次方这么多个存储单元</span><br><span class="line">每个存储单元可以存放一个字节</span><br><span class="line">在计算机的世界当中</span><br><span class="line">所有的数字其实都是用二进制0101这样来表示的</span><br><span class="line">包括我们的内存地址</span><br><span class="line">其实也需要用二进制来表示</span><br><span class="line">所以有的题目当中可能会告诉我们</span><br><span class="line">内存的大小是多少</span><br><span class="line">比如说内存的大小是4GB</span><br><span class="line">并且告诉我们这个内存是按字节编址的</span><br><span class="line">对于这个手机来说</span><br><span class="line">它的地址至少需要用32个二进制位来表示</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>java_SE-io流</title>
    <url>/2021/07/25/java-SE-io%E6%B5%81/</url>
    <content><![CDATA[<h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IO流的概念</span><br><span class="line"></span><br><span class="line">IO就是Input和Output的简写，也就是输入和输出的含义</span><br><span class="line"></span><br><span class="line">IO流就是指读写数据时像流水一样从一端流到另一端，因此得名为“流”</span><br></pre></td></tr></table></figure>



<h2 id="基本分类"><a href="#基本分类" class="headerlink" title="基本分类"></a>基本分类</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.按照读写数据基本单位的不同，分为字节流和字符流</span><br><span class="line"></span><br><span class="line">其中字节流主要指以字节为单位进行数据读写的流，可以读写任意类型的文件</span><br><span class="line"></span><br><span class="line">其中字符流主要指以字符（2个字节）为单位进行数据读写的流，只能读写文本文件</span><br><span class="line"></span><br><span class="line">2.按照读写数据的方向不同，分为输入流和输出流（站在程序的角度）</span><br><span class="line"></span><br><span class="line">其中输入流主要指从文件中读取数据内容输入到程序中，也就是读数据</span><br><span class="line"></span><br><span class="line">其中输出流主要指将程序中的数据内容输出到文件中，也就是写文件</span><br><span class="line"></span><br><span class="line">3.按照流的角色不同分为节点流和处理流</span><br><span class="line"></span><br><span class="line">其中节点流主要指直接和输入输出源对接的流</span><br><span class="line"></span><br><span class="line">其中处理流主要指需要建立在节点流的基础之上的流</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入流和输出流的区别</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/h3szfl.png" alt="输入流和输出流的区别"></p>
<h2 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h2><p><img src="https://files.catbox.moe/vgsvun.png" alt="体系结构"></p>
<h2 id="IO流重点"><a href="#IO流重点" class="headerlink" title="IO流重点"></a>IO流重点</h2><p><img src="https://files.catbox.moe/ifoofb.png" alt="IO流重点"></p>
<h3 id="FileWriter类（重点）"><a href="#FileWriter类（重点）" class="headerlink" title="FileWriter类（重点）"></a>FileWriter类（重点）</h3><h4 id="（1）基本概念"><a href="#（1）基本概念" class="headerlink" title="（1）基本概念"></a>（1）基本概念</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.io.FileWriter类主要将文本内容写入到文本文件中</span><br></pre></td></tr></table></figure>



<h4 id="（2）常用的方法"><a href="#（2）常用的方法" class="headerlink" title="（2）常用的方法"></a>（2）常用的方法</h4><table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>FileWriter(String fileName)</td>
<td>根据参数指定的文件名构造对象</td>
</tr>
<tr>
<td>FileWriter(String fileName,boolean append)</td>
<td>以追加的方式根据参数指定的文件名来构造对象</td>
</tr>
<tr>
<td>void write(int c)</td>
<td>写入单个字符</td>
</tr>
<tr>
<td>void write(char[] cbuf, int off, int len)</td>
<td>将指定字符数组中从偏移量off开始的len个字符写入此文件输出流</td>
</tr>
<tr>
<td>void write(char[] cbuf)</td>
<td>将cbuf.length个字符从指定字符数组写入此文件输出流中</td>
</tr>
<tr>
<td>void flush()</td>
<td>刷新流</td>
</tr>
<tr>
<td>void close()</td>
<td>关闭流对象并释放有关的资源</td>
</tr>
</tbody></table>
<h5 id="FileWriter示例代码1"><a href="#FileWriter示例代码1" class="headerlink" title="FileWriter示例代码1"></a>FileWriter示例代码1</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.ze1Sure.IOStream;</span><br><span class="line"></span><br><span class="line">import com.sun.xml.internal.ws.api.model.wsdl.WSDLOutput;</span><br><span class="line"></span><br><span class="line">import java.io.FileWriter;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class fileWriterTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F; fw&#x3D; new FileWriter(&quot;d:&#x2F;a.txt&quot;) 这一句话相当于把管道(fw)插进了水桶(a.txt)中</span><br><span class="line">        &#x2F;&#x2F; fw.write(&quot;hello,java&quot;) 通过管道把hello,java流到水桶(a.txt)中</span><br><span class="line">        &#x2F;&#x2F;fw.close() 让水管与水桶断开关联</span><br><span class="line">        &#x2F;&#x2F;flush方法 往水管里面灌水的时候会水管里会残留一些文件,flush就是把水管里面残留的东西都给空干净</span><br><span class="line">        &#x2F;&#x2F;close自带刷新功能flush就不用写了</span><br><span class="line">        &#x2F;&#x2F;注:在main方法中不建议直接抛出异常了,在main方法中抛出相当于抛给了jvm,jvm工作量已经很大了</span><br><span class="line">        &#x2F;&#x2F;Ctrl alt + T 来生成异常的捕获代码等 Alt shift + 方向键 整体挪代码</span><br><span class="line">        &#x2F;&#x2F;tab键可以缩进</span><br><span class="line">        FileWriter fw&#x3D;null;</span><br><span class="line">        &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                &#x2F;&#x2F;1.构造FileWriter类型的对象与a.txt文件关联 (把一个水管怼到水桶中)</span><br><span class="line">                &#x2F;&#x2F;若文件不存在，会自动创建新的空文件</span><br><span class="line">                &#x2F;&#x2F;若文件存在，该流会以追加的方式创建对象去关联文件</span><br><span class="line">                &#x2F;&#x2F;fw &#x3D; new FileWriter(&quot;d:&#x2F;a.txt&quot;);</span><br><span class="line">                &#x2F;&#x2F;若文件不存在则自动创建新的空文件，若文件存在则保留原有数据内容</span><br><span class="line">                fw &#x3D; new FileWriter(&quot;d:&#x2F;a.txt&quot;,true);</span><br><span class="line">                &#x2F;&#x2F;2.通过流对象写入数据内容(灌水)</span><br><span class="line">                fw.write(&quot;hello,java&quot;);</span><br><span class="line">                System.out.println(&quot;写入数据成功！&quot;);</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                &#x2F;&#x2F;3.关闭流对象并释放有关的资源(水管拿走)</span><br><span class="line">                if (fw !&#x3D; null)&#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        fw.close();</span><br><span class="line">                    &#125; catch (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="运行原理图"><a href="#运行原理图" class="headerlink" title="运行原理图"></a>运行原理图</h6><p><img src="https://files.catbox.moe/fsqui4.png" alt="运行原理图"></p>
<h6 id="示例代码1运行结果图"><a href="#示例代码1运行结果图" class="headerlink" title="示例代码1运行结果图"></a>示例代码1运行结果图</h6><p><img src="https://files.catbox.moe/47b0j8.png" alt="运行结果图"></p>
<h6 id="以追加的方式运行结果"><a href="#以追加的方式运行结果" class="headerlink" title="以追加的方式运行结果"></a>以追加的方式运行结果</h6><p><img src="https://files.catbox.moe/en250w.png" alt="以追加的方式运行结果"></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo+gitee部署</title>
    <url>/2021/07/25/hexo-gitee%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h2 id="hexo命令集和备忘录"><a href="#hexo命令集和备忘录" class="headerlink" title="hexo命令集和备忘录"></a>hexo命令集和备忘录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.sudo hexo n &quot;文章标题&quot; &#x2F;&#x2F;新建文章</span><br><span class="line">2.标签和归档别忘了</span><br><span class="line">3.sudo hexo clean &#x2F;&#x2F;清生成之前清理一哈</span><br><span class="line">4.sudo hexo g &#x2F;&#x2F;生成一哈文件</span><br><span class="line">5.sudo hexo d &#x2F;&#x2F;部署到gitee上</span><br><span class="line">6.别忘了服务里面giteepage重新生成一哈</span><br><span class="line">7.因为hexo静态，所以清除一下浏览器缓存</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>java_SE-this关键字的基本概念</title>
    <url>/2021/07/25/java_SE-this%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 编程实现this关键字的基本概念</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class ThisTest &#123;</span><br><span class="line">    &#x2F;&#x2F;自定义构造方法</span><br><span class="line">    ThisTest()&#123;</span><br><span class="line">        &#x2F;&#x2F;this代表当前正在构造的对象</span><br><span class="line">        System.out.println(&quot;构造方法中: this&#x3D; &quot; + this);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;自定义成员方法</span><br><span class="line">    void show()&#123;</span><br><span class="line">        &#x2F;&#x2F;this代表当前正在调用的对象</span><br><span class="line">        System.out.println(&quot;成员方法中：this&#x3D;&quot; + this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F;1.声明ThisTest类型的引用指向该类型的对象</span><br><span class="line">        ThisTest tt &#x3D; new ThisTest();</span><br><span class="line">        &#x2F;&#x2F;2.调用show方法</span><br><span class="line">        tt.show();</span><br><span class="line">        System.out.println(&quot;main方法中: tt&#x3D; &quot; + tt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行结果说明this关键字本质上就是当前类类型的引用变量"><a href="#运行结果说明this关键字本质上就是当前类类型的引用变量" class="headerlink" title="运行结果说明this关键字本质上就是当前类类型的引用变量"></a>运行结果说明this关键字本质上就是当前类类型的引用变量</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">构造方法中: this&#x3D; com.ze1sure.ThisTest@29453f44</span><br><span class="line">成员方法中：this&#x3D;com.ze1sure.ThisTest@29453f44</span><br><span class="line">main方法中: tt&#x3D; com.ze1sure.ThisTest@29453f44</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>持续学习</title>
    <url>/2021/08/10/%E6%8C%81%E7%BB%AD%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h5 id="所有资源均来自冲浪收集与朋友分享，如有侵权请联系删除！永久更新，一起持续学习"><a href="#所有资源均来自冲浪收集与朋友分享，如有侵权请联系删除！永久更新，一起持续学习" class="headerlink" title="所有资源均来自冲浪收集与朋友分享，如有侵权请联系删除！永久更新，一起持续学习"></a>所有资源均来自冲浪收集与朋友分享，如有侵权请联系删除！永久更新，一起持续学习</h5><h5 id="课程分享请加微信"><a href="#课程分享请加微信" class="headerlink" title="课程分享请加微信"></a>课程分享请加微信</h5><img src="https://files.catbox.moe/98l410.jpg" alt="微信" style="zoom:25%;" />

<h5 id="所有课程标题"><a href="#所有课程标题" class="headerlink" title="所有课程标题"></a>所有课程标题</h5><p><img src="https://files.catbox.moe/rsapl7.png" alt="课程标题"></p>
<h5 id="JAVA系列"><a href="#JAVA系列" class="headerlink" title="JAVA系列"></a>JAVA系列</h5><img src="https://files.catbox.moe/2vhemo.jpg" style="zoom:25%;" />

<h5 id="前端系列"><a href="#前端系列" class="headerlink" title="前端系列"></a>前端系列</h5><img src="https://files.catbox.moe/71y97e.png" alt="前端系列" style="zoom:50%;" />

<h5 id="Python系列"><a href="#Python系列" class="headerlink" title="Python系列"></a>Python系列</h5><img src="https://files.catbox.moe/91vkyp.png" style="zoom:50%;" />

<h5 id="安卓系列"><a href="#安卓系列" class="headerlink" title="安卓系列"></a>安卓系列</h5><img src="https://files.catbox.moe/q9lyg2.jpg" style="zoom:25%;" />

<h5 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h5><img src="https://files.catbox.moe/57jit9.png" alt="数据结构和算法" style="zoom:50%;" />

<h5 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h5><img src="https://files.catbox.moe/668fzo.png" alt="大数据" style="zoom:50%;" />

<h5 id="游戏开发"><a href="#游戏开发" class="headerlink" title="游戏开发"></a>游戏开发</h5><img src="https://files.catbox.moe/x2kdx8.png" alt="游戏开发" style="zoom:50%;" />

<h5 id="go系列"><a href="#go系列" class="headerlink" title="go系列"></a>go系列</h5><img src="https://files.catbox.moe/2cheke.png" alt="go" style="zoom:50%;" />

<h5 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h5><img src="https://files.catbox.moe/0vhun8.png" alt="AI" style="zoom:50%;" />

<h5 id="Linux-k8s-docker-大数据"><a href="#Linux-k8s-docker-大数据" class="headerlink" title="Linux-k8s-docker-大数据"></a>Linux-k8s-docker-大数据</h5><img src="https://files.catbox.moe/fj3aas.png" style="zoom:40%;" />

]]></content>
      <categories>
        <category>持续学习</category>
      </categories>
      <tags>
        <tag>持续学习</tag>
      </tags>
  </entry>
  <entry>
    <title>指针的终极奥义</title>
    <url>/2021/09/24/%E6%8C%87%E9%92%88%E7%9A%84%E7%BB%88%E6%9E%81%E5%A5%A5%E4%B9%89/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">struct  Person&#123;</span><br><span class="line">    int id;</span><br><span class="line">    char sex;</span><br><span class="line">    char name;</span><br><span class="line">    Person * nextPserson;</span><br><span class="line">&#125;;</span><br><span class="line">typedef struct  Person p;</span><br><span class="line">typedef struct Person * person;</span><br><span class="line">&#x2F;&#x2F;遍历一个单链表并打印</span><br><span class="line">void TraversingLinklist(person &amp;per)&#123;</span><br><span class="line">    person  p&#x3D;per;</span><br><span class="line">    while (p-&gt;nextPserson!&#x3D;NULL)&#123;</span><br><span class="line">        p&#x3D;p-&gt;nextPserson;</span><br><span class="line">        printf(&quot;%d &quot;,p-&gt;id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    p * p1 &#x3D; (person) malloc(sizeof(p));&#x2F;&#x2F;malloc 函数返回的是一个指针类型的变量</span><br><span class="line">    person per &#x3D; p1;</span><br><span class="line">    p * p2 &#x3D; (person) malloc(sizeof(p));</span><br><span class="line">&#x2F;&#x2F;    printf(&quot;%p ,%p&quot;,p1,p2);</span><br><span class="line">    p1-&gt;id&#x3D;1 ;</span><br><span class="line">    p1-&gt;name&#x3D;&#39;ze1sure&#39;;</span><br><span class="line">    (* p1).sex &#x3D; &#39;nan&#39;;</span><br><span class="line">    (* p1).nextPserson &#x3D; p2; &#x2F;&#x2F;((* p1).nextPserson)整体是一个指针变量, p2存的是第二个结点的地址</span><br><span class="line">&#x2F;&#x2F;    p2-&gt;id&#x3D;2;</span><br><span class="line">&#x2F;&#x2F;    (* p2).name&#x3D; &#39;ze1sure1&#39;;</span><br><span class="line">&#x2F;&#x2F;    (* p2).sex &#x3D; &#39;nv&#39;;</span><br><span class="line">&#x2F;&#x2F;    (* p2).nextPserson&#x3D; NULL;</span><br><span class="line">    (*((* p1).nextPserson)).id&#x3D;2;</span><br><span class="line">    (*((* p1).nextPserson)).name&#x3D;&#39;ze1sure1&#39;;</span><br><span class="line">    (*((* p1).nextPserson)).sex &#x3D; &#39;nv&#39;;</span><br><span class="line">    (*((* p1).nextPserson)).nextPserson &#x3D;NULL;</span><br><span class="line">    TraversingLinklist(per);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>数据结构和算法</tag>
      </tags>
  </entry>
  <entry>
    <title>ch3.1-栈</title>
    <url>/2021/09/24/%E6%A0%88/</url>
    <content><![CDATA[<h1 id="1-栈的定义"><a href="#1-栈的定义" class="headerlink" title="1.栈的定义"></a>1.栈的定义</h1><p><img src="https://files.catbox.moe/wzqreb.png" alt="栈"></p>
<p><img src="https://files.catbox.moe/ohg3oi.png" alt="栈的插入和删除"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">生活中的栈</span><br><span class="line">图1:盘子</span><br><span class="line">放一个新的盘子</span><br><span class="line">只允许从顶部一个一个放</span><br><span class="line">拿走的时候只允许从顶部一个一个拿</span><br><span class="line">图2:烤串</span><br><span class="line">插入烤串的时候先把下面的肉串一个一个插入</span><br><span class="line">吃肉串的时候先从上面一个一个吃</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/1tpwft.png" alt="栈"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">进栈gif图</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/z831ff.gif" alt="进栈gif图"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">进栈顺序：a1-&gt;a2-&gt;a3-&gt;a4-&gt;a5</span><br><span class="line">出栈顺序：a5-&gt;a4-&gt;a3-&gt;a2-&gt;a1</span><br><span class="line">特点 ： 后进先出</span><br><span class="line">Last in First Out(LIFO)</span><br></pre></td></tr></table></figure>

<h1 id="2-栈相关的基本操作"><a href="#2-栈相关的基本操作" class="headerlink" title="2.栈相关的基本操作"></a>2.栈相关的基本操作</h1><p><img src="https://files.catbox.moe/963x9g.png" alt="栈"></p>
<p><img src="https://files.catbox.moe/trojy3.png" alt="栈的相关操作"></p>
<h1 id="3-栈的常考题型"><a href="#3-栈的常考题型" class="headerlink" title="3.栈的常考题型"></a>3.栈的常考题型</h1><p><img src="https://files.catbox.moe/0hg0sz.png" alt="栈的常考题型"></p>
<h1 id="4-知识回顾和重要考点"><a href="#4-知识回顾和重要考点" class="headerlink" title="4.知识回顾和重要考点"></a>4.知识回顾和重要考点</h1><p><img src="https://files.catbox.moe/4nwzes.png" alt="知识回顾"></p>
]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>数据结构和算法</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义持久框架设计实现</title>
    <url>/2021/10/11/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%81%E4%B9%85%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1%E5%AE%9E%E7%8E%B0(todo)/</url>
    <content><![CDATA[<h1 id="1-自定义持久框架实现思路"><a href="#1-自定义持久框架实现思路" class="headerlink" title="1.自定义持久框架实现思路"></a>1.自定义持久框架实现思路</h1><p><img src="https://files.catbox.moe/fdedhb.png" alt="自定义持久层框架实现思路"></p>
<h1 id="2-使用端"><a href="#2-使用端" class="headerlink" title="2.使用端"></a>2.使用端</h1><h1 id="3-框架端"><a href="#3-框架端" class="headerlink" title="3.框架端"></a>3.框架端</h1>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>ch1.2--计算机组成与分类</title>
    <url>/2021/08/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9A%84%E7%BB%84%E6%88%90%E4%B8%8E%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<h5 id="计算机网络的组成部分"><a href="#计算机网络的组成部分" class="headerlink" title="计算机网络的组成部分"></a>计算机网络的组成部分</h5><h6 id="1-组成部分：硬件、软件、协议（一系列规则和约定的集合）"><a href="#1-组成部分：硬件、软件、协议（一系列规则和约定的集合）" class="headerlink" title="1.组成部分：硬件、软件、协议（一系列规则和约定的集合）"></a>1.组成部分：硬件、软件、协议（一系列规则和约定的集合）</h6><p><img src="https://files.catbox.moe/i674p5.png" alt="组成部分"></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">硬件就是我们这个端系统以及中间的路由器 交换机等等的中间设备</span><br><span class="line">软件的话就是附在端系统上 甚至是包括这个中间设备上面 也有一定的软件</span><br><span class="line">把这些软件布到这些硬件上 再通过协议穿梭于各个硬件当中就构成了一个计算机网络</span><br><span class="line">计算机网络的每一个层次 它其实都是有很多协议的</span><br><span class="line">根据这些协议 我们就可以规定这个数据如何封装 如何打包 如何传输 如何从这一端到另一端</span><br><span class="line">这个都是协议要包含 要学习的内容</span><br></pre></td></tr></table></figure>

<h6 id="2-工作方式"><a href="#2-工作方式" class="headerlink" title="2.工作方式"></a>2.工作方式</h6><p><img src="https://files.catbox.moe/83nchc.png" alt="工作方式"></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">1.边缘部分：边缘部分就是由一系列的端系统组成的 </span><br><span class="line">这些端系统呢 不仅包括计算机 也可以包括非常庞大的一些服务器 </span><br><span class="line">还有大型计算机 甚至呢 还可以包括是非常小的网络摄像头 </span><br><span class="line">它可以实时的捕获到一些信息 并且把这些信息呢实时的发布出去 </span><br><span class="line">这些都是边缘部分 计算机网络只有边缘部分还不够 </span><br><span class="line">它需要使用核心部分的一些服务 </span><br><span class="line">也就是通过核心部分提供服务 </span><br><span class="line">边缘部分才能够实现端系统与端系统之间的通信 </span><br><span class="line">端系统指的就是在边缘的这个末端的系统 </span><br><span class="line">系统之间的通信 强调的是进程之间的通信 </span><br><span class="line">也就是主机A和主机B在通信 </span><br><span class="line">其实讲的是主机A当中某个进程和主机B当中的某个进程之间的通信 </span><br><span class="line">比如说在打开QQ的时候登录之后 </span><br><span class="line">我在这个界面上输入我要发出的文字 </span><br><span class="line">那么这个时候呢 </span><br><span class="line">那么QQ它就是我电脑当中正在运行的一个程序 </span><br><span class="line">那么B这边呢 </span><br><span class="line">也有一个人打开了QQ 在这边接收我的消息或者它给别人发消息 </span><br><span class="line">那么它所使用的QQ呢 </span><br><span class="line">也是一个正在运行的程序 </span><br><span class="line">也是一个进程 </span><br><span class="line">所以再强调一下</span><br><span class="line">系统间的通信</span><br><span class="line">就是两个端和端系统之间的进程通信 </span><br><span class="line">1.1 C/S方式</span><br><span class="line">client/server</span><br><span class="line">1.2 P2P方式 peer to peer(大家都是对等的 没有一台主机说我一定是个服务器 也没有一台主机说我永远是一个客户机 在这种情况下 所有的主机都有两个身份 一面是提供服务的服务者 另一面呢就是使用服务的享受者也可以说是客户 所以这里面的每一个端系统 它同时又是客户 又是服务器 参考迅雷下载)</span><br><span class="line">2.核心部分 为边缘部分服务 包括路由器 一些中间设备 还有一些网络链接起来</span><br><span class="line">总结:核心部分和边缘部分连接在一起就构成了计算机网络 那这也是在工作方式上面对计算机网络组成的一个划分</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/06xk0s.png" alt="工作方式"></p>
<h6 id="3-功能组成"><a href="#3-功能组成" class="headerlink" title="3.功能组成"></a>3.功能组成</h6><p><img src="https://files.catbox.moe/afya2p.png" alt="功能组成"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.数据通信</span><br><span class="line">2.资源共享</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/k967dj.png" alt="工作方式"></p>
<h5 id="计算机网络的分类"><a href="#计算机网络的分类" class="headerlink" title="计算机网络的分类"></a>计算机网络的分类</h5><h6 id="1-按分布范围分：广域网WAN-城域网MAN-局域网LAN-个人区域网PAN"><a href="#1-按分布范围分：广域网WAN-城域网MAN-局域网LAN-个人区域网PAN" class="headerlink" title="1.按分布范围分：广域网WAN 城域网MAN 局域网LAN 个人区域网PAN"></a>1.按分布范围分：广域网WAN 城域网MAN 局域网LAN 个人区域网PAN</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.1.广域网</span><br><span class="line">广域网的范围呢 </span><br><span class="line">非常之广</span><br><span class="line">几十到几千公里</span><br><span class="line">那么广域网呢</span><br><span class="line">其实算是因特网的核心部分了</span><br><span class="line">它的任务就是通过比较长的距离</span><br><span class="line">可以是跨国家的距离</span><br><span class="line">然后来运送主机之间所要发送的一些数据</span><br><span class="line">1.2.城域网</span><br><span class="line">城域网的范围呢</span><br><span class="line">顾名思义</span><br><span class="line">就是可以覆盖一个城市的这样一个网络</span><br><span class="line">1.3.局域网</span><br><span class="line">局域网在地理上呢是比较小的一个范围</span><br><span class="line">比如说在一个学校或者是一个办公楼</span><br><span class="line">都可以是局域网的范围</span><br><span class="line">1.4.个人区域网</span><br><span class="line">就是在个人工作的地方把自己的一些电子设备</span><br><span class="line">比如说电脑或者是智能手表</span><br><span class="line">智能手环等等通过无线技术连接起来的网络</span><br><span class="line">也称之为无线个人区域网</span><br><span class="line">范围呢 很小 基本就在十米左右</span><br><span class="line">那么我们这里面主要学习的就是广域网和局域网</span><br><span class="line"></span><br><span class="line">注：局域网和广域网的区别</span><br><span class="line">判断广域网还是局域网</span><br><span class="line">主要是看使用的是交换技术还是广播技术</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/rglc0z.png" alt="分类"></p>
<h6 id="2-按使用者分：可以分为公用网和专用网"><a href="#2-按使用者分：可以分为公用网和专用网" class="headerlink" title="2.按使用者分：可以分为公用网和专用网"></a>2.按使用者分：可以分为公用网和专用网</h6><p><img src="https://files.catbox.moe/y8e3zt.png" alt="分类"></p>
<h6 id="3-按交换技术分"><a href="#3-按交换技术分" class="headerlink" title="3.按交换技术分"></a>3.按交换技术分</h6><p><img src="https://files.catbox.moe/7l772r.png" alt="分类"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3.1 电路交换</span><br><span class="line">电路交换方式呢</span><br><span class="line">大家还挺常见的</span><br><span class="line">因为是在打电话的时候</span><br><span class="line">打电话实际就是使用电路交换方式</span><br><span class="line">电路交换的原理:</span><br><span class="line">3.1.1建立连接</span><br><span class="line">也就是占用这样一个通信资源</span><br><span class="line">3.1.2通话</span><br><span class="line">通话其实就是一直占用这个资源</span><br><span class="line">3.1.3释放链接</span><br><span class="line">我们打完电话</span><br><span class="line">把电话一放下</span><br><span class="line">也就是释放链接</span><br><span class="line">归还了通信资源</span><br><span class="line">那么有这三个步骤的一种交换方式</span><br><span class="line">就称之为是电路交换</span><br><span class="line">电路交换的特点就是在通话的全部时间内</span><br><span class="line">通话的两个人是完全占着中间的资源</span><br><span class="line">不能被别人所使用的</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3.2 报文交换</span><br><span class="line">3.3 分组交换</span><br><span class="line">两个交换技术总结一点来说就是(存储转发)</span><br><span class="line">这个数据 可以是报文或者是分组的形式</span><br><span class="line">其实</span><br><span class="line">这个分组就是把报文切开了</span><br><span class="line">切成一小个一小个 那这个就叫分组</span><br><span class="line">一整个完整的文件呢</span><br><span class="line">比如说是一个文件</span><br><span class="line">或是一个媒体文件</span><br><span class="line">都称之为是一个报文</span><br><span class="line">那他们两个的存储转发是什么意思呢？</span><br><span class="line">我们现在要发送的这个数据</span><br><span class="line">无论是报文或者是分组</span><br><span class="line">首先我们就要放到这个网络上面传输</span><br><span class="line">可能我先给了一个路由器</span><br><span class="line">那这个路由器R1呢 就会存下来我的这个报文</span><br><span class="line">或者分组来检查一下它要往哪发</span><br><span class="line">比如它这现在有两条路</span><br><span class="line">可以经过R2和R3</span><br><span class="line">它会发现如果走R2</span><br><span class="line">接下来的路会走的更快一点</span><br><span class="line">那么它就会把这个数据转发给R2这样一条路</span><br><span class="line">所以存储转发当中的存储呢</span><br><span class="line">是指这个路由器对于收回来的这个数据先存储</span><br><span class="line">然后查看这个数据的一些目的地址啊</span><br><span class="line">还有很多其他相关的信息</span><br><span class="line">接下来呢</span><br><span class="line">再转发出去</span><br><span class="line">转发给正确的一个路由方向</span><br><span class="line">那么这个就是报文交换和分组交换的一个特点</span><br><span class="line">可以看到这个特点的就是它知识一段一段的占用</span><br><span class="line">这个链路</span><br><span class="line">并不是像电路交换一样 </span><br><span class="line">独享</span><br><span class="line">占用着资源</span><br><span class="line">同时呢</span><br><span class="line">如果有别的数据在这样一条链路上面发送也是可以的</span><br><span class="line">再次反映出来</span><br><span class="line">这种存储转发的love&amp;peace</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/2t1uxy.png" alt="分类"></p>
<h6 id="4-按照拓扑结构分"><a href="#4-按照拓扑结构分" class="headerlink" title="4.按照拓扑结构分"></a>4.按照拓扑结构分</h6><p><img src="https://files.catbox.moe/h4d2xf.png" alt="分类"></p>
<h6 id="5-广播式网络"><a href="#5-广播式网络" class="headerlink" title="5.广播式网络"></a>5.广播式网络</h6><p><img src="https://files.catbox.moe/oknhlh.png" alt="分类"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">广播式网络呢</span><br><span class="line">其实就是应用在局域网当中的一种网络</span><br><span class="line">它是共享公共通信信道的</span><br><span class="line">通常使用的是这个总线形的拓扑结构</span><br><span class="line">共享中间的这样一条公共的信道</span><br><span class="line">所有的这个联网的计算机呢</span><br><span class="line">都可以享用这个信道</span><br><span class="line">并且能当一台计算机向这个共享信道发送报文分组的时候</span><br><span class="line">其它的所有计算机都会听到</span><br><span class="line">点对点的网络呢</span><br><span class="line">它的特点是使用</span><br><span class="line">(分组) (存储转发) 和 (路由选择机制)</span><br><span class="line">那这种网络呢 通常就是对应于这个广域网</span><br><span class="line">那么这个广域网基本上都是点对点的网络</span><br><span class="line">它指的是这个网络当中</span><br><span class="line">如果两台主机之间需要通信</span><br><span class="line">但是没有直接连接的话</span><br><span class="line">它就需要很多中间节点</span><br><span class="line">来实现分组的存储转发和路由的选择</span><br><span class="line">也就是我们刚刚在想报文交换和分组交换这一块存储转发的机制</span><br><span class="line">那在点对点网络当中呢</span><br><span class="line">它和广播式网络不通的就是我要发的这个信息</span><br><span class="line">并不是所有人都能听得到</span><br><span class="line">只有你才能听得到</span><br><span class="line">并且这个信息如何传到你那呢</span><br><span class="line">就需要通过分组存储转发及路由选择机制</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p><img src="https://files.catbox.moe/pg04s8.png" alt="分类"></p>
]]></content>
      <categories>
        <category>计网</category>
      </categories>
      <tags>
        <tag>计网</tag>
      </tags>
  </entry>
  <entry>
    <title>链栈的c语言实现</title>
    <url>/2021/09/24/%E9%93%BE%E6%A0%88%E7%9A%84c%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="1-入栈操作"><a href="#1-入栈操作" class="headerlink" title="1.入栈操作"></a>1.入栈操作</h1><h2 id="1-1入栈操作顺序图（只在头节点后面插入）"><a href="#1-1入栈操作顺序图（只在头节点后面插入）" class="headerlink" title="1.1入栈操作顺序图（只在头节点后面插入）"></a>1.1入栈操作顺序图（只在头节点后面插入）</h2><p><img src="https://files.catbox.moe/30qlvn.gif" alt="进栈操作"></p>
<h2 id="1-2代码实现"><a href="#1-2代码实现" class="headerlink" title="1.2代码实现"></a>1.2代码实现</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">struct Stack&#123;</span><br><span class="line">    int  data;</span><br><span class="line">    Stack * next;</span><br><span class="line">&#125;;</span><br><span class="line">typedef Stack Stack_Node;&#x2F;&#x2F;侧重于结点</span><br><span class="line">typedef Stack * Stack_List;&#x2F;&#x2F;侧重于栈链,实际上就是一个指针</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;初始化一个栈</span><br><span class="line">void Init_Stack_List(Stack_List &amp;S)&#123;</span><br><span class="line">    S&#x3D;(Stack_Node *)malloc(sizeof(Stack)); &#x2F;&#x2F;maclloc函数在内存空间开辟了一个Stack大小的空间,并返回开辟的这个空间的结点的地址给指针变量L,我们就称L指向这个结点整体</span><br><span class="line">    &#x2F;&#x2F;此处我们只讨论带头节点的</span><br><span class="line">    S-&gt;data &#x3D;NULL;</span><br><span class="line">    S-&gt;next &#x3D;NULL;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;遍历栈结点并打印</span><br><span class="line">void Traversing_stack_nodes(Stack_Node * S)&#123;</span><br><span class="line">    Stack_Node * p &#x3D; S;</span><br><span class="line">    while (p-&gt;next!&#x3D;NULL)&#123;</span><br><span class="line">        printf(&quot;%d &quot;,(*(p-&gt;next)).data);</span><br><span class="line">        p&#x3D;p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;入栈操作</span><br><span class="line">bool InsertNextStack_Node(Stack_Node * S ,int e)&#123;</span><br><span class="line">   Stack_List M&#x3D; (Stack_Node *)malloc(sizeof(Stack_Node));</span><br><span class="line">   M-&gt;data &#x3D; e;</span><br><span class="line">   M-&gt;next &#x3D; S-&gt;next;</span><br><span class="line">   S-&gt;next &#x3D; M;</span><br><span class="line">   return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line"> Stack_List  S;</span><br><span class="line"> Init_Stack_List(S);</span><br><span class="line"> &#x2F;&#x2F;入栈</span><br><span class="line"> InsertNextStack_Node(S,111);</span><br><span class="line"> InsertNextStack_Node(S,222);</span><br><span class="line"> InsertNextStack_Node(S,333);</span><br><span class="line"> &#x2F;&#x2F;打印栈元素  应该是  333 222 111</span><br><span class="line"> Traversing_stack_nodes(S);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-出栈操作（把链头的一端看成是栈顶的一端）"><a href="#2-出栈操作（把链头的一端看成是栈顶的一端）" class="headerlink" title="2.出栈操作（把链头的一端看成是栈顶的一端）"></a>2.出栈操作（把链头的一端看成是栈顶的一端）</h1><p><img src="https://files.catbox.moe/v5hoa3.png" alt="出栈操作"></p>
<p><img src="https://files.catbox.moe/9gkk45.gif" alt="出栈操作"></p>
<h2 id="2-1代码实现"><a href="#2-1代码实现" class="headerlink" title="2.1代码实现"></a>2.1代码实现</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">struct Stack&#123;</span><br><span class="line">    int  data;</span><br><span class="line">    Stack * next;</span><br><span class="line">&#125;;</span><br><span class="line">typedef Stack Stack_Node;&#x2F;&#x2F;侧重于结点</span><br><span class="line">typedef Stack * Stack_List;&#x2F;&#x2F;侧重于栈链,实际上就是一个指针</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;初始化一个栈</span><br><span class="line">void Init_Stack_List(Stack_List &amp;S)&#123;</span><br><span class="line">    S&#x3D;(Stack_Node *)malloc(sizeof(Stack)); &#x2F;&#x2F;maclloc函数在内存空间开辟了一个Stack大小的空间,并返回开辟的这个空间的结点的地址给指针变量S,我们就称S指向这个结点整体</span><br><span class="line">    &#x2F;&#x2F;此处我们只讨论带头节点的</span><br><span class="line">    S-&gt;data &#x3D;NULL;</span><br><span class="line">    S-&gt;next &#x3D;NULL;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;遍历栈结点并打印</span><br><span class="line">void Traversing_stack_nodes(Stack_Node * S)&#123;</span><br><span class="line">    Stack_Node * p &#x3D; S;</span><br><span class="line">    while (p-&gt;next!&#x3D;NULL)&#123;</span><br><span class="line">        printf(&quot;%d &quot;,(*(p-&gt;next)).data);</span><br><span class="line">        p&#x3D;p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;入栈操作</span><br><span class="line">bool InsertNextStack_Node(Stack_Node * S ,int e)&#123;</span><br><span class="line">   Stack_List M&#x3D; (Stack_Node *)malloc(sizeof(Stack_Node));</span><br><span class="line">   M-&gt;data &#x3D; e;</span><br><span class="line">   M-&gt;next &#x3D; S-&gt;next;</span><br><span class="line">   S-&gt;next &#x3D; M;</span><br><span class="line">   return true;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;出栈操作,只删除头节点后面的元素</span><br><span class="line">bool  deleteNextStack_Node(Stack_Node * S)&#123;</span><br><span class="line">    S-&gt;next &#x3D; (S-&gt;next)-&gt;next; &#x2F;&#x2F;把头结点和头结点的下下个结点链接起来</span><br><span class="line">    free(S-&gt;next);</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line"> Stack_List  S;</span><br><span class="line"> Init_Stack_List(S);</span><br><span class="line"> &#x2F;&#x2F;入栈</span><br><span class="line"> InsertNextStack_Node(S,111);</span><br><span class="line"> InsertNextStack_Node(S,222);</span><br><span class="line"> InsertNextStack_Node(S,333);</span><br><span class="line"> &#x2F;&#x2F;打印栈元素  应该是  333 222 111</span><br><span class="line">&#x2F;&#x2F; Traversing_stack_nodes(S);</span><br><span class="line"> &#x2F;&#x2F;出栈</span><br><span class="line"> deleteNextStack_Node(S);</span><br><span class="line"> &#x2F;&#x2F;打印栈元素  应该是 222 111</span><br><span class="line"> Traversing_stack_nodes(S);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>数据结构和算法</tag>
      </tags>
  </entry>
</search>
